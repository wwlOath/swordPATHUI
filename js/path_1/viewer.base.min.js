window.Seadragon || (window.Seadragon = {});
var Seadragon = window.Seadragon
    , SeadragonConfig = Seadragon.Config;
SeadragonConfig = SeadragonConfig || (Seadragon.Config = {
  debugMode: !1,
  animationTime: 1.5,
  blendTime: .5,
  alwaysBlend: !1,
  autoHideControls: !0,
  constrainDuringPan: !0,
  immediateRender: !1,
  logarithmicZoom: !0,
  wrapHorizontal: !1,
  wrapVertical: !1,
  wrapOverlays: !1,
  transformOverlays: !1,
  minZoomDimension: null,
  minZoomImageRatio: .8,
  maxZoomPixelRatio: 2,
  visibilityRatio: .8,
  springStiffness: 5,
  imageLoaderLimit: 2,
  clickTimeThreshold: 200,
  clickDistThreshold: 5,
  zoomPerClick: 2,
  zoomPerScroll: Math.pow(2, 1 / 3),
  zoomPerSecond: 2,
  proxyUrl: null,
  imagePath: "img/"
});
var SeadragonStrings = Seadragon.Strings;
SeadragonStrings || ((SeadragonStrings = Seadragon.Strings = {
      Errors: {
        Failure: "Sorry, but Seadragon Ajax can't run on your browser!\nPlease try using IE 8 or Firefox 3.\n",
        Dzc: "Sorry, we don't support Deep Zoom Collections!",
        Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
        Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
        Empty: "You asked us to open nothing, so we did just that.",
        ImageFormat: "Sorry, we don't support {0}-based Deep Zoom Images.",
        Security: "It looks like a security restriction stopped us from loading this Deep Zoom Image.",
        Status: "This space unintentionally left blank ({0} {1}).",
        Unknown: "Whoops, something inexplicably went wrong. Sorry!"
      },
      Messages: {
        Loading: "Loading..."
      },
      Tooltips: {
        FullPage: "Toggle full page",
        Home: "Go home",
        ZoomIn: "Zoom in (you can also use your mouse's scroll wheel)",
        ZoomOut: "Zoom out (you can also use your mouse's scroll wheel)"
      }
    }).getString = function(t) {
      for (var e = t.split("."), i = SeadragonStrings, n = 0; n < e.length; n++)
        i = i[e[n]] || {};
      "string" != typeof i && (i = "");
      var o = arguments;
      return i.replace(/\{\d+\}/g, function(t) {
        var e = parseInt(t.match(/\d+/)) + 1;
        return e < o.length ? o[e] : ""
      })
    }
        ,
        SeadragonStrings.setString = function(t, e) {
          for (var i = t.split("."), n = SeadragonStrings, o = 0; o < i.length - 1; o++)
            n[i[o]] || (n[i[o]] = {}),
                n = n[i[o]];
          n[i[o]] = e
        }
);
var SeadragonDebug = function() {
  this.log = function(t, e) {
    var i = window.console || {}
        , n = SeadragonConfig.debugMode;
    n && i.log ? i.log(t) : n && e && alert(t)
  }
      ,
      this.error = function(t, e) {
        var i = window.console || {}
            , n = SeadragonConfig.debugMode;
        if (n && i.error ? i.error(t) : n && alert(t),
            n)
          throw e || new Error(t)
      }
      ,
      this.fail = function(t) {
        throw alert(SeadragonStrings.getString("Errors.Failure")),
            new Error(t)
      }
};
SeadragonDebug = Seadragon.Debug = new SeadragonDebug;
var SeadragonProfiler = Seadragon.Profiler = function() {
  var e = this
      , i = !1
      , n = 0
      , o = null
      , a = null
      , r = 1 / 0
      , s = 0
      , h = 0
      , l = 1 / 0
      , d = 0
      , c = 0;
  this.getAvgUpdateTime = function() {
    return s
  }
      ,
      this.getMinUpdateTime = function() {
        return r
      }
      ,
      this.getMaxUpdateTime = function() {
        return h
      }
      ,
      this.getAvgIdleTime = function() {
        return d
      }
      ,
      this.getMinIdleTime = function() {
        return l
      }
      ,
      this.getMaxIdleTime = function() {
        return c
      }
      ,
      this.isMidUpdate = function() {
        return i
      }
      ,
      this.getNumUpdates = function() {
        return n
      }
      ,
      this.beginUpdate = function() {
        if (i && e.endUpdate(),
            i = !0,
            o = (new Date).getTime(),
            !(n < 1)) {
          var t = o - a;
          d = (d * (n - 1) + t) / n,
          t < l && (l = t),
          c < t && (c = t)
        }
      }
      ,
      this.endUpdate = function() {
        if (i) {
          a = (new Date).getTime(),
              i = !1;
          var t = a - o;
          s = (s * (++n - 1) + t) / n,
          t < r && (r = t),
          h < t && (h = t)
        }
      }
      ,
      this.clearProfile = function() {
        i = !1,
            a = o = null,
            r = 1 / (n = 0),
            l = 1 / (h = s = 0),
            c = d = 0
      }
}
    , SeadragonPoint = Seadragon.Point;
!function() {
  if (!SeadragonPoint) {
    var t = (SeadragonPoint = Seadragon.Point = function(t, e) {
          this.x = "number" == typeof t ? t : 0,
              this.y = "number" == typeof e ? e : 0
        }
    ).prototype;
    t.plus = function(t) {
      return new SeadragonPoint(this.x + t.x,this.y + t.y)
    }
        ,
        t.minus = function(t) {
          return new SeadragonPoint(this.x - t.x,this.y - t.y)
        }
        ,
        t.times = function(t) {
          return new SeadragonPoint(this.x * t,this.y * t)
        }
        ,
        t.divide = function(t) {
          return new SeadragonPoint(this.x / t,this.y / t)
        }
        ,
        t.negate = function() {
          return new SeadragonPoint(-this.x,-this.y)
        }
        ,
        t.distanceTo = function(t) {
          return Math.sqrt(Math.pow(this.x - t.x, 2) + Math.pow(this.y - t.y, 2))
        }
        ,
        t.apply = function(t) {
          return new SeadragonPoint(t(this.x),t(this.y))
        }
        ,
        t.equals = function(t) {
          return t instanceof SeadragonPoint && this.x === t.x && this.y === t.y
        }
        ,
        t.toString = function() {
          return "(" + this.x + "," + this.y + ")"
        }
        ,
        t.rotate = function(t, e) {
          return rotatePoint(this, t, e)
        }
  }
}();
var SeadragonRect = Seadragon.Rect;
!function() {
  if (!SeadragonRect) {
    var t = (SeadragonRect = Seadragon.Rect = function(t, e, i, n) {
          this.x = "number" == typeof t ? t : 0,
              this.y = "number" == typeof e ? e : 0,
              this.width = "number" == typeof i ? i : 0,
              this.height = "number" == typeof n ? n : 0
        }
    ).prototype;
    t.getAspectRatio = function() {
      return this.width / this.height
    }
        ,
        t.getTopLeft = function() {
          return new SeadragonPoint(this.x,this.y)
        }
        ,
        t.getBottomRight = function() {
          return new SeadragonPoint(this.x + this.width,this.y + this.height)
        }
        ,
        t.getCenter = function() {
          return new SeadragonPoint(this.x + this.width / 2,this.y + this.height / 2)
        }
        ,
        t.getSize = function() {
          return new SeadragonPoint(this.width,this.height)
        }
        ,
        t.equals = function(t) {
          return t instanceof SeadragonRect && this.x === t.x && this.y === t.y && this.width === t.width && this.height === t.height
        }
        ,
        t.toString = function() {
          return "[" + this.x + "," + this.y + "," + this.width + "x" + this.height + "]"
        }
        ,
        t.rotate = function(t, e) {
          e = e || this.getCenter();
          var i = new SeadragonPoint(this.x,this.y)
              , n = new SeadragonPoint(this.x + this.width,this.y)
              , o = new SeadragonPoint(this.x + this.width,this.y + this.height)
              , a = new SeadragonPoint(this.x,this.y + this.height)
              , r = i.rotate(t, e)
              , s = n.rotate(t, e)
              , h = o.rotate(t, e)
              , l = a.rotate(t, e)
              , d = Math.min(Math.min(r.x, s.x), Math.min(h.x, l.x))
              , c = Math.min(Math.min(r.y, s.y), Math.min(h.y, l.y))
              , u = Math.max(Math.max(r.x, s.x), Math.max(h.x, l.x))
              , g = Math.max(Math.max(r.y, s.y), Math.max(h.y, l.y));
          return new SeadragonRect(d,c,u - d,g - c)
        }
  }
}();
var SeadragonSpring = Seadragon.Spring = function(t) {
  var e = "number" == typeof t ? t : 0
      , i = e
      , n = e
      , o = (new Date).getTime()
      , a = o
      , r = o;
  this.getCurrent = function() {
    return e
  }
      ,
      this.getTarget = function() {
        return n
      }
      ,
      this.resetTo = function(t) {
        i = n = t,
            a = r = o
      }
      ,
      this.springTo = function(t) {
        i = e,
            n = t,
            r = (a = o) + 1e3 * SeadragonConfig.animationTime
      }
      ,
      this.shiftBy = function(t) {
        i += t,
            n += t
      }
      ,
      this.update = function() {
        o = (new Date).getTime(),
            e = r <= o ? n : i + (n - i) * function(t) {
              var e = SeadragonConfig.springStiffness;
              return (1 - Math.exp(-t * e)) / (1 - Math.exp(-e))
            }((o - a) / (r - a))
      }
}
    , SeadragonBrowser = Seadragon.Browser = {
  UNKNOWN: 0,
  IE: 1,
  FIREFOX: 2,
  SAFARI: 3,
  CHROME: 4,
  OPERA: 5
}
    , SeadragonUtils = function() {
  var a = this
      , r = ["Msxml2.XMLHTTP", "Msxml3.XMLHTTP", "Microsoft.XMLHTTP"]
      , e = {
    bmp: !1,
    jpeg: !0,
    jpg: !0,
    png: !0,
    tif: !1,
    wdp: !1
  }
      , g = SeadragonBrowser.UNKNOWN
      , f = 0
      , p = !1
      , v = {};
  function o(t, e) {
    return e && t != document.body ? document.body : t.offsetParent
  }
  !function() {
    var t = navigator.appName
        , e = navigator.appVersion
        , i = navigator.userAgent;
    if ("Microsoft Internet Explorer" == t && window.attachEvent && window.ActiveXObject) {
      var n = i.indexOf("MSIE");
      g = SeadragonBrowser.IE,
          f = parseFloat(i.substring(n + 5, i.indexOf(";", n)));
      var o = document.documentMode;
      void 0 !== o && (f = o)
    } else if ("Netscape" == t && window.addEventListener) {
      var a = i.indexOf("Firefox")
          , r = i.indexOf("Safari")
          , s = i.indexOf("Chrome");
      if (0 <= a)
        g = SeadragonBrowser.FIREFOX,
            f = parseFloat(i.substring(a + 8));
      else if (0 <= r) {
        var h = i.substring(0, r).lastIndexOf("/");
        g = 0 <= s ? SeadragonBrowser.CHROME : SeadragonBrowser.SAFARI,
            f = parseFloat(i.substring(h + 1, r))
      }
    } else
      "Opera" == t && window.opera && window.attachEvent && (g = SeadragonBrowser.OPERA,
          f = parseFloat(e));
    for (var l = window.location.search.substring(1).split("&"), d = 0; d < l.length; d++) {
      var c = l[d]
          , u = c.indexOf("=");
      0 < u && (v[c.substring(0, u)] = decodeURIComponent(c.substring(u + 1)))
    }
    p = g == SeadragonBrowser.IE && f < 9 || g == SeadragonBrowser.CHROME && f < 2
  }(),
      this.getBrowser = function() {
        return g
      }
      ,
      this.getBrowserVersion = function() {
        return f
      }
      ,
      this.getElement = function(t) {
        return "string" == typeof t && (t = document.getElementById(t)),
            t
      }
      ,
      this.getElementPosition = function(t) {
        t = a.getElement(t);
        for (var e = new SeadragonPoint, i = "fixed" == a.getElementStyle(t).position, n = o(t, i); n; )
          e.x += t.offsetLeft,
              e.y += t.offsetTop,
          i && (e = e.plus(a.getPageScroll())),
              n = o(t = n, i = "fixed" == a.getElementStyle(t).position);
        return e
      }
      ,
      this.getElementSize = function(t) {
        t = a.getElement(t);
        return new SeadragonPoint(t.clientWidth,t.clientHeight)
      }
      ,
      this.getElementStyle = function(t) {
        return (t = a.getElement(t)).currentStyle ? t.currentStyle : window.getComputedStyle ? window.getComputedStyle(t, "") : void SeadragonDebug.fail("Unknown element style, no known technique.")
      }
      ,
      this.getEvent = function(t) {
        return t || window.event
      }
      ,
      this.getMousePosition = function(t) {
        t = a.getEvent(t);
        var e = new SeadragonPoint;
        return "DOMMouseScroll" == t.type && g == SeadragonBrowser.FIREFOX && f < 3 ? (e.x = t.screenX,
            e.y = t.screenY) : "number" == typeof t.pageX ? (e.x = t.pageX,
            e.y = t.pageY) : "number" == typeof t.clientX ? (e.x = t.clientX + document.body.scrollLeft + document.documentElement.scrollLeft,
            e.y = t.clientY + document.body.scrollTop + document.documentElement.scrollTop) : SeadragonDebug.fail("Unknown event mouse position, no known technique."),
            e
      }
      ,
      this.getMouseScroll = function(t) {
        var e = 0;
        return "number" == typeof (t = a.getEvent(t)).wheelDelta ? e = t.wheelDelta : "number" == typeof t.detail ? e = -1 * t.detail : SeadragonDebug.fail("Unknown event mouse scroll, no known technique."),
            e ? e / Math.abs(e) : 0
      }
      ,
      this.getPageScroll = function() {
        var t = new SeadragonPoint
            , e = document.documentElement || {}
            , i = document.body || {};
        return "number" == typeof window.pageXOffset ? (t.x = window.pageXOffset,
            t.y = window.pageYOffset) : i.scrollLeft || i.scrollTop ? (t.x = i.scrollLeft,
            t.y = i.scrollTop) : (e.scrollLeft || e.scrollTop) && (t.x = e.scrollLeft,
            t.y = e.scrollTop),
            t
      }
      ,
      this.getWindowSize = function() {
        var t = new SeadragonPoint
            , e = document.documentElement || {}
            , i = document.body || {};
        return "number" == typeof window.innerWidth ? (t.x = window.innerWidth,
            t.y = window.innerHeight) : e.clientWidth || e.clientHeight ? (t.x = e.clientWidth,
            t.y = e.clientHeight) : i.clientWidth || i.clientHeight ? (t.x = i.clientWidth,
            t.y = i.clientHeight) : SeadragonDebug.fail("Unknown window size, no known technique."),
            t
      }
      ,
      this.imageFormatSupported = function(t) {
        return !!e[(t = t || "").toLowerCase()]
      }
      ,
      this.makeCenteredNode = function(t) {
        t = SeadragonUtils.getElement(t);
        var e = a.makeNeutralElement("div")
            , i = [];
        i.push('<div style="display:table; height:100%; width:100%;'),
            i.push("border:none; margin:0px; padding:0px;"),
            i.push('#position:relative; overflow:hidden; text-align:left;">'),
            i.push('<div style="#position:absolute; #top:50%; width:100%; '),
            i.push("border:none; margin:0px; padding:0px;"),
            i.push('display:table-cell; vertical-align:middle;">'),
            i.push('<div style="#position:relative; #top:-50%; width:100%; '),
            i.push("border:none; margin:0px; padding:0px;"),
            i.push('text-align:center;"></div></div></div>'),
            e.innerHTML = i.join("");
        for (var n = e = e.firstChild, o = e.getElementsByTagName("div"); 0 < o.length; )
          o = (n = o[0]).getElementsByTagName("div");
        return n.appendChild(t),
            e
      }
      ,
      this.makeNeutralElement = function(t) {
        var e = document.createElement(t)
            , i = e.style;
        return i.background = "transparent none",
            i.border = "none",
            i.margin = "0px",
            i.padding = "0px",
            i.position = "static",
            e
      }
      ,
      this.makeTransparentImage = function(t) {
        var e = a.makeNeutralElement("img")
            , i = null;
        return g == SeadragonBrowser.IE && f < 7 ? ((i = a.makeNeutralElement("span")).style.display = "inline-block",
            e.onload = function() {
              i.style.width = i.style.width || e.width + "px",
                  i.style.height = i.style.height || e.height + "px",
                  e.onload = null,
                  e = null
            }
            ,
            e.src = t,
            i.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + t + "', sizingMethod='scale')") : (i = e).src = t,
            i
      }
      ,
      this.setElementOpacity = function(t, e, i) {
        t = a.getElement(t);
        i && p && (e = Math.round(e)),
            t.style.opacity = e < 1 ? e : "";
        var n = t.style.filter || "";
        if (t.style.filter = n.replace(/[\s]*alpha\(.*?\)[\s]*/g, ""),
            !(1 <= e)) {
          var o = " alpha(opacity=" + Math.round(100 * e) + ") ";
          t.style.filter += o
        }
      }
      ,
      this.addEvent = function(t, e, i, n) {
        (t = a.getElement(t)).addEventListener ? ("mousewheel" == e && t.addEventListener("DOMMouseScroll", i, n),
            t.addEventListener(e, i, n)) : t.attachEvent ? (t.attachEvent("on" + e, i),
        n && t.setCapture && t.setCapture()) : SeadragonDebug.fail("Unable to attach event handler, no known technique.")
      }
      ,
      this.removeEvent = function(t, e, i, n) {
        (t = a.getElement(t)).removeEventListener ? ("mousewheel" == e && t.removeEventListener("DOMMouseScroll", i, n),
            t.removeEventListener(e, i, n)) : t.detachEvent ? (t.detachEvent("on" + e, i),
        n && t.releaseCapture && t.releaseCapture()) : SeadragonDebug.fail("Unable to detach event handler, no known technique.")
      }
      ,
      this.cancelEvent = function(t) {
        (t = a.getEvent(t)).preventDefault && t.preventDefault(),
            t.cancel = !0,
            t.returnValue = !1
      }
      ,
      this.stopEvent = function(t) {
        (t = a.getEvent(t)).stopPropagation && t.stopPropagation(),
            t.cancelBubble = !0
      }
      ,
      this.createCallback = function(i, n) {
        for (var o = [], t = 2; t < arguments.length; t++)
          o.push(arguments[t]);
        return function() {
          for (var t = o.concat([]), e = 0; e < arguments.length; e++)
            t.push(arguments[e]);
          return n.apply(i, t)
        }
      }
      ,
      this.getUrlParameter = function(t) {
        var e = v[t];
        return e || null
      }
      ,
      this.makeAjaxRequest = function(t, e) {
        var i = "function" == typeof e
            , n = null;
        if (i) {
          var o = e;
          e = function() {
            window.setTimeout(SeadragonUtils.createCallback(null, o, n), 1)
          }
        }
        if (window.ActiveXObject)
          for (var a = 0; a < r.length; a++)
            try {
              n = new ActiveXObject(r[a]);
              break
            } catch (t) {
              continue
            }
        else
          window.XMLHttpRequest && (n = new XMLHttpRequest);
        n || SeadragonDebug.fail("Browser doesn't support XMLHttpRequest."),
        SeadragonConfig.proxyUrl && (t = SeadragonConfig.proxyUrl + t),
        i && (n.onreadystatechange = function() {
              4 == n.readyState && (n.onreadystatechange = new Function,
                  e())
            }
        );
        try {
          n.open("GET", t, i),
              n.send(null)
        } catch (t) {
          SeadragonDebug.log(t.name + " while making AJAX request: " + t.message),
              n.onreadystatechange = null,
              n = null,
          i && e()
        }
        return i ? null : n
      }
      ,
      this.parseXml = function(t) {
        var e = null;
        if (window.ActiveXObject)
          try {
            (e = new ActiveXObject("Microsoft.XMLDOM")).async = !1,
                e.loadXML(t)
          } catch (t) {
            SeadragonDebug.log(t.name + " while parsing XML (ActiveX): " + t.message)
          }
        else if (window.DOMParser)
          try {
            e = (new DOMParser).parseFromString(t, "text/xml")
          } catch (t) {
            SeadragonDebug.log(t.name + " while parsing XML (DOMParser): " + t.message)
          }
        else
          SeadragonDebug.fail("Browser doesn't support XML DOM.");
        return e
      }
};
SeadragonUtils = Seadragon.Utils = new SeadragonUtils;
var SeadragonMouseTracker = Seadragon.MouseTracker;
!function() {
  if (!SeadragonMouseTracker) {
    var C = SeadragonUtils.getBrowser() == SeadragonBrowser.IE && SeadragonUtils.getBrowserVersion() < 9
        , b = !1
        , T = !1
        , A = {}
        , R = [];
    C ? (SeadragonUtils.addEvent(document, "mousedown", t, !1),
        SeadragonUtils.addEvent(document, "mouseup", e, !1)) : (SeadragonUtils.addEvent(window, "mousedown", t, !0),
        SeadragonUtils.addEvent(window, "mouseup", e, !0)),
        SeadragonMouseTracker = Seadragon.MouseTracker = function(a) {
          var r = this
              , e = null
              , o = Math.random()
              , i = (a = SeadragonUtils.getElement(a),
              !1)
              , n = !1
              , s = !1
              , h = !1
              , l = null
              , d = null
              , c = null;
          function u() {
            n && (C ? (SeadragonUtils.removeEvent(a, "mousemove", x, !0),
                SeadragonUtils.removeEvent(a, "mouseup", w, !0),
                SeadragonUtils.addEvent(a, "mouseup", m, !1)) : (SeadragonUtils.removeEvent(window, "mousemove", S, !0),
                SeadragonUtils.removeEvent(window, "mouseup", y, !0)),
                n = !1)
          }
          function g(t, e) {
            var i = A;
            for (var n in i)
              i.hasOwnProperty(n) && o != n && i[n][t](e)
          }
          function t() {
            return h
          }
          function f(t) {
            t = SeadragonUtils.getEvent(t);
            C && n && !O(t.srcElement, a) && g("onMouseOver", t);
            var e = t.target ? t.target : t.srcElement
                , i = t.relatedTarget ? t.relatedTarget : t.fromElement;
            if (O(a, e) && !O(a, i) && (h = !0,
            "function" == typeof r.enterHandler))
              try {
                r.enterHandler(r, E(t, a), s, b)
              } catch (t) {
                SeadragonDebug.error(t.name + " while executing enter handler: " + t.message, t)
              }
          }
          function p(t) {
            t = SeadragonUtils.getEvent(t);
            C && n && !O(t.srcElement, a) && g("onMouseOut", t);
            var e = t.target ? t.target : t.srcElement
                , i = t.relatedTarget ? t.relatedTarget : t.toElement;
            if (O(a, e) && !O(a, i) && (h = !1,
            "function" == typeof r.exitHandler))
              try {
                r.exitHandler(r, E(t, a), s, b)
              } catch (t) {
                SeadragonDebug.error(t.name + " while executing exit handler: " + t.message, t)
              }
          }
          function v(t) {
            if (2 != (t = SeadragonUtils.getEvent(t)).button) {
              if (s = !0,
                  l = I(t),
                  c = l,
                  d = (new Date).getTime(),
              "function" == typeof r.pressHandler)
                try {
                  r.pressHandler(r, E(t, a))
                } catch (t) {
                  SeadragonDebug.error(t.name + " while executing press handler: " + t.message, t)
                }
              (r.pressHandler || r.dragHandler) && SeadragonUtils.cancelEvent(t),
                  C && T ? C && R.push(e) : (n || (C ? (SeadragonUtils.removeEvent(a, "mouseup", m, !1),
                      SeadragonUtils.addEvent(a, "mouseup", w, !0),
                      SeadragonUtils.addEvent(a, "mousemove", x, !0)) : (SeadragonUtils.addEvent(window, "mouseup", y, !0),
                      SeadragonUtils.addEvent(window, "mousemove", S, !0)),
                      n = !0),
                      T = !0,
                      R = [e])
            }
          }
          function m(t) {
            t = SeadragonUtils.getEvent(t);
            var e = s
                , i = h;
            if (2 != t.button) {
              if (s = !1,
              "function" == typeof r.releaseHandler)
                try {
                  r.releaseHandler(r, E(t, a), e, i)
                } catch (t) {
                  SeadragonDebug.error(t.name + " while executing release handler: " + t.message, t)
                }
              e && i && function(t) {
                if (2 == (t = SeadragonUtils.getEvent(t)).button)
                  return;
                var e = (new Date).getTime() - d
                    , i = I(t)
                    , n = c.distanceTo(i)
                    , o = e <= SeadragonConfig.clickTimeThreshold && n <= SeadragonConfig.clickDistThreshold;
                if ("function" == typeof r.clickHandler)
                  try {
                    r.clickHandler(r, E(t, a), o, t.shiftKey)
                  } catch (t) {
                    SeadragonDebug.error(t.name + " while executing click handler: " + t.message, t)
                  }
              }(t)
            }
          }
          function w(t) {
            if (2 != (t = SeadragonUtils.getEvent(t)).button) {
              for (var e = 0; e < R.length; e++) {
                var i = R[e];
                i.hasMouse() || i.onMouseUp(t)
              }
              u(),
                  T = !1,
                  t.srcElement.fireEvent("on" + t.type, document.createEventObject(t)),
                  SeadragonUtils.stopEvent(t)
            }
          }
          function y(t) {
            h || m(t),
                u()
          }
          function P(t) {
            r.clickHandler && SeadragonUtils.cancelEvent(t)
          }
          function S(t) {
            var e = I(t = SeadragonUtils.getEvent(t))
                , i = e.minus(l);
            if (l = e,
            "function" == typeof r.dragHandler) {
              try {
                r.dragHandler(r, E(t, a), i, t.shiftKey)
              } catch (t) {
                SeadragonDebug.error(t.name + " while executing drag handler: " + t.message, t)
              }
              SeadragonUtils.cancelEvent(t)
            }
          }
          function x(t) {
            for (var e = 0; e < R.length; e++)
              R[e].onMouseMove(t);
            SeadragonUtils.stopEvent(t)
          }
          function M(t) {
            t = SeadragonUtils.getEvent(t);
            var e = SeadragonUtils.getMouseScroll(t);
            if ("function" == typeof r.scrollHandler) {
              if (e)
                try {
                  r.scrollHandler(r, E(t, a), e, t.shiftKey)
                } catch (t) {
                  SeadragonDebug.error(t.name + " while executing scroll handler: " + t.message, t)
                }
              SeadragonUtils.cancelEvent(t)
            }
          }
          this.target = a,
              this.enterHandler = null,
              this.exitHandler = null,
              this.pressHandler = null,
              this.releaseHandler = null,
              this.clickHandler = null,
              this.dragHandler = null,
              this.scrollHandler = null,
              e = {
                hasMouse: t,
                onMouseOver: f,
                onMouseOut: p,
                onMouseUp: m,
                onMouseMove: S
              },
              this.isTracking = function() {
                return i
              }
              ,
              this.setTracking = function(t) {
                t ? i || (SeadragonUtils.addEvent(a, "mouseover", f, !1),
                    SeadragonUtils.addEvent(a, "mouseout", p, !1),
                    SeadragonUtils.addEvent(a, "mousedown", v, !1),
                    SeadragonUtils.addEvent(a, "mouseup", m, !1),
                    SeadragonUtils.addEvent(a, "mousewheel", M, !1),
                    SeadragonUtils.addEvent(a, "click", P, !1),
                    i = !0,
                    A[o] = e) : i && (SeadragonUtils.removeEvent(a, "mouseover", f, !1),
                    SeadragonUtils.removeEvent(a, "mouseout", p, !1),
                    SeadragonUtils.removeEvent(a, "mousedown", v, !1),
                    SeadragonUtils.removeEvent(a, "mouseup", m, !1),
                    SeadragonUtils.removeEvent(a, "mousewheel", M, !1),
                    SeadragonUtils.removeEvent(a, "click", P, !1),
                    u(),
                    i = !1,
                    delete A[o])
              }
              ,
              this.releaseMouse = function() {
                u()
              }
        }
  }
  function I(t) {
    return SeadragonUtils.getMousePosition(t)
  }
  function E(t, e) {
    var i = SeadragonUtils.getMousePosition(t)
        , n = SeadragonUtils.getElementPosition(e);
    return i.minus(n)
  }
  function O(t, e) {
    for (var i = document.body; e && t != e && i != e; )
      try {
        e = e.parentNode
      } catch (t) {
        return !1
      }
    return t == e
  }
  function t() {
    b = !0
  }
  function e() {
    b = !1
  }
}();
var SeadragonImageLoader, SeadragonButton, SeadragonButtonGroup, SeadragonEventManager = Seadragon.EventManager = function() {
      var o = {};
      this.addListener = function(t, e) {
        "function" == typeof e && (o[t] || (o[t] = []),
            o[t].push(e))
      }
          ,
          this.removeListener = function(t, e) {
            var i = o[t];
            if ("function" == typeof e && i)
              for (var n = 0; n < i.length; n++)
                if (e == i[n])
                  return void i.splice(n, 1)
          }
          ,
          this.clearListeners = function(t) {
            o[t] && delete o[t]
          }
          ,
          this.trigger = function(e) {
            var t = o[e]
                , i = [];
            if (t) {
              for (var n = 1; n < arguments.length; n++)
                i.push(arguments[n]);
              for (n = 0; n < t.length; n++)
                try {
                  t[n].apply(window, i)
                } catch (t) {
                  SeadragonDebug.error(t.name + " while executing " + e + " handler: " + t.message, t)
                }
            }
          }
    }
;
!function() {
  function r(e, i, n) {
    var o = null
        , a = null;
    function r(t) {
      o.onload = null,
          o.onabort = null,
          o.onerror = null,
      a && window.clearTimeout(a),
          window.setTimeout(function() {
            i(e, t ? o : null)
          }, 1)
    }
    this.start = function() {
      o = new Image,
          "string" == typeof e ? function() {
            o.crossOrigin = "anonymous";
            o.onload = function() {
              r(!0)
            }
                ,
                o.onabort = function() {
                  r(!1)
                }
                ,
                o.onerror = function() {
                  r(!1),
                  n && n()
                }
                ,
                a = window.setTimeout(function() {
                  SeadragonDebug.log("Image timed out: " + e),
                      r(!1),
                  n && n()
                }, 15e3),
                o.src = e
          }() : function() {
            if (!e)
              return;
            var t = new XMLHttpRequest;
            t.responseType = "blob",
                t.onload = function() {
                  o.src = window.URL.createObjectURL(t.response),
                      r(!0)
                }
                ,
                t.onerror = function() {
                  r(!1),
                  n && n()
                }
                ,
                t.open("GET", e[0]),
                t.setRequestHeader("Range", "bytes=" + e[1]);
            a = window.setTimeout(function() {
              SeadragonDebug.log("Image timed out: " + e),
                  t.abort(),
                  r(!1),
              n && n()
            }, 15e3),
                t.send()
          }()
    }
  }
  SeadragonImageLoader = Seadragon.ImageLoader = function() {
    var o = 0;
    function a(t, e, i) {
      if (o--,
      "function" == typeof t)
        try {
          t(i)
        } catch (t) {
          SeadragonDebug.error(t.name + " while executing " + e + " callback: " + t.message, t)
        }
    }
    this.loadImage = function(t, e, i) {
      if (o >= SeadragonConfig.imageLoaderLimit)
        return !1;
      var n = new r(t,SeadragonUtils.createCallback(null, a, e),i);
      return o++,
          n.start(),
          !0
    }
  }
}(),
    function() {
      var E = 0
          , O = 1
          , D = 2
          , k = 3;
      SeadragonButton = Seadragon.Button = function(n, t, e, i, o, a, r, s, h, l) {
        var d = SeadragonUtils.makeNeutralElement("span")
            , c = O
            , u = new SeadragonMouseTracker(d)
            , g = SeadragonUtils.makeTransparentImage(t)
            , f = SeadragonUtils.makeTransparentImage(e)
            , p = SeadragonUtils.makeTransparentImage(i)
            , v = SeadragonUtils.makeTransparentImage(o)
            , m = (a = "function" == typeof a ? a : null,
            r = "function" == typeof r ? r : null,
            s = "function" == typeof s ? s : null,
            h = "function" == typeof h ? h : null,
            l = "function" == typeof l ? l : null,
            0)
            , w = 2e3
            , y = null
            , P = !1;
        function S() {
          window.setTimeout(x, 20)
        }
        function x() {
          if (P) {
            var t = 1 - ((new Date).getTime() - y) / w;
            t = Math.min(1, t),
                t = Math.max(0, t),
                SeadragonUtils.setElementOpacity(f, t, !0),
            0 < t && S()
          }
        }
        function M(t) {
          O <= t && c == E && (P = !1,
              SeadragonUtils.setElementOpacity(f, 1, !0),
              c = O),
          D <= t && c == O && (p.style.visibility = "",
              c = D),
          k <= t && c == D && (v.style.visibility = "",
              c = k)
        }
        function C(t) {
          t <= D && c == k && (v.style.visibility = "hidden",
              c = D),
          t <= O && c == D && (p.style.visibility = "hidden",
              c = O),
          t <= E && c == O && (P = !0,
              y = (new Date).getTime() + m,
              window.setTimeout(S, m),
              c = E)
        }
        function b(t, e, i, n) {
          i ? (M(k),
          h && h()) : n || M(D)
        }
        function T(t, e, i, n) {
          C(O),
          i && l && l()
        }
        function A(t, e) {
          M(k),
          a && a()
        }
        function R(t, e, i, n) {
          i && n ? (C(D),
          r && r()) : i ? C(O) : M(D)
        }
        function I(t, e, i, n) {
          s && i && s()
        }
        this.elmt = d,
            this.notifyGroupEnter = function() {
              M(O)
            }
            ,
            this.notifyGroupExit = function() {
              C(E)
            }
            ,
            function() {
              d.style.display = "inline-block",
                  d.style.position = "relative",
                  d.title = n,
                  d.appendChild(g),
                  d.appendChild(f),
                  d.appendChild(p),
                  d.appendChild(v);
              g.style;
              var t = f.style
                  , e = p.style
                  , i = v.style;
              t.position = e.position = i.position = "absolute",
                  t.top = e.top = i.top = "0px",
                  t.left = e.left = i.left = "0px",
                  e.visibility = i.visibility = "hidden",
              SeadragonUtils.getBrowser() == SeadragonBrowser.FIREFOX && SeadragonUtils.getBrowserVersion() < 3 && (t.top = e.top = i.top = ""),
                  u.enterHandler = b,
                  u.exitHandler = T,
                  u.pressHandler = A,
                  u.releaseHandler = R,
                  u.clickHandler = I,
                  u.setTracking(!0),
                  C(E)
            }()
      }
          ,
          SeadragonButtonGroup = Seadragon.ButtonGroup = function(a) {
            var e = SeadragonUtils.makeNeutralElement("span")
                , i = (a = a.concat([]),
                new SeadragonMouseTracker(e));
            function n(t, e, i, n) {
              for (var o = 0; o < a.length; o++)
                a[o].notifyGroupEnter()
            }
            function o(t, e, i, n) {
              if (!i)
                for (var o = 0; o < a.length; o++)
                  a[o].notifyGroupExit()
            }
            function r(t, e, i, n) {
              if (!n)
                for (var o = 0; o < a.length; o++)
                  a[o].notifyGroupExit()
            }
            this.elmt = e,
                this.emulateEnter = function() {
                  n()
                }
                ,
                this.emulateExit = function() {
                  o()
                }
                ,
                function() {
                  e.style.display = "inline-block";
                  for (var t = 0; t < a.length; t++)
                    e.appendChild(a[t].elmt);
                  i.enterHandler = n,
                      i.exitHandler = o,
                      i.releaseHandler = r,
                      i.setTracking(!0)
                }()
          }
    }();
var SeadragonTileSource = Seadragon.TileSource = function(o, a, t, e, i, n) {
      var l = this
          , r = a / o;
      this.width = o,
          this.height = a,
          this.aspectRatio = o / a,
          this.dimensions = new SeadragonPoint(o,a),
          this.minLevel = i || 0,
          this.maxLevel = n || Math.ceil(Math.log(Math.max(o, a)) / Math.log(2)),
          this.tileSize = t || 0,
          this.tileOverlap = e || 0,
          this.getLevelScale = function(t) {
            return 1 / (1 << l.maxLevel - t)
          }
          ,
          this.getNumTiles = function(t) {
            var e = l.getLevelScale(t)
                , i = Math.ceil(e * o / l.tileSize)
                , n = Math.ceil(e * a / l.tileSize);
            return new SeadragonPoint(i,n)
          }
          ,
          this.getPixelRatio = function(t) {
            var e = l.dimensions.times(l.getLevelScale(t))
                , i = 1 / e.x
                , n = 1 / e.y;
            return new SeadragonPoint(i,n)
          }
          ,
          this.getTileAtPoint = function(t, e) {
            var i, n, o = l.dimensions.times(l.getLevelScale(t)), a = e.times(o.x);
            return i = 0 <= e.x && e.x <= 1 ? Math.floor(a.x / l.tileSize) : Math.ceil(o.x / l.tileSize) * Math.floor(a.x / o.x) + Math.floor((o.x + a.x % o.x) % o.x / l.tileSize),
                n = 0 <= e.y && e.y <= r ? Math.floor(a.y / l.tileSize) : Math.ceil(o.y / l.tileSize) * Math.floor(a.y / o.y) + Math.floor((o.y + a.y % o.y) % o.y / l.tileSize),
                new SeadragonPoint(i,n)
          }
          ,
          this.getTileBounds = function(t, e, i) {
            var n = l.dimensions.times(l.getLevelScale(t))
                , o = 0 === e ? 0 : l.tileSize * e - l.tileOverlap
                , a = 0 === i ? 0 : l.tileSize * i - l.tileOverlap
                , r = l.tileSize + (0 === e ? 1 : 2) * l.tileOverlap
                , s = l.tileSize + (0 === i ? 1 : 2) * l.tileOverlap;
            r = Math.min(r, n.x - o),
                s = Math.min(s, n.y - a);
            var h = 1 / n.x;
            return new SeadragonRect(o * h,a * h,r * h,s * h)
          }
          ,
          this.getTileUrl = function(t, e, i) {
        console.log('1111')
            throw new Error("Method not implemented.")
          }
          ,
          this.tileExists = function(t, e, i) {
            var n = l.getNumTiles(t);
            return t >= l.minLevel && t <= l.maxLevel && 0 <= e && 0 <= i && e < n.x && i < n.y
          }
    }
    , SeadragonDisplayRect = Seadragon.DisplayRect = function(t, e, i, n, o, a) {
      SeadragonRect.apply(this, arguments),
          this.minLevel = o,
          this.maxLevel = a
    }
;
SeadragonDisplayRect.prototype = new SeadragonRect;
var SeadragonDziTileSource = Seadragon.DziTileSource = function(t, e, c, i, n, o, a) {
      SeadragonTileSource.apply(this, [t, e, c, i]);
      var u = this
          , g = {};
      this.fileFormat = o,
          this.tileFormat = o,
          this.displayRects = a,
          function() {
            if (a)
              for (var t = a.length - 1; 0 <= t; t--)
                for (var e = a[t], i = e.minLevel; i <= e.maxLevel; i++)
                  g[i] || (g[i] = []),
                      g[i].push(e)
          }(),
          this.getTileUrl = function(t, e, i) {
        console.log('2222')
            return [n, t, "/", e, "_", i, ".", o].join("")
          }
          ,
          this.tileExists = function(t, e, i) {
            var n = g[t];
            if (!n || !n.length)
              return !0;
            for (var o = u.getLevelScale(t), a = n.length - 1; 0 <= a; a--) {
              var r = n[a];
              if (!(t < r.minLevel || t > r.maxLevel)) {
                var s = r.x * o
                    , h = r.y * o
                    , l = s + r.width * o
                    , d = h + r.height * o;
                if (s = Math.floor(s / c),
                    h = Math.floor(h / c),
                    l = Math.ceil(l / c),
                    d = Math.ceil(d / c),
                s <= e && e < l && h <= i && i < d)
                  return !0
              }
            }
            return !1
          }
    }
;
SeadragonDziTileSource.prototype = new SeadragonTileSource,
    function() {
      function g(t) {
        Error.apply(this, arguments),
            this.message = t
      }
      function d(t) {
        return t instanceof g || (SeadragonDebug.error(t.name + " while creating DZI from XML: " + t.message),
            t = new g(SeadragonStrings.getString("Errors.Unknown"))),
            t
      }
      function c(t) {
        var e = t.split("/")
            , i = e[e.length - 1]
            , n = i.lastIndexOf(".");
        return -1 < n && (e[e.length - 1] = i.slice(0, n)),
        e.join("/") + "_files/"
      }
      function h(t, e) {
        if (!t)
          throw new g(SeadragonStrings.getString("Errors.Security"));
        if (200 !== t.status && 0 !== t.status) {
          var i = t.status
              , n = 404 == i ? "Not Found" : t.statusText;
          throw new g(SeadragonStrings.getString("Errors.Status", i, n))
        }
        var o = null;
        return t.responseXML && t.responseXML.documentElement ? o = t.responseXML : t.responseText && (o = SeadragonUtils.parseXml(t.responseText)),
            l(o, e)
      }
      function l(t, e) {
        if (!t || !t.documentElement)
          throw new g(SeadragonStrings.getString("Errors.Xml"));
        var i = t.documentElement
            , n = i.tagName;
        if ("Image" == n)
          try {
            return function(t, e) {
              var i = t.getAttribute("Format");
              if (!SeadragonUtils.imageFormatSupported(i))
                throw new g(SeadragonStrings.getString("Errors.ImageFormat", i.toUpperCase()));
              for (var n = t.getElementsByTagName("Size")[0], o = t.getElementsByTagName("DisplayRect"), a = parseInt(n.getAttribute("Width"), 10), r = parseInt(n.getAttribute("Height"), 10), s = parseInt(t.getAttribute("TileSize")), h = parseInt(t.getAttribute("Overlap")), l = [], d = 0; d < o.length; d++) {
                var c = o[d]
                    , u = c.getElementsByTagName("Rect")[0];
                l.push(new SeadragonDisplayRect(parseInt(u.getAttribute("X"), 10),parseInt(u.getAttribute("Y"), 10),parseInt(u.getAttribute("Width"), 10),parseInt(u.getAttribute("Height"), 10),parseInt(c.getAttribute("MinLevel"), 10),parseInt(c.getAttribute("MaxLevel"), 10)))
              }
              return new SeadragonDziTileSource(a,r,s,h,e,i,l)
            }(i, e)
          } catch (t) {
            var o = SeadragonStrings.getString("Errors.Dzi");
            throw t instanceof g ? t : new g(o)
          }
        else {
          if ("Collection" == n)
            throw new g(SeadragonStrings.getString("Errors.Dzc"));
          if ("Error" == n)
            return function(t) {
              throw new g(t.getElementsByTagName("Message")[0].firstChild.nodeValue)
            }(i)
        }
        throw new g(SeadragonStrings.getString("Errors.Dzi"))
      }
      g.prototype = new Error,
          SeadragonDziTileSource.getTilesUrl = c,
          SeadragonDziTileSource.createFromJson = function(t, e) {
            var i, n, o = "function" == typeof e, a = t;
            if (a && (a.url || a.tilesUrl))
              try {
                var r = a.displayRects;
                if (r && r.length)
                  for (var s = 0, h = r.length; s < h; s++) {
                    var l = r[s];
                    r[s] = new SeadragonDisplayRect(l.x || l[0],l.y || l[1],l.width || l[2],l.height || l[3],l.minLevel || l[4],l.maxLevel || l[5])
                  }
                (i = new SeadragonDziTileSource(a.width,a.height,a.tileSize,a.tileOverlap,a.tilesUrl || c(a.url),a.tileFormat,a.displayRects)).xmlUrl = a.url
              } catch (t) {
                n = d(t)
              }
            else
              n = new g(SeadragonStrings.getString("Errors.Empty"));
            if (!o) {
              if (n)
                throw n;
              return i
            }
            window.setTimeout(SeadragonUtils.createCallback(null, e, i, n && n.message), 1)
          }
          ,
          SeadragonDziTileSource.createFromXml = function(n, e, i) {
            var o = "function" == typeof i
                , a = null;
            if (!n) {
              if (a = SeadragonStrings.getString("Errors.Empty"),
                  o)
                return window.setTimeout(function() {
                  i(null, a)
                }, 1),
                    null;
              throw new g(a)
            }
            var r = c(n);
            function s(t, e) {
              try {
                var i = t(e, r);
                return i.xmlUrl = n,
                    i
              } catch (t) {
                if (o)
                  return a = d(t).message,
                      null;
                throw d(t)
              }
            }
            return o ? (e ? window.setTimeout(function() {
              var t = s(l, SeadragonUtils.parseXml(e));
              i(t, a)
            }, 1) : SeadragonUtils.makeAjaxRequest(n, function(t) {
              var e = s(h, t);
              i(e, a)
            }),
                null) : e ? s(l, SeadragonUtils.parseXml(e)) : s(h, SeadragonUtils.makeAjaxRequest(n))
          }
    }();
var SeadragonDrawer, SeadragonOverlayPlacement, SeadragonViewer, SeadragonControlAnchor, SlideViewerConfig, SeadragonViewport = Seadragon.Viewport = function(l, i) {
      var d = this
          , n = (l = new SeadragonPoint(l.x,l.y),
      i.x / i.y)
          , h = i.y / i.x
          , c = new SeadragonSpring(0)
          , u = new SeadragonSpring(0)
          , r = new SeadragonSpring(SeadragonConfig.logarithmicZoom ? 0 : 1)
          , g = null
          , o = new SeadragonRect(0,0,1,h)
          , a = o.getCenter()
          , e = Math.LN2;
      function s(t) {
        return Math.log(t) / e
      }
      function f(t) {
        return Math.pow(2, t)
      }
      function p(t, e, i) {
        return Math.min(Math.max(t, e), i)
      }
      function v(t) {
        var e = 1 / d.getZoom(t)
            , i = e / d.getAspectRatio()
            , n = SeadragonConfig.visibilityRatio
            , o = (n - .5) * e
            , a = (n - .5) * i
            , r = 1 - 2 * o
            , s = h - 2 * a;
        return r < 0 && (o += .5 * r,
            r = 0),
        s < 0 && (a += .5 * s,
            s = 0),
            new Seadragon.Rect(o,a,r,s)
      }
      this.getHomeBounds = function() {
        var t = d.getAspectRatio()
            , e = new SeadragonRect(o.x,o.y,o.width,o.height);
        return t <= n ? (e.height = o.width / t,
            e.y = a.y - e.height / 2) : (e.width = o.height * t,
            e.x = a.x - e.width / 2),
            e
      }
          ,
          this.getHomeCenter = function() {
            return a
          }
          ,
          this.getHomeZoom = function() {
            var t = n / d.getAspectRatio();
            return 1 <= t ? 1 : t
          }
          ,
          this.getMinCenter = function(t) {
            return v(t).getTopLeft()
          }
          ,
          this.getMaxCenter = function(t) {
            return v(t).getBottomRight()
          }
          ,
          this.getMinZoom = function() {
            var t = d.getHomeZoom();
            if (SeadragonConfig.minZoomDimension)
              var e = i.x <= i.y ? SeadragonConfig.minZoomDimension / l.x : SeadragonConfig.minZoomDimension / (l.x * h);
            else
              e = SeadragonConfig.minZoomImageRatio * t;
            return Math.min(e, t)
          }
          ,
          this.getMaxZoom = function() {
            var t = i.x * SeadragonConfig.maxZoomPixelRatio / l.x;
            return Math.max(t, d.getHomeZoom())
          }
          ,
          this.getAspectRatio = function() {
            return l.x / l.y
          }
          ,
          this.getContainerSize = function() {
            return new SeadragonPoint(l.x,l.y)
          }
          ,
          this.getBounds = function(t) {
            var e = d.getCenter(t)
                , i = 1 / d.getZoom(t)
                , n = i / d.getAspectRatio();
            return new SeadragonRect(e.x - i / 2,e.y - n / 2,i,n)
          }
          ,
          this.getCenter = function(t) {
            var e = new SeadragonPoint(c.getCurrent(),u.getCurrent())
                , i = new SeadragonPoint(c.getTarget(),u.getTarget());
            if (t)
              return e;
            if (!g)
              return i;
            var n = d.getZoom()
                , o = 1 / n
                , a = o / d.getAspectRatio()
                , r = new SeadragonRect(e.x - o / 2,e.y - a / 2,o,a)
                , s = d.pixelFromPoint(g, !0)
                , h = g.minus(r.getTopLeft()).times(l.x / r.width).minus(s).divide(l.x * n);
            return i.plus(h)
          }
          ,
          this.getZoom = function(t) {
            var e;
            return e = t ? r.getCurrent() : r.getTarget(),
                SeadragonConfig.logarithmicZoom ? f(e) : e
          }
          ,
          this.applyConstraints = function(t) {
            var e = d.getZoom()
                , i = p(e, d.getMinZoom(), d.getMaxZoom());
            e != i && d.zoomTo(i, g, t);
            var n = d.getCenter()
                , o = function(t, e) {
              var i = t.x
                  , n = t.y
                  , o = p(i, e.x, e.x + e.width)
                  , a = p(n, e.y, e.y + e.height);
              return i === o && n === a ? t : new SeadragonPoint(o,a)
            }(n, v());
            if ((SeadragonConfig.wrapHorizontal || SeadragonConfig.zoomOnCursor) && (o.x = n.x),
            (SeadragonConfig.wrapVertical || SeadragonConfig.zoomOnCursor) && (o.y = n.y),
                !n.equals(o)) {
              var a = 1 / i
                  , r = a / d.getAspectRatio();
              d.fitBounds(new SeadragonRect(o.x - .5 * a,o.y - .5 * r,a,r), t)
            }
          }
          ,
          this.ensureVisible = function(t) {
            d.applyConstraints(t)
          }
          ,
          this.fitBounds = function(t, e) {
            var i = d.getAspectRatio()
                , n = t.getCenter()
                , o = new SeadragonRect(t.x,t.y,t.width,t.height);
            o.getAspectRatio() >= i ? (o.height = t.width / i,
                o.y = n.y - o.height / 2) : (o.width = t.height * i,
                o.x = n.x - o.width / 2),
                d.panTo(d.getCenter(!0), !0),
                d.zoomTo(d.getZoom(!0), null, !0);
            var a = d.getBounds()
                , r = d.getZoom()
                , s = 1 / o.width;
            if (s != r && o.width != a.width) {
              var h = a.getTopLeft().times(l.x / a.width).minus(o.getTopLeft().times(l.x / o.width)).divide(l.x / a.width - l.x / o.width);
              d.zoomTo(s, h, e)
            } else
              d.panTo(n, e)
          }
          ,
          this.goHome = function(t) {
            var e = d.getCenter();
            SeadragonConfig.wrapHorizontal && (e.x = (1 + e.x % 1) % 1,
                c.resetTo(e.x),
                c.update()),
            SeadragonConfig.wrapVertical && (e.y = (h + e.y % h) % h,
                u.resetTo(e.y),
                u.update()),
                d.fitBounds(o, t)
          }
          ,
          this.panBy = function(t, e) {
            d.panTo(d.getCenter().plus(t), e)
          }
          ,
          this.panTo = function(t, e) {
            if (e)
              return c.resetTo(t.x),
                  void u.resetTo(t.y);
            if (!g)
              return c.springTo(t.x),
                  void u.springTo(t.y);
            var i = d.getZoom()
                , n = 1 / i
                , o = n / d.getAspectRatio()
                , a = new SeadragonRect(c.getCurrent() - n / 2,u.getCurrent() - o / 2,n,o)
                , r = d.pixelFromPoint(g, !0)
                , s = g.minus(a.getTopLeft()).times(l.x / a.width).minus(r).divide(l.x * i)
                , h = t.minus(s);
            c.springTo(h.x),
                u.springTo(h.y)
          }
          ,
          this.zoomBy = function(t, e, i) {
            d.zoomTo(d.getZoom() * t, e, i)
          }
          ,
          this.zoomTo = function(t, e, i) {
            i ? r.resetTo(SeadragonConfig.logarithmicZoom ? s(t) : t) : r.springTo(SeadragonConfig.logarithmicZoom ? s(t) : t),
                g = e instanceof SeadragonPoint ? e : null
          }
          ,
          this.resize = function(t, e) {
            var i = d.getBounds()
                , n = i
                , o = t.x / l.x;
            l = new SeadragonPoint(t.x,t.y),
            e && (n.width = i.width * o,
                n.height = n.width / d.getAspectRatio()),
                d.fitBounds(n, !0)
          }
          ,
          this.update = function() {
            var t = c.getCurrent()
                , e = u.getCurrent()
                , i = r.getCurrent();
            if (g)
              var n = d.pixelFromPoint(g, !0);
            if (r.update(),
            !g || r.getCurrent() == i && r.getCurrent() == r.getTarget())
              g = null;
            else {
              var o = d.pixelFromPoint(g, !0).minus(n)
                  , a = d.deltaPointsFromPixels(o, !0);
              c.shiftBy(a.x),
                  u.shiftBy(a.y)
            }
            return c.update(),
                u.update(),
            c.getCurrent() != t || u.getCurrent() != e || r.getCurrent() != i
          }
          ,
          this.deltaPixelsFromPoints = function(t, e) {
            return t.times(l.x * d.getZoom(e))
          }
          ,
          this.deltaPointsFromPixels = function(t, e) {
            return t.divide(l.x * d.getZoom(e))
          }
          ,
          this.pixelFromPoint = function(t, e) {
            var i = d.getBounds(e);
            return t.minus(i.getTopLeft()).times(l.x / i.width)
          }
          ,
          this.pointFromPixel = function(t, e) {
            var i = d.getBounds(e);
            return t.divide(l.x / i.width).plus(i.getTopLeft())
          }
          ,
          d.goHome(!0),
          d.update()
    }
;
!function() {
  for (var _t, Kt, s, r, Jt = SeadragonUtils.getBrowser(), t = SeadragonUtils.getBrowserVersion(), e = (navigator.userAgent,
      !!document.createElement("canvas").getContext), i = (document.documentElement || {}).style || {}, h = !1, n = ["msTransform", "WebkitTransform", "MozTransform"]; s = n.shift(); )
    if (void 0 !== i[s]) {
      h = !0,
          r = /webkit/i.test(s);
      break
    }
  i.WebkitTransition,
      new RegExp("progid:DXImageTransform.Microsoft.Matrix\\(.*?\\)","g"),
      function() {
        try {
          Jt == SeadragonBrowser.IE && document.documentElement.filters
        } catch (t) {
          return
        }
      }();
  var o = Jt == SeadragonBrowser.SAFARI && t < 4
      , Qt = e && !o
      , l = !Qt && h
      , d = void 0 !== document.documentMode ? "bicubic" : "nearest-neighbor";
  function w(t, e, i, n, o, a) {
    this.level = t,
        this.x = e,
        this.y = i,
        this.bounds = n,
        this.exists = o,
        this.url = a,
        this.elmt = null,
        this.image = null,
        this.loaded = !1,
        this.loading = !1,
        this.style = null,
        this.position = null,
        this.size = null,
        this.blendStart = null,
        this.opacity = null,
        this.distance = null,
        this.visibility = null,
        this.beingDrawn = !1,
        this.lastDrawnTime = 0,
        this.lastTouchTime = 0
  }
  function a(t) {
    switch (t) {
      case SeadragonOverlayPlacement.TOP_LEFT:
        return function(t, e) {}
            ;
      case SeadragonOverlayPlacement.TOP:
        return function(t, e) {
          t.x -= e.x / 2
        }
            ;
      case SeadragonOverlayPlacement.TOP_RIGHT:
        return function(t, e) {
          t.x -= e.x
        }
            ;
      case SeadragonOverlayPlacement.RIGHT:
        return function(t, e) {
          t.x -= e.x,
              t.y -= e.y / 2
        }
            ;
      case SeadragonOverlayPlacement.BOTTOM_RIGHT:
        return function(t, e) {
          t.x -= e.x,
              t.y -= e.y
        }
            ;
      case SeadragonOverlayPlacement.BOTTOM:
        return function(t, e) {
          t.x -= e.x / 2,
              t.y -= e.y
        }
            ;
      case SeadragonOverlayPlacement.BOTTOM_LEFT:
        return function(t, e) {
          t.y -= e.y
        }
            ;
      case SeadragonOverlayPlacement.LEFT:
        return function(t, e) {
          t.y -= e.y / 2
        }
            ;
      case SeadragonOverlayPlacement.CENTER:
      default:
        return function(t, e) {
          t.x -= e.x / 2,
              t.y -= e.y / 2
        }
    }
  }
  function c(t, e, i) {
    this.elmt = t,
        this.scales = e instanceof SeadragonRect,
        this.bounds = new SeadragonRect(e.x,e.y,e.width,e.height),
        this.adjust = a(e instanceof SeadragonPoint ? i : SeadragonOverlayPlacement.TOP_LEFT),
        this.position = new SeadragonPoint(e.x,e.y),
        this.size = new SeadragonPoint(e.width,e.height),
        this.style = t.style,
        this.naturalSize = new SeadragonPoint(t.clientWidth,t.clientHeight)
  }
  w.prototype.toString = function() {
    return this.level + "/" + this.x + "_" + this.y
  }
      ,
      w.prototype.drawHTML = function(t) {
        if (this.loaded) {
          this.elmt || (this.elmt = SeadragonUtils.makeNeutralElement("img"),
              this.elmt.src = this.url,
              this.style = this.elmt.style,
              this.style.position = "absolute",
              this.style.msInterpolationMode = d,
          l && (this.style[s + "Origin"] = "0px 0px"));
          var e = this.elmt
              , i = this.image
              , n = this.style
              , o = this.position
              , a = this.size;
          if (e.parentNode != t && t.appendChild(e),
              l)
            n[s] = ["matrix(", (a.x / i.width).toFixed(8), ",0,0,", (a.y / i.height).toFixed(8), ",", o.x.toFixed(8), r ? "," : "px,", o.y.toFixed(8), r ? ")" : "px)"].join("");
          else
            o = o.apply(Math.floor),
                a = a.apply(Math.ceil),
                n.left = o.x + "px",
                n.top = o.y + "px",
                n.width = a.x + "px",
                n.height = a.y + "px";
          SeadragonUtils.setElementOpacity(e, this.opacity)
        } else
          SeadragonDebug.error("Attempting to draw tile " + this.toString() + " when it's not yet loaded.")
      }
      ,
      w.prototype.drawCanvas = function(t) {
        if (this.loaded) {
          var e = this.position
              , i = this.size;
          t.globalAlpha = this.opacity,
              t.drawImage(this.image, e.x, e.y, i.x, i.y)
        } else
          SeadragonDebug.error("Attempting to draw tile " + this.toString() + " when it's not yet loaded.")
      }
      ,
      w.prototype.unload = function() {
        this.elmt && this.elmt.parentNode && this.elmt.parentNode.removeChild(this.elmt),
            this.elmt = null,
            this.image = null,
            this.loaded = !1,
            this.loading = !1
      }
      ,
      SeadragonOverlayPlacement = Seadragon.OverlayPlacement = {
        CENTER: 0,
        TOP_LEFT: 1,
        TOP: 2,
        TOP_RIGHT: 3,
        RIGHT: 4,
        BOTTOM_RIGHT: 5,
        BOTTOM: 6,
        BOTTOM_LEFT: 7,
        LEFT: 8
      },
      c.prototype.destroy = function() {
        var t = this.elmt
            , e = this.style;
        t.parentNode && t.parentNode.removeChild(t),
            e.top = "",
            e.left = "",
            e.position = "",
        this.scales && (e.width = "",
            e.height = "")
      }
      ,
      c.prototype.drawHTML = function(t) {
        var e = this.elmt
            , i = this.style
            , n = this.scales
            , o = this.naturalSize;
        e.parentNode != t && (t.appendChild(e),
            i.position = "absolute",
            o.x = e.clientWidth,
            o.y = e.clientHeight);
        var a = this.position
            , r = this.size;
        (n || (r.x = o.x = o.x || e.clientWidth,
            r.y = o.y = o.y || e.clientHeight),
            this.adjust(a, r),
        SeadragonConfig.transformOverlays && h) ? (i[s + "Origin"] = "0px 0px",
            i[s] = ["translate(", a.x.toFixed(8), "px,", a.y.toFixed(8), "px)"].join(""),
        n && (e.clientWidth || (i.width = "100%"),
        e.clientHeight || (i.height = "100%"),
            i[s] += [" scale(", (r.x / e.clientWidth).toFixed(8), ",", (r.y / e.clientHeight).toFixed(8), ")"].join(""))) : (SeadragonConfig.transformOverlays,
            a = a.apply(Math.floor),
            r = r.apply(Math.ceil),
            i.left = a.x + "px",
            i.top = a.y + "px",
        n && (i.width = r.x + "px",
            i.height = r.y + "px"))
      }
      ,
      c.prototype.update = function(t, e) {
        this.scales = t instanceof SeadragonRect,
            this.bounds = new SeadragonRect(t.x,t.y,t.width,t.height),
            this.adjust = a(t instanceof SeadragonPoint ? e : SeadragonOverlayPlacement.TOP_LEFT)
      }
      ,
      SeadragonDrawer = Seadragon.Drawer = function(Mt, Ct, t) {
        var bt = this
            , Tt = SeadragonUtils.getElement(t)
            , At = SeadragonUtils.makeNeutralElement(Qt ? "canvas" : "div")
            , Rt = Qt ? At.getContext("2d") : null
            , It = new SeadragonImageLoader
            , e = new SeadragonProfiler
            , Et = Mt.minLevel
            , Ot = Mt.maxLevel
            , g = Mt.tileSize
            , Dt = Mt.tileOverlap
            , kt = Mt.height / Mt.width
            , i = {}
            , n = {}
            , f = {}
            , p = []
            , s = {}
            , Lt = []
            , Ut = []
            , Ft = 0
            , v = 0
            , m = !1
            , Bt = !0;
        function zt(t) {
          return i[t] || (i[t] = Mt.getNumTiles(t)),
              i[t]
        }
        function Ht(t) {
          return n[t] || (n[t] = Mt.getPixelRatio(t)),
              n[t]
        }
        function Nt(t, e, i, n, o, a) {
          var r = null == Mt.tierIndex ? 0 : Mt.tierIndex;
          if (f[r] || (f[r] = {}),
          f[r][t] || (f[r][t] = {}),
          f[r][t][e] || (f[r][t][e] = {}),
              !f[r][t][e][i]) {
            var s = (o + e % o) % o
                , h = (a + i % a) % a
                , l = Mt.getTileBounds(t, s, h)
                , d = Mt.tileExists(t, s, h)
                , c = Mt.getTileUrl(t, s, h);
            l.x += 1 * (e - s) / o,
                l.y += kt * (i - h) / a,
                f[r][t][e][i] = new w(t,e,i,l,d,c)
          }
          var u = f[r][t][e][i];
          return u.lastTouchTime = n,
              u
        }
        this.elmt = Tt,
            this.profiler = e,
            this.doNotClearCanvas = !1,
            At.style.width = "100%",
            At.style.height = "100%",
            At.style.position = "absolute",
            Tt.style.textAlign = "left",
            Tt.appendChild(At);
        var o = new SeadragonEventManager;
        function jt(t) {
          o.trigger.apply(null, arguments)
        }
        var Vt, Wt = !(this.addListener = function(t, e) {
              o.addListener(t, e)
            }
        );
        function $t(t, e, i) {
          if (t.loading = !1,
              m)
            SeadragonDebug.error("Tile load callback in middle of drawing routine.");
          else {
            if (!i)
              return SeadragonDebug.log("Tile " + t + " failed to load: " + t.url),
                  void (t.exists = !1);
            if (e < v)
              SeadragonDebug.log("Ignoring tile " + t + " loaded before reset: " + t.url);
            else {
              t.loaded = !0,
                  t.image = i,
                  Wt = !0;
              var n = p.length;
              if (100 <= p.length) {
                for (var o = Math.ceil(Math.log(g) / Math.log(2)), a = null, r = -1, s = p.length - 1; 0 <= s; s--) {
                  var h = p[s];
                  if (!(h.level <= o || h.beingDrawn))
                    if (a) {
                      var l = h.lastTouchTime
                          , d = a.lastTouchTime
                          , c = h.level
                          , u = a.level;
                      (l < d || l == d && u < c) && (a = h,
                          r = s)
                    } else
                      a = h,
                          r = s
                }
                a && 0 <= r && (a.unload(),
                    n = r)
              }
              p[n] = t,
                  Bt = !0
            }
          }
        }
        function Gt(t, e, i) {
          if (!s[t])
            return !1;
          if (void 0 !== e && void 0 !== i)
            return void 0 === s[t][e] || void 0 === s[t][e][i] || !0 === s[t][e][i];
          var n = s[t];
          for (var o in n)
            if (n.hasOwnProperty(o)) {
              var a = n[o];
              for (var r in a)
                if (a.hasOwnProperty(r) && !a[r])
                  return !1
            }
          return !0
        }
        function Xt(t, e, i) {
          return void 0 === e || void 0 === i ? Gt(t + 1) : Gt(t + 1, 2 * e, 2 * i) && Gt(t + 1, 2 * e, 2 * i + 1) && Gt(t + 1, 2 * e + 1, 2 * i) && Gt(t + 1, 2 * e + 1, 2 * i + 1)
        }
        function Zt(t, e, i, n) {
          s[t] ? (s[t][e] || (s[t][e] = {}),
              s[t][e][i] = n) : SeadragonDebug.error("Setting coverage for a tile before its level's coverage has been reset: " + t)
        }
        function qt(t) {
          s[t] = {}
        }
        function a(t) {
          for (var e = Lt.length - 1; 0 <= e; e--)
            if (Lt[e].elmt == t)
              return e;
          return -1
        }
        function Yt() {
          return Qt && _t && Kt
        }
        function r() {
          Bt = !1;
          for (var t = At, e = Rt, i = Qt, n = Ut; 0 < n.length; ) {
            (rt = n.pop()).beingDrawn = !1
          }
          var o = Ct.getContainerSize()
              , a = o.x
              , r = o.y;
          i && !bt.doNotClearCanvas ? (t.width = a,
              t.height = r,
              e.clearRect(0, 0, a, r)) : t.innerHTML = "";
          var s = Ct.getBounds(!0)
              , h = s.getTopLeft()
              , l = s.getBottomRight();
          if (Yt()) {
            var d = s.rotate(Kt);
            h = d.getTopLeft(),
                l = d.getBottomRight()
          }
          if ((SeadragonConfig.wrapHorizontal || !(l.x < 0 || 1 < h.x)) && (SeadragonConfig.wrapVertical || !(l.y < 0 || h.y > kt))) {
            var c = zt
                , u = Ht
                , g = Nt
                , f = Xt
                , p = Zt
                , v = qt
                , m = Gt
                , w = Dt
                , y = Ft
                , P = Jt === SeadragonBrowser.CHROME
                , S = Math.abs
                , x = (Math.ceil,
                Math.floor)
                , M = Math.log
                , C = Math.max
                , b = Math.min
                , T = Ct.deltaPixelsFromPoints
                , A = Ct.pixelFromPoint
                , R = Mt.getTileAtPoint
                , I = SeadragonConfig.alwaysBlend
                , E = 1e3 * SeadragonConfig.blendTime
                , O = SeadragonConfig.immediateRender
                , D = SeadragonConfig.minZoomDimension
                , k = (SeadragonConfig.minImageRatio,
                SeadragonConfig.wrapHorizontal)
                , L = SeadragonConfig.wrapVertical
                , U = SeadragonConfig.wrapOverlays;
            k || (h.x = C(h.x, 0),
                l.x = b(l.x, 1)),
            L || (h.y = C(h.y, 0),
                l.y = b(l.y, kt));
            var F, B, z = null, H = !1, N = (new Date).getTime(), j = Ct.getCenter(), V = A(j), W = T(u(0), !1).x, $ = O ? 1 : W, G = C(Et, x(M(D = D || 64) / M(2))), X = T(u(0), !0).x, Z = b(Ot, x(M(X / .5) / M(2)));
            G = b(G, Z);
            for (var q = Z; G <= q; q--) {
              var Y = !1
                  , _ = T(u(q), !0).x;
              if (!H && .5 <= _ || q == G)
                H = Y = !0;
              else if (!H)
                continue;
              v(q);
              var K = b(1, (_ - .5) / .5)
                  , J = $ / S($ - T(u(q), !1).x)
                  , Q = R(q, h)
                  , tt = R(q, l)
                  , et = c(q)
                  , it = et.x
                  , nt = et.y;
              k || (tt.x = b(tt.x, it - 1)),
              L || (tt.y = b(tt.y, nt - 1));
              for (var ot = Q.x; ot <= tt.x; ot++)
                for (var at = Q.y; at <= tt.y; at++) {
                  var rt = g(q, ot, at, N, it, nt)
                      , st = Y;
                  if (p(q, ot, at, !1),
                  rt.exists && (H && !st && (f(q, ot, at) ? p(q, ot, at, !0) : st = !0),
                      st)) {
                    var ht = rt.bounds.getTopLeft()
                        , lt = rt.bounds.getSize()
                        , dt = A(ht, !0)
                        , ct = T(lt, !0);
                    w || (ct = ct.plus(new SeadragonPoint(1,1)));
                    var ut = A(ht, !1)
                        , gt = T(lt, !1)
                        , ft = ut.plus(gt.divide(2))
                        , pt = V.distanceTo(ft);
                    if (rt.position = dt,
                        rt.size = ct,
                        rt.distance = pt,
                        rt.visibility = J,
                        rt.loaded) {
                      rt.blendStart || (rt.blendStart = N);
                      var vt = N - rt.blendStart
                          , mt = 0 == E ? 1 : b(1, vt / E);
                      I && (mt *= K),
                          rt.opacity = mt,
                          n.push(rt),
                          1 <= mt ? (p(q, ot, at, !0),
                          P && rt.lastDrawnTime !== y && p(q, ot, at, !1)) : vt < E && (Bt = !0),
                          rt.lastDrawnTime = N
                    } else
                      rt.loading || (B = rt,
                          z = (F = z) ? B.visibility > F.visibility ? B : B.visibility == F.visibility && B.distance < F.distance ? B : F : B)
                  }
                }
              if (m(q))
                break
            }
            Yt() && (e.translate(_t.x, _t.y),
                e.rotate(-Kt));
            for (var wt = n.length - 1; 0 <= wt; wt--) {
              rt = n[wt];
              i ? rt.drawCanvas(e) : rt.drawHTML(t),
                  rt.beingDrawn = !0
            }
            Yt() && (e.rotate(2 * Math.PI + Kt),
                e.translate(-_t.x, -_t.y));
            var yt = Lt.length;
            for (wt = 0; wt < yt; wt++) {
              var Pt = Lt[wt]
                  , St = Pt.bounds
                  , xt = St.getTopLeft();
              U && k && (xt.x += x(j.x)),
                  Pt.position = A(xt, !0),
                  Pt.size = T(St.getSize(), !0),
                  Pt.drawHTML(Tt)
            }
            z && (function(t, e) {
              jt("loadTile", t),
                  t.loading = It.loadImage(t.url, SeadragonUtils.createCallback(null, $t, t, e), function() {
                    if (jt("loadError", {
                      I: Mt.imageId,
                      T: Mt.tierIndex,
                      L: Mt.maxLevel - t.level,
                      R: t.y,
                      C: t.x
                    }),
                    Wt || Vt)
                      return;
                    Vt = setTimeout(function() {
                      Wt || jt("disConnection")
                    }, 2e3)
                  })
            }(z, N),
                Bt = !0),
                Ft = N
          }
        }
        this.addOverlay = function(t, e, i) {
          0 <= a(t = SeadragonUtils.getElement(t)) || (Lt.push(new c(t,e,i)),
              Bt = !0)
        }
            ,
            this.updateOverlay = function(t, e, i) {
              var n = a(t = SeadragonUtils.getElement(t));
              0 <= n && (Lt[n].update(e, i),
                  Bt = !0)
            }
            ,
            this.removeOverlay = function(t) {
              var e = a(t = SeadragonUtils.getElement(t));
              0 <= e && (Lt[e].destroy(),
                  Lt.splice(e, 1),
                  Bt = !0)
            }
            ,
            this.clearOverlays = function() {
              for (; 0 < Lt.length; )
                Lt.pop().destroy(),
                    Bt = !0
            }
            ,
            this.needsUpdate = function(t) {
              return void 0 !== t && (Bt = t),
                  Bt
            }
            ,
            this.numTilesLoaded = function() {
              return p.length
            }
            ,
            this.reset = function(t) {
              if (t) {
                var e, i = Mt.maxLevel - t.L;
                if (!((e = f[t.T]) && (e = e[i]) && (e = e[t.C]) && e[t.R] && !0 !== [t.R].loaded))
                  return;
                e[t.R] = null
              } else
                f = {},
                    p = [];
              v = (new Date).getTime(),
                  Bt = !0
            }
            ,
            this.update = function() {
              e.beginUpdate(),
                  m = !0,
                  r(),
                  m = !1,
                  e.endUpdate()
            }
            ,
            this.idle = function() {}
            ,
            this.useCanvas = function() {
              return Qt
            }
            ,
            this.getCanvas = function() {
              return At
            }
            ,
            this.transform = function(t, e) {
              _t = t,
                  Kt = e
            }
            ,
            this.getLastDraw = function() {
              return Ut
            }
      }
}(),
    function() {
      var e = "----seadragon----"
          , i = SeadragonUtils.getBrowser();
      function lt(t, e, i) {
        var n = SeadragonUtils.makeNeutralElement("span");
        this.elmt = t,
            this.anchor = e,
            this.container = i,
            (this.wrapper = n).style.display = "inline-block",
            n.appendChild(t),
        e == SeadragonControlAnchor.NONE && (n.style.width = n.style.height = "100%"),
            function(t, e, i) {
              e == SeadragonControlAnchor.TOP_RIGHT || e == SeadragonControlAnchor.BOTTOM_RIGHT ? i.insertBefore(t, i.firstChild) : i.appendChild(t)
            }(n, e, i)
      }
      SeadragonControlAnchor = Seadragon.ControlAnchor = {
        NONE: 0,
        TOP_LEFT: 1,
        TOP_RIGHT: 2,
        BOTTOM_RIGHT: 3,
        BOTTOM_LEFT: 4
      },
          lt.prototype.destroy = function() {
            this.wrapper.removeChild(this.elmt),
                this.container.removeChild(this.wrapper)
          }
          ,
          lt.prototype.isVisible = function() {
            return "none" != this.wrapper.style.display
          }
          ,
          lt.prototype.setVisible = function(t) {
            this.wrapper.style.display = t ? "inline-block" : "none"
          }
          ,
          lt.prototype.setOpacity = function(t) {
            this.elmt[e] && i == SeadragonBrowser.IE ? SeadragonUtils.setElementOpacity(this.elmt, t, !0) : SeadragonUtils.setElementOpacity(this.wrapper, t, !0)
          }
      ;
      SeadragonViewer = Seadragon.Viewer = function(h) {
        var l, t, e, i, n, o, a, d = this, c = SeadragonUtils.getElement(h), u = (h = SeadragonUtils.makeNeutralElement("div"),
            SeadragonUtils.makeNeutralElement("div")), r = SeadragonUtils.makeNeutralElement("div"), s = SeadragonUtils.makeNeutralElement("div"), g = SeadragonUtils.makeNeutralElement("div"), f = SeadragonUtils.makeNeutralElement("div"), p = null, v = null, m = null, w = null, y = new SeadragonEventManager, P = new SeadragonMouseTracker(u), S = new SeadragonMouseTracker(h), x = [], M = !0, C = null, b = 1e3, T = 2e3, A = (C = null,
            M = !1,
            document.body.style.width), R = document.body.style.height, I = document.body.style.overflow, E = document.documentElement.style.overflow, O = new SeadragonPoint(1,1), D = null, k = 0, L = 0, U = null, F = null, B = !1, z = !1, H = !1, N = !1;
        function j(t) {
          var e = document.createTextNode(t);
          u.innerHTML = "",
              u.appendChild(SeadragonUtils.makeCenteredNode(e));
          var i = e.parentNode.style;
          i.fontFamily = "verdana",
              i.fontSize = "13px",
              i.fontSizeAdjust = "none",
              i.fontStyle = "normal",
              i.fontStretch = "normal",
              i.fontVariant = "normal",
              i.fontWeight = "normal",
              i.lineHeight = "1em",
              i.textAlign = "center",
              i.textDecoration = "none"
        }
        function V() {
          return p && $(),
              k = (new Date).getTime(),
              window.setTimeout(function() {
                L < k && j(SeadragonStrings.getString("Messages.Loading"))
              }, 2e3),
              k
        }
        function W(t, e, i) {
          return L = (new Date).getTime(),
              t < k ? (SeadragonDebug.log("Ignoring out-of-date open."),
                  void y.trigger("ignore", d)) : e ? (u.innerHTML = "",
                  void (0 !== (D = SeadragonUtils.getElementSize(h)).x && 0 !== D.y ? (m = new SeadragonViewport(D,(p = e).dimensions),
                      v = new SeadragonDrawer(p,m,u),
                      w = new SeadragonProfiler,
                      d.source = p,
                      d.viewport = m,
                      d.drawer = v,
                      d.profiler = w,
                      ht(),
                      z = !(B = !1),
                      G(Z),
                      y.trigger("open", d)) : window.setTimeout(function() {
                    W(t, e, i)
                  }, 10))) : (j(i),
                  void y.trigger("error", d))
        }
        function $() {
          d.source = p = null,
              d.viewport = m = null,
              d.drawer = v = null,
              d.profiler = w = null,
              u.innerHTML = ""
        }
        function G(t, e) {
          if (B)
            return window.setTimeout(t, 1);
          var i = (new Date).getTime()
              , n = (e = e || i) + 1e3 / 60
              , o = Math.max(1, n - i);
          return window.setTimeout(t, o)
        }
        function X() {
          if (p) {
            w.beginUpdate();
            var t = SeadragonUtils.getElementSize(h);
            !t.equals(D) && 0 < t.x && 0 < t.y && (m.resize(t, !0),
                D = t,
                y.trigger("resize", d));
            var e = m.update();
            !B && e && (y.trigger("animationstart", d),
                K()),
                e ? (v.update(),
                    N = !0,
                    y.trigger("animation", d)) : z || v.needsUpdate() ? (v.update(),
                    N = !(z = !1),
                    y.trigger("animation", d)) : (N && (N = !1,
                    y.trigger("updatefinish", d)),
                    v.idle()),
            B && !e && (y.trigger("animationfinish", d),
            H || J()),
                B = e,
                w.endUpdate()
          }
        }
        function Z() {
          if (p) {
            var t = (new Date).getTime();
            X(),
                G(arguments.callee, t)
          }
        }
        function q(t) {
          for (var e = x.length - 1; 0 <= e; e--)
            if (x[e].elmt == t)
              return e;
          return -1
        }
        function Y() {
          window.setTimeout(_, 20)
        }
        function _() {
          if (M) {
            var t = 1 - ((new Date).getTime() - C) / T;
            t = Math.min(1, t),
                t = Math.max(0, t);
            for (var e = x.length - 1; 0 <= e; e--)
              x[e].setOpacity(t);
            0 < t && Y()
          }
        }
        function K() {
          M = !1;
          for (var t = x.length - 1; 0 <= t; t--)
            x[t].setOpacity(1)
        }
        function J() {
          SeadragonConfig.autoHideControls && (M = !0,
              C = (new Date).getTime() + b,
              window.setTimeout(Y, b))
        }
        function Q(t, e, i, n) {
          H = !0,
              K()
        }
        function tt(t, e, i, n) {
          i || (H = !1,
          B || J())
        }
        function et(t, e, i, n) {
          n || (H = !1,
          B || J())
        }
        function it(t, e, i, n) {
          if (m && i) {
            var o = SeadragonConfig.zoomPerClick
                , a = n ? 1 / o : o;
            m.zoomBy(a, m.pointFromPixel(e, !0)),
            SeadragonConfig.constrainDuringPan && m.applyConstraints()
          }
        }
        function nt(t, e) {
          m && (U = e,
              F = m.getCenter())
        }
        function ot(t, e, i, n) {
          if (m)
            if (SeadragonConfig.constrainDuringPan) {
              var o = e.minus(U);
              o = rotateDeltaPixels(o, l);
              var a = m.deltaPointsFromPixels(o.negate(), !0);
              m.panTo(F.plus(a)),
                  m.applyConstraints()
            } else
              m.panBy(m.deltaPointsFromPixels(rotateDeltaPixels(i, l).negate(), !0))
        }
        function at(t, e, i, n) {
          i && SeadragonConfig.constrainDuringPan && m && m.applyConstraints()
        }
        function rt(t, e, i, n) {
          if (m) {
            var o, a = Math.pow(SeadragonConfig.zoomPerScroll, i);
            if (SeadragonConfig.zoomOnCursor) {
              if (l) {
                var r = m.getContainerSize()
                    , s = new SeadragonPoint(r.x / 2,r.y / 2);
                e = e.rotate(-l, s)
              }
              o = m.pointFromPixel(e, !0)
            }
            m.zoomBy(a, o),
                m.applyConstraints()
          }
        }
        function st(t) {
          27 === (t = SeadragonUtils.getEvent(t)).keyCode && d.setFullPage(!1)
        }
        function ht() {
          if (void 0 !== l && m) {
            var t = m.getContainerSize()
                , e = new SeadragonPoint(t.x / 2,t.y / 2)
                , i = new SeadragonPoint(0,0).rotate(l, e);
            v.transform(i, l),
                v.update()
          }
        }
        this.container = c,
            this.elmt = h,
            this.source = null,
            this.drawer = null,
            this.viewport = null,
            this.profiler = null,
            this.tracker = P,
            this.isOpen = function() {
              return !!p
            }
            ,
            this.openDzi = function(t, e) {
              var i = V()
                  , n = SeadragonUtils.createCallback(null, W, i);
              switch (typeof t) {
                case "string":
                  SeadragonDziTileSource.createFromXml(t, e, n);
                  break;
                default:
                  SeadragonDziTileSource.createFromJson(t, n)
              }
            }
            ,
            this.openTileSource = function(t) {
              var e = V();
              window.setTimeout(function() {
                W(e, t)
              }, 1)
            }
            ,
            this.close = function() {
              p && $()
            }
            ,
            this._rotate = function(t) {
              if (void 0 === t)
                return l;
              l = t,
                  ht()
            }
            ,
            this.addControl = function(t, e) {
              if (!(0 <= q(t = SeadragonUtils.getElement(t)))) {
                var i = null;
                switch (e) {
                  case SeadragonControlAnchor.TOP_RIGHT:
                    i = s,
                        t.style.position = "relative";
                    break;
                  case SeadragonControlAnchor.BOTTOM_RIGHT:
                    i = g,
                        t.style.position = "relative";
                    break;
                  case SeadragonControlAnchor.BOTTOM_LEFT:
                    i = f,
                        t.style.position = "relative";
                    break;
                  case SeadragonControlAnchor.TOP_LEFT:
                    i = r,
                        t.style.position = "relative";
                    break;
                  case SeadragonControlAnchor.NONE:
                  default:
                    i = h,
                        t.style.position = "absolute"
                }
                x.push(new lt(t,e,i))
              }
            }
            ,
            this.removeControl = function(t) {
              var e = q(t = SeadragonUtils.getElement(t));
              0 <= e && (x[e].destroy(),
                  x.splice(e, 1))
            }
            ,
            this.clearControls = function() {
              for (; 0 < x.length; )
                x.pop().destroy()
            }
            ,
            this.getNavControl = function() {
              return null
            }
            ,
            this.isDashboardEnabled = function() {
              for (var t = x.length - 1; 0 <= t; t--)
                if (x[t].isVisible())
                  return !0;
              return !1
            }
            ,
            this.isFullPage = function() {
              return h.parentNode == document.body
            }
            ,
            this.isMouseNavEnabled = function() {
              return P.isTracking()
            }
            ,
            this.isVisible = function() {
              return "hidden" != h.style.visibility
            }
            ,
            this.setDashboardEnabled = function(t) {
              for (var e = x.length - 1; 0 <= e; e--)
                x[e].setVisible(t)
            }
            ,
            this.setFullPage = function(t) {
              if (t != d.isFullPage()) {
                var e = document.body
                    , i = e.style
                    , n = document.documentElement.style
                    , o = h.style
                    , a = u.style;
                if (t ? (I = i.overflow,
                    E = n.overflow,
                    i.overflow = "hidden",
                    n.overflow = "hidden",
                    A = i.width,
                    R = i.height,
                    i.width = "100%",
                    i.height = "100%",
                    a.backgroundColor = "black",
                    a.color = "white",
                    o.position = "fixed",
                    o.zIndex = "99999999",
                    e.appendChild(h),
                    D = SeadragonUtils.getWindowSize(),
                    SeadragonUtils.addEvent(document, "keydown", st),
                    Q()) : (i.overflow = I,
                    n.overflow = E,
                    i.width = A,
                    i.height = R,
                    a.backgroundColor = "",
                    a.color = "",
                    o.position = "relative",
                    o.zIndex = "",
                    c.appendChild(h),
                    D = SeadragonUtils.getElementSize(c),
                    SeadragonUtils.removeEvent(document, "keydown", st),
                    tt()),
                    m) {
                  var r = m.getBounds();
                  m.resize(D);
                  var s = m.getBounds();
                  t ? O = new SeadragonPoint(s.width / r.width,s.height / r.height) : (m.update(),
                      m.zoomBy(Math.max(O.x, O.y), null, !0)),
                      z = !0,
                      y.trigger("resize", d),
                      X()
                }
              }
            }
            ,
            this.setMouseNavEnabled = function(t) {
              P.setTracking(t)
            }
            ,
            this.setVisible = function(t) {
              h.style.visibility = t ? "" : "hidden"
            }
            ,
            this.showMessage = function(t, e) {
              e ? window.setTimeout(function() {
                d.isOpen() || j(t)
              }, e) : j(t)
            }
            ,
            this.addEventListener = function(t, e) {
              y.addListener(t, e)
            }
            ,
            this.removeEventListener = function(t, e) {
              y.removeListener(t, e)
            }
            ,
            this.trigger = function(t) {
              y.trigger.apply(d, arguments)
            }
            ,
            t = u.style,
            e = h.style,
            i = r.style,
            n = s.style,
            o = g.style,
            a = f.style,
            e.width = "100%",
            e.height = "100%",
            e.position = "relative",
            e.left = "0px",
            e.top = "0px",
            e.textAlign = "left",
            t.width = "100%",
            t.height = "100%",
            t.overflow = "hidden",
            t.position = "absolute",
            t.top = "0px",
            t.left = "0px",
            i.position = n.position = o.position = a.position = "absolute",
            i.top = n.top = "0px",
            i.left = a.left = "0px",
            n.right = o.right = "0px",
            a.bottom = o.bottom = "0px",
            P.clickHandler = it,
            P.pressHandler = nt,
            P.dragHandler = ot,
            P.releaseHandler = at,
            P.scrollHandler = rt,
            P.setTracking(!0),
            S.enterHandler = Q,
            S.exitHandler = tt,
            S.releaseHandler = et,
            S.setTracking(!0),
            window.setTimeout(J, 1),
            h.appendChild(u),
            h.appendChild(r),
            h.appendChild(s),
            h.appendChild(g),
            h.appendChild(f),
            c.innerHTML = "",
            c.appendChild(h)
      }
    }(),
    function() {
      if (!SlideViewerConfig) {
        var a = {};
        SlideViewerConfig = {
          enableImageAdjustment: !0,
          enableAnnotation: !0,
          language: "auto",
          preCaptureURL: "",
          backLastPageOrder: "moticvwr:///back",
          captureCallBack: null,
          captureToAttachment: !1,
          captureToSlide: !1,
          captureFileName: "",
          exitConfirm: !0,
          autoShowAnnoDialog: !0,
          showOption: !0,
          showNavMapMeasure: !1,
          showCapture: !1,
          showCaptureSetting: !1,
          showBackLastPage: !1,
          showNavMap: function(t, e) {
            return n("shownavmap", t, !0, i(e))
          },
          showAttachment: function(t, e) {
            return n("showattachment", t, null, i(e))
          },
          showAnnotationList: function(t, e) {
            return n("showannotationlist", t, null, i(e))
          },
          compactBrowsing: function(t, e) {
            return void 0 !== t && function(t) {
              t ? (SeadragonConfig.animationTime = 0,
                  SeadragonConfig.blendTime = 0,
                  SeadragonConfig.immediateRender = !0) : (SeadragonConfig.animationTime = 1,
                  SeadragonConfig.blendTime = .5,
                  SeadragonConfig.immediateRender = !1)
            }(t),
                n("compactbrowsing", t, null, i(e))
          },
          showAnimation: function(t, e) {
            return void 0 !== t && o(t),
                n("showAnimation", t, !0, i(e))
          },
          showAnnotationDetail: function(t, e) {
            return n("showannotationdetail", t, null, i(e))
          },
          showScalebar: function(t, e) {
            return n("showscalebar", t, null, i(e))
          },
          showRulers: function(t, e) {
            return n("showrulers", t, null, i(e))
          },
          showGrid: function(t, e) {
            return n("showgrid", t, null, i(e))
          },
          showLabel: function(t, e) {
            return n("showlabel", t, null, i(e))
          },
          setMaxZoomPixelRatio: function(t) {
            SeadragonConfig.maxZoomPixelRatio = t
          }
        },
            SeadragonConfig.constrainDuringPan = !1,
            SeadragonConfig.debugMode = !1,
            SeadragonConfig.autoHideControls = !1,
            SeadragonConfig.maxZoomPixelRatio = 2,
            SeadragonConfig.imageLoaderLimit = 4,
            SeadragonConfig.zoomPerClick = 1,
            SeadragonConfig.zoomPerScroll = Math.pow(2, 1 / 6),
            SeadragonConfig.zoomOnCursor = !0,
            o(SlideViewerConfig.showAnimation())
      }
      function i(t) {
        return null == t && (t = !0),
            t
      }
      function n(t, e, i, n) {
        if (void 0 === e) {
          if (void 0 === a[t]) {
            var o = $.cookie(t);
            a[t] = o ? "on" === o : !0 === i
          }
          return a[t]
        }
        a[t] = e,
        n && (e ? $.cookie(t, "on", {
          expires: 365
        }) : $.cookie(t, "off", {
          expires: 365
        }))
      }
      function o(t) {
        t ? (SeadragonConfig.animationTime = 1,
            SeadragonConfig.blendTime = .5,
            SeadragonConfig.immediateRender = !1) : (SeadragonConfig.animationTime = 0,
            SeadragonConfig.blendTime = 0,
            SeadragonConfig.immediateRender = !0)
      }
    }();
var SlideViewerSupport, SlideViewerStrings, ShortcutConfig = {
  Direction: {
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    ctrlKey: !1,
    shiftKey: !1,
    altKey: !1
  },
  Scale: {
    zoomIn: 38,
    zoomOut: 40,
    ctrlKey: !1,
    shiftKey: !0,
    altKey: !1
  },
  Rotate: {
    counterclockwise: 37,
    clockwise: 39,
    degree: 5,
    ctrlKey: !1,
    shiftKey: !0,
    altKey: !1
  }
};
!function() {
  if (!SlideViewerSupport) {
    $.extend($.support, {
      orientation: "orientation"in window && "onorientationchange"in window,
      touch: "ontouchend"in document || 0 < navigator.maxTouchPoints
    }),
        SlideViewerSupport = {
          imageAdjustment: !1,
          canvas: !1,
          isAndroid: !1
        };
    var t = !!document.createElement("canvas").getContext;
    SlideViewerSupport.canvas = t;
    var e = SeadragonUtils.getBrowser()
        , i = SeadragonUtils.getBrowserVersion();
    !t || e == SeadragonBrowser.IE && i < 10 || (SlideViewerSupport.imageAdjustment = !0);
    var n = navigator.userAgent.toLowerCase();
    SlideViewerSupport.isAndroid = -1 < n.indexOf("android"),
        window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(t) {
          window.setTimeout(t, 1e3 / 60)
        }
  }
}(),
    function() {
      if (!SlideViewerStrings) {
        var a = {
          en: {
            Buttons: {
              Annotation: "Annotations",
              ImageAdjustment: "Adjust Image",
              Rotate: "Rotate",
              Options: "Options",
              Edit: "Edit",
              Delete: "Delete",
              AnnotationList: "List",
              Back: "Back",
              Ok: "Ok",
              Cancel: "Cancel",
              Yes: "Yes",
              No: "No",
              Reset: "Reset",
              Finish: "Finish",
              Save: "Save",
              On: "On",
              Off: "Off",
              AutoShow: "Show Automatically",
              Close: "Close",
              Upload: "Upload",
              Question: "Question"
            },
            Labels: {
              AnnotationType: "Annotations:",
              RotateDegree: "Degree:"
            },
            Tooltips: {
              BtnBackLastPage: "Back to last page",
              BtnBackToBase: "Back to base image",
              BtnHome: "Fit to view window",
              ZoomIn: "Zoom In",
              ZoomOut: "Zoom Out"
            },
            Messages: {
              SaveSuccess: "Save Successfully.",
              SaveFailed: "Save Failed.",
              ExitConfirm: "The slide's data has been changed, do you want to exit without saving ?",
              SaveAdjustmentSuccess: "Save image adjustment successfully.",
              SaveAdjustmentFailed: "Save image adjustment failed.",
              SaveAnnotationSuccess: "Save annotations successfully.",
              SaveAnnotationFailed: "Save annotations failed.",
              DeleteAttachmentSuccess: "Delete attachment successfully.",
              DeleteAttachmentFailed: "Delete attachment failed.",
              ConfirmDeleteAttachment: "Do you want to remove the selected attachment?",
              NoAttachments: "No attachments"
            },
            ImageAdjustments: {
              Title: "Adjust Image",
              Gamma: "Gamma",
              Factor: "Factor",
              MinInput: "Min Input",
              MaxInput: "MaxInput",
              Contrast: "Contrast",
              Channels: "Color",
              Red: "Red",
              Green: "Green",
              Blue: "Blue",
              AllChannels: "All Channels",
              SS: "Sharpness & Saturation",
              Saturation: "Saturation",
              Sharpness: "Sharpness"
            },
            Annotations: {
              Draw: {
                Line: "Draw Line",
                Arrow: "Draw Arrow",
                Rectangle: "Draw Rectangle",
                Ellipse: "Draw Ellipse",
                Remark: "Add Remark",
                Position: "Add Position",
                CurveRounded: "Draw Closed Curve",
                Curve: "Draw Curve",
                Angle: "Draw Angle by 3 Points",
                Circle: "Draw Circle",
                CircleThreePoints: "Draw Circle by 3 points",
                Arc: "Draw Arc by 3 points",
                Polygon: "Draw Polygon"
              },
              Dialog: {
                Title: "Edit Annotation",
                LineWidth: "Line Width:",
                Name: "Name:",
                Description: "Description:",
                Color: "Color:"
              },
              Measurement: {
                TxtLength: "Length:",
                TxtWidth: "Width:",
                TxtHeight: "Height:",
                TxtAngle: "Angle:",
                TxtArcLength: "Arc Length:",
                TxtArea: "Area:",
                TxtMajorhalfaxis: "Major half axis:",
                TxtMinorhalfaxis: "Minor half axis:",
                TxtPerimeter: "Perimeter:",
                TxtRadius: "Radius:",
                TxtDescription: "Description:",
                TxtUnit: " um",
                TxtAreaUnit: " squm",
                TxtDeg: " Deg"
              },
              Default: {
                Name: "New Annotation",
                Description: "Description"
              },
              AskSave: {
                Title: "Save Annotations",
                Message: "Annotations have been changed, do you want to save ?"
              }
            },
            Options: {
              Title: "Options",
              NavMap: "Nav Map:",
              Compact: "Compact:",
              Ruler: "Ruler:",
              Grid: "Grid:",
              Label: "Label:",
              Attachment: "Attachment"
            },
            Compact: {
              Title: "Compact Browsing",
              Message: "This function is disabled in compact browsing. You can go to [Options] to turn it off."
            },
            NotSupported: {
              Title: "Not Supported",
              Message: 'It seems this function is not supported well on your browser. Please use the latest <a href="https://www.google.com/chrome" target="_blank">Chrome</a>, <a href="http://www.mozillaonline.com/" target="_blank">Firefox</a> or <a href="http://www.apple.com/safari/" target="_blank">Safari</a> for a better browsing experience.'
            },
            RotateOption: {
              Normal: "Normal Display",
              90: "CCW 90 degree",
              180: "CCW 180 degree",
              270: "CCW 270 degree",
              Any: "Any degree"
            },
            Attachment: {
              AddAttachments: "Add Attachments",
              UploadEFileLimit: "(*.jpg,*.png,*.gif,*.bmp,*.txt,*.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx),Maximum:8MB"
            }
          },
          zh: {
            Buttons: {
              Annotation: "标注",
              ImageAdjustment: "图像调节",
              Rotate: "旋转",
              Options: "选项",
              Edit: "编辑",
              Delete: "删除",
              AnnotationList: "标注列表",
              Back: "返回",
              Ok: "确定",
              Cancel: "取消",
              Yes: "是",
              No: "否",
              Reset: "重置",
              Finish: "完成",
              Save: "保存",
              On: "开",
              Off: "关",
              AutoShow: "自动显示",
              Close: "关闭",
              Upload: "上传",
              Question: "询问"
            },
            Labels: {
              AnnotationType: "标注类型：",
              RotateDegree: "度数："
            },
            Tooltips: {
              BtnBackLastPage: "返回上一页",
              BtnBackToBase: "返回底图",
              BtnHome: "自适应窗口",
              ZoomIn: "放大",
              ZoomOut: "缩小"
            },
            Messages: {
              SaveSuccess: "保存成功。",
              SaveFailed: "保存失败！",
              ExitConfirm: "切片的数据已经改变，是否直接退出？",
              SaveAdjustmentSuccess: "图像调节保存成功。",
              SaveAdjustmentFailed: "图像调节保存失败。",
              SaveAnnotationSuccess: "标注保存成功。",
              SaveAnnotationFailed: "标注保存失败。",
              DeleteAttachmentSuccess: "删除附件成功。",
              DeleteAttachmentFailed: "删除附件失败。",
              ConfirmDeleteAttachment: "确定要删除选定的附件？",
              NoAttachments: "没有上传附件"
            },
            ImageAdjustments: {
              Title: "调节图像",
              Gamma: "伽马",
              Factor: "因子",
              Contrast: "对比度",
              MinInput: "最小值",
              MaxInput: "最大值",
              Channels: "颜色通道",
              Red: "红",
              Green: "绿",
              Blue: "蓝",
              AllChannels: "所有通道",
              SS: "锐度和饱和度",
              Saturation: "饱和度",
              Sharpness: "锐度"
            },
            Annotations: {
              Draw: {
                Line: "绘制直线",
                Arrow: "绘制带箭头直线",
                Rectangle: "绘制矩形",
                Ellipse: "绘制椭圆",
                Remark: "绘制文本注释",
                Position: "标记位置",
                CurveRounded: "绘制闭合曲线",
                Curve: "绘制自由曲线",
                Angle: "三点画角度",
                Circle: "绘制圆",
                CircleThreePoints: "三点画圆",
                Arc: "三点画弧",
                Polygon: "绘制多边形"
              },
              Dialog: {
                Title: "编辑标注",
                LineWidth: "线条宽度：",
                Name: "名称：",
                Description: "描述：",
                Color: "颜色："
              },
              Measurement: {
                TxtLength: "长度：",
                TxtWidth: "宽度：",
                TxtHeight: "高度：",
                TxtAngle: "角度：",
                TxtArcLength: "弧长：",
                TxtArea: "面积：",
                TxtMajorhalfaxis: "长半轴：",
                TxtMinorhalfaxis: "短半轴：",
                TxtPerimeter: "周长：",
                TxtRadius: "半径：",
                TxtDescription: "描述：",
                TxtUnit: " 微米",
                TxtAreaUnit: " 平方微米",
                TxtDeg: " 度"
              },
              Default: {
                Name: "新标注",
                Description: "请输入"
              },
              AskSave: {
                Title: "保存标注",
                Message: "标注已经改变，是否保存？"
              }
            },
            Options: {
              Title: "选项",
              NavMap: "导航图：",
              Compact: "精简模式：",
              Ruler: "标尺：",
              Grid: "网格：",
              Label: "标签：",
              Attachment: "附件"
            },
            Compact: {
              Title: "精简模式",
              Message: "精简模式下该功能是关闭的。您可以到 【选项】 关闭精简模式。"
            },
            NotSupported: {
              Title: "不支持",
              Message: '您的浏览器还不能很好的支持此功能，请使用最新的 <a href="https://www.google.com/chrome" target="_blank">Chrome</a>, <a href="http://www.mozillaonline.com/" target="_blank">Firefox</a> 或 <a href="http://www.apple.com/safari/" target="_blank">Safari</a> 浏览器以获得更好的体验。'
            },
            RotateOption: {
              Normal: "正常显示",
              90: "逆时针90度",
              180: "逆时针180度",
              270: "逆时针270度",
              Any: "任意角度"
            },
            Attachment: {
              AddAttachments: "添加附件",
              UploadEFileLimit: "(*.jpg,*.png,*.gif,*.bmp,*.txt,*.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx),最大文件:8MB"
            }
          }
        };
        (SlideViewerStrings = {}).getString = function(t) {
          for (var e = t.split("."), i = function() {
            var t = SlideViewerConfig.language;
            if (a[t])
              return a[t];
            null != t && "" !== t && "auto" !== t || (t = window.navigator.userLanguage || window.navigator.language);
            t = t.split("-")[0],
            a[t] || (t = "en");
            return SlideViewerConfig.language = t,
                a[t]
          }(), n = 0; n < e.length; n++)
            i = i[e[n]] || {};
          "string" != typeof i && (i = "");
          var o = arguments;
          return i.replace(/\{\d+\}/g, function(t) {
            var e = parseInt(t.match(/\d+/)) + 1;
            return e < o.length ? o[e] : ""
          })
        }
      }
    }();
var ImageAdjustment, OpenSlideResult = function() {
  this.error,
      this.resultCode = -1,
      this.webSiteUrl,
      this.slide
}, AnnotationResult = function() {
  this.error,
      this.resultCode = -1,
      this.webSiteUrl,
      this.annotations = new Array
}, ReadImageAdjustmentResult = function() {
  this.error,
      this.resultCode = -1,
      this.webSiteUrl,
      this.adjustment
}, UpdateResult = function() {
  this.error,
      this.success = !1
}, SlideInfo = function() {
  this.id = 0,
      this.guid = "",
      this.barcode = "",
      this.name = "unknown",
      this.baseImage = new SlideImage,
      this.ROIs = new Array
}, ROI = function() {
  this.id = -1,
      this.scanObjective = 0,
      this.x = 0,
      this.y = 0,
      this.width = 0,
      this.height = 0,
      this.hasImage = !1,
      this.image
}, SlideImage = function() {
  this.id,
      this.scanObjective,
      this.calibration = -1,
      this.width = 0,
      this.height = 0,
      this.tileSize = 256,
      this.annotations = new Array,
      this.hasAnnotations = !1,
      this.imageAdjustment,
      this.tierCount = 1,
      this.tierSpacing = 0,
      this.isBaseImage = !1
}, AnnotationInfo = function() {
  this.imageId,
      this.guid,
      this.name,
      this.description,
      this.scale,
      this.width,
      this.type,
      this.region,
      this.fontUnderLine,
      this.fontSize,
      this.fontFamily,
      this.fontItalic,
      this.fontBold,
      this.visible,
      this.color,
      this.measurement,
      this.radius,
      this.arcLength,
      this.angle,
      this.points = new Array
};
(ImageAdjustment = function() {
      this.gamma = 1,
          this.contrastMin = 0,
          this.contrastMax = 255,
          this.red = 1,
          this.green = 1,
          this.blue = 1,
          this.saturation = 0,
          this.sharpness = 0,
          this.rotateDegree = 0
    }
).prototype.isChanged = function() {
  return !(this.isDefaultColorChannel() && this.isDefaultContrast() && this.isDefaultGamma() && this.isDefaultSaturation() && this.isDefaultSharpness())
}
    ,
    ImageAdjustment.prototype.isDefaultGamma = function() {
      return 1 == this.gamma
    }
    ,
    ImageAdjustment.prototype.isDefaultContrast = function() {
      return 0 == this.contrastMin && 255 == this.contrastMax
    }
    ,
    ImageAdjustment.prototype.isDefaultColorChannel = function() {
      return 1 == this.red && 1 == this.green && 1 == this.blue
    }
    ,
    ImageAdjustment.prototype.isDefaultSaturation = function() {
      return 0 == this.saturation
    }
    ,
    ImageAdjustment.prototype.isDefaultSharpness = function() {
      return 0 == this.sharpness
    }
    ,
    ImageAdjustment.prototype.clone = function() {
      var t = new ImageAdjustment;
      return t.gamma = this.gamma,
          t.contrastMin = this.contrastMin,
          t.contrastMax = this.contrastMax,
          t.red = this.red,
          t.green = this.green,
          t.blue = this.blue,
          t.saturation = this.saturation,
          t.sharpness = this.sharpness,
          t
    }
    ,
    ImageAdjustment.prototype.reset = function() {
      this.gamma = 1,
          this.contrastMin = 0,
          this.contrastMax = 255,
          this.red = 1,
          this.green = 1,
          this.blue = 1,
          this.saturation = 0,
          this.sharpness = 0
    }
    ,
    ImageAdjustment.prototype.isEquals = function(t) {
      return !!t && this.gamma == t.gamma && this.contrastMin == t.contrastMin && this.contrastMax == t.contrastMax && this.red == t.red && this.green == t.green && this.blue == t.blue && this.saturation == t.saturation && this.sharpness == t.sharpness
    }
;
var MdsError, SeadragonMdsTileSource = Seadragon.MdsTileSource = function(o, a, t, e, i, n, r, s) {
      SeadragonTileSource.apply(this, [t, e, i, n]);
      var h = this;
      this.tileFormat = r,
          this.tierIndex = 0,
          this.imageId = a,
          this.getTileUrl = function(t, e, i) {
            var n = this.maxLevel - t;
            return s.getTileUrl(o, a, h.tierIndex, n, e, i, r)
          }
    }
;
function CalcCenterX(t, e, i, n, o, a) {
  return ((t * t + e * e) * (n - a) - (i * i + n * n) * (n - a) - (i * i + n * n) * (e - n) + (o * o + a * a) * (e - n)) / (2 * ((t - i) * (n - a) - (i - o) * (e - n)))
}
function CalcCenterY(t, e, i, n, o, a) {
  return (i * i + n * n - (o * o + a * a) - 2 * CalcCenterX(t, e, i, n, o, a) * (i - o)) / (2 * (n - a))
}
function CalcCenterPoint(t, e, i) {
  var n = CalcCenterX(t.x, t.y, e.x, e.y, i.x, i.y)
      , o = CalcCenterY(t.x, t.y, e.x, e.y, i.x, i.y);
  return new Point(n,o)
}
function CalcRadius(t, e) {
  return Math.sqrt((e.x - t.x) * (e.x - t.x) + (e.y - t.y) * (e.y - t.y))
}
function AngleDegreeS(t, e, i, n, o, a) {
  var r = Math.atan2(e - n, t - i)
      , s = (Math.atan2(a - n, o - i) - r) / Math.PI * 180;
  return s < 0 ? 360 + s : s
}
function AngleRadianS(t, e, i, n, o, a) {
  var r = Math.atan2(e - n, t - i);
  return Math.atan2(a - n, o - i) - r
}
function AngleRadian(t, e, i) {
  return AngleRadianS(t.x, t.y, e.x, e.y, i.x, i.y)
}
function Radian(t, e) {
  return Math.atan2(t.y - e.y, t.x - e.x)
}
function AngleDegree(t, e, i) {
  return AngleDegreeS(t.x, t.y, e.x, e.y, i.x, i.y)
}
function AngleArcPointS(t, e, i, n, o) {
  var a = Math.atan2(n - e, i - t)
      , r = Math.sin(a) * o
      , s = Math.cos(a) * o;
  return new Point(t + s,e + r)
}
function AngleArcPoint(t, e, i) {
  return AngleArcPointS(t.x, t.y, e.x, e.y, i)
}
function IsLargeArc(t) {
  var e = t < 0 ? 2 * Math.PI + t : t;
  return e < .5 * Math.PI || e > 1.5 * Math.PI
}
function IsCounterClockwise(t) {
  var e = t < 0 ? 2 * Math.PI + t : t;
  return 0 < e && e < Math.PI
}
function CalcArea(t) {
  var e, i, n = t.length, o = 0;
  for (e = 0; e < n; e++)
    i = (e + 1) % n,
        o += t[e].x * t[i].y,
        o -= t[e].y * t[i].x;
  return o /= 2,
      Math.abs(o)
}
function CalcLength(t) {
  if (null == t)
    return 0;
  var e = t.length;
  if (e < 2)
    return 0;
  for (var i = 0, n = 0, o = 1; o < e; o++)
    i += LineLength(t[n], t[o]),
        n = o;
  return i
}
function CalcLengthClosed(t) {
  if (null == t)
    return 0;
  var e = t.length;
  if (e < 2)
    return 0;
  if (t[0] == t[e - 1])
    return CalcLength(t);
  t.push(t[0]);
  var i = CalcLength(t);
  return t.splice(t.length - 1, 1),
      i
}
function TriangleArea(t, e, i) {
  var n = LineLength(t, e)
      , o = LineLength(t, i)
      , a = LineLength(e, i);
  if (n + o <= a || o + a <= n || a + n <= o)
    return 0;
  var r = (n + o + a) / 2;
  return Math.sqrt(Math.Abs(r * (r - n) * (r - o) * (r - a)))
}
function LineLength(t, e) {
  var i = e.x - t.x
      , n = e.y - t.y;
  return Math.sqrt(i * i + n * n)
}
function RadianOfTwoLine(t, e, i) {
  var n = Math.atan2(e.y - t.y, e.x - t.x);
  return Math.atan2(i.y - t.y, i.x - t.x) - n
}
function HexToNumber(t) {
  return parseInt(t.replace("#", "0xFF"))
}
function NumberToHex(t) {
  return a = t >> 24 & 255,
      r = t >> 16 & 255,
      g = t >> 8 & 255,
      b = 255 & t,
      colorHex("rgb(" + r + "," + g + "," + b + ")")
}
(MdsError = function(t) {
      Error.apply(this, arguments),
          this.message = t
    }
).prototype = new Error,
    function() {
      var t = window.CanvasRenderingContext2D && CanvasRenderingContext2D.prototype;
      t && t.lineTo && (t.dashedLine = function(t, e, i, n, o) {
            function a(t, e) {
              return t <= e
            }
            function r(t, e) {
              return e <= t
            }
            function s(t, e) {
              return Math.min(t, e)
            }
            function h(t, e) {
              return Math.max(t, e)
            }
            var l = {
              thereYet: r,
              cap: s
            }
                , d = {
              thereYet: r,
              cap: s
            };
            0 < e - n && (d.thereYet = a,
                d.cap = h),
            0 < t - i && (l.thereYet = a,
                l.cap = h),
                this.moveTo(t, e);
            for (var c = t, u = e, g = 0, f = !0; !l.thereYet(c, i) || !d.thereYet(u, n); ) {
              var p = Math.atan2(n - e, i - t)
                  , v = o[g];
              c = l.cap(i, c + Math.cos(p) * v),
                  u = d.cap(n, u + Math.sin(p) * v),
                  f ? this.lineTo(c, u) : this.moveTo(c, u),
                  g = (g + 1) % o.length,
                  f = !f
            }
          }
              ,
              t.wrapText = function(t, e, i, n, o) {
                for (var a, r = t.split(enter), s = 0; s < r.length; s++) {
                  a = getTextSplitChar(r[s]);
                  for (var h = r[s].split(a), l = "", d = 0; d < h.length; d++) {
                    var c = l + h[d] + a;
                    n < this.measureText(c).width && 0 < d ? (this.fillText(l, e, i),
                        l = h[d] + a,
                        i += o) : l = c
                  }
                  this.fillText(l, e, i),
                      i += o
                }
              }
      )
    }();
var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
function colorHex(t) {
  var e = t;
  if (/^(rgb|RGB)/.test(e)) {
    for (var i = e.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(","), n = "#", o = 0; o < i.length; o++) {
      var a = Number(i[o]).toString(16);
      "0" === a ? a += a : 1 == a.length && (a = "0" + a),
          n += a
    }
    return 7 !== n.length && (n = e),
        n
  }
  if (!reg.test(e))
    return e;
  var r = e.replace(/#/, "").split("");
  if (6 === r.length)
    return e;
  if (3 === r.length) {
    var s = "#";
    for (o = 0; o < r.length; o += 1)
      s += r[o] + r[o];
    return s
  }
}
function colorRgb(t) {
  var e = t.toLowerCase();
  if (e && reg.test(e)) {
    if (4 === e.length) {
      for (var i = "#", n = 1; n < 4; n += 1)
        i += e.slice(n, n + 1).concat(e.slice(n, n + 1));
      e = i
    }
    var o = [];
    for (n = 1; n < 7; n += 2)
      o.push(parseInt("0x" + e.slice(n, n + 2)));
    return "RGB(" + o.join(",") + ")"
  }
  return e
}
var Point, Rect, ShapeDefaultConfig, Shape, Line, Arrow, Rectangle, Ellipse, Region, Remark, Position, CurveRounded, Curve, Angle, Circle, CircleThreePoints, Arc, Polygon, enter = "<br/>";
function registerTxtCSS(t, e, i, n, o, a, r, s, h, l, d, c) {
  $elmt = $(t),
      $elmt.css({
        left: e + "px",
        top: i + "px",
        "font-size": n + "px",
        "font-family": o,
        color: a,
        position: "absolute",
        padding: "5px",
        float: "left",
        "border-radius": "4px",
        "-moz-border-radius": "4px",
        "-webkit-border-radius": "4px"
      }),
  r && $elmt.css({
    "font-weight": "bold"
  }),
  s && $elmt.css({
    "font-style": "italic"
  }),
  h && $elmt.css({
    "text-decoration": "underline"
  }),
  d && $elmt.css({
    "background-color": "#F7F8FA",
    border: "1px solid #A3AEB9"
  }),
  c && ($elmt.css({
    filter: "alpha(opacity=80)",
    opacity: "0.8",
    display: "block"
  }),
      l = replaceHtmlEnter(l))
}
function registerMeasurementTxtCSS(t) {
  $elmt = $(t),
      $elmt.css({
        "font-size": "12px",
        "background-color": "#F7F8FA",
        border: "1px solid #A3AEB9",
        color: "#000000",
        "font-family": "Microsoft Sans Serif,Arial, Helvetica, sans-serif,宋体",
        filter: "alpha(opacity=80)",
        opacity: "0.8",
        position: "absolute",
        padding: "4px",
        "border-radius": "4px",
        "-moz-border-radius": "4px",
        "-webkit-border-radius": "4px"
      })
}
function floatRound(t) {
  return Math.round(100 * t) / 100
}
function replaceHtmlEnter(t) {
  return t = t.replaceAll("\n", enter)
}
function isHasEnter(t) {
  for (var e = !1, i = 0; i < t.length; i++)
    if ("\n" == t[i]) {
      e = !0;
      break
    }
  return e
}
function replaceSize(t, e) {
  var i = $(e).width()
      , n = $(e).height();
  i < 200 && (i = 200),
  n < 100 && (n = 100),
      $(t).width(i),
      $(t).height(n)
}
function appendLine(t, e) {
  return t += e + enter
}
function append(t, e) {
  return t += e
}
function registerPositionCSS(t, e, i) {
  $elmt = $(t),
      $elmt.css({
        left: e + "px",
        top: i + "px"
      })
}
function GetOffsetWidth(t) {
  return (t /= 2) < 5 && (t = 5),
      t
}
function clickOnLine(t, e, i, n) {
  var o, a, r, s;
  if (n = GetOffsetWidth(n),
      a = t.x > e.x ? (o = e.x,
          t.x) : (o = t.x,
          e.x),
      s = t.y > e.y ? (r = e.y,
          t.y) : (r = t.y,
          e.y),
  i.x < o - n || i.x > a + n || i.y < r - n || i.y > s + n)
    return !1;
  var h = pointToLineLength(t, e, i);
  return null != h && h < n
}
function pointToLineLength(t, e, i) {
  var n = t.y - e.y
      , o = e.x - t.x
      , a = (t.x - o) * t.y - t.x * (t.y + n);
  return 0 == n && 0 == o ? null : Math.abs(n * i.x + o * i.y + a) / Math.sqrt(n * n + o * o)
}
function clickOnEllipse(t, e, i, n, o) {
  if (o = GetOffsetWidth(o),
  i.x - t - o > n.x || n.x > i.x + t + o || i.y - e - o > n.y || n.y > i.y + e + o)
    return !1;
  var a = 1 / ((n.x - i.x) / t)
      , r = Math.sqrt(a * a - 1) / a;
  isNaN(r) && (r = 0),
  (n.y < i.y && 0 < r || n.y > i.y && r < 0) && (r = -r);
  var s = i.y + e * r;
  return s - o <= n.y && n.y <= s + o
}
function clickInCircle(t, e, i, n) {
  return n = GetOffsetWidth(n),
  CalcRadius(e, i) <= t + n
}
function clickInCircleResult(t, e, i, n) {
  n = GetOffsetWidth(n);
  var o = CalcRadius(e, i)
      , a = new ClickResult;
  return a.isIn = o <= t + n,
      a.length = o,
      a
}
function clickOnCircle(t, e, i, n) {
  n = GetOffsetWidth(n);
  var o = CalcRadius(e, i);
  return t - n < o && o < t + n
}
function clickOnArc(t, e, i, n, o, a, r) {
  r = GetOffsetWidth(r);
  var s = LineLength(e, i)
      , h = Radian(i, e);
  return !(s < t - r || t + r < s) && (Math.abs(n - o) < Math.PI ? a ? Math.min(n, o) > h || h > Math.max(n, o) : Math.min(n, o) < h && h < Math.max(n, o) : a ? Math.min(n, o) < h && h < Math.max(n, o) : Math.min(n, o) > h || h > Math.max(n, o))
}
function clickInArc(t, e, i, n, o, a, r) {
  r = GetOffsetWidth(r);
  var s = LineLength(e, i)
      , h = Radian(i, e);
  return !(t + r < s) && (Math.abs(n - o) < Math.PI ? a ? Math.min(n, o) > h || h > Math.max(n, o) : Math.min(n, o) < h && h < Math.max(n, o) : a ? Math.min(n, o) < h && h < Math.max(n, o) : Math.min(n, o) > h || h > Math.max(n, o))
}
function guidGenerator() {
  function t() {
    return (65536 * (1 + Math.random()) | 0).toString(16).substring(1)
  }
  return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t()
}
function getXYfromEvent(t) {
  if (t.originalEvent && t.originalEvent.targetTouches) {
    var e;
    evtPos = [];
    for (var i = 0, n = t.originalEvent.touches.length; i < n; i++)
      e = t.originalEvent.touches[i],
          evtPos.push({
            x: e.pageX,
            y: e.pageY
          })
  } else {
    var o = document
        , a = o.body;
    evtPos = [{
      x: t.pageX || t.clientX + (o && o.scrollLeft || a && a.scrollLeft || 0) - (o && o.clientLeft || a && o.clientLeft || 0),
      y: t.pageY || t.clientY + (o && o.scrollTop || a && a.scrollTop || 0) - (o && o.clientTop || a && o.clientTop || 0)
    }]
  }
  return evtPos
}
function rotatePoint(t, e, i) {
  if (!e)
    return t;
  var n = i;
  i || (n = new SeadragonPoint(0,0));
  var o = t.x - n.x
      , a = n.y - t.y
      , r = o * Math.cos(e) - a * Math.sin(e)
      , s = o * Math.sin(e) + a * Math.cos(e);
  return o = r + n.x,
      a = n.y - s,
      new SeadragonPoint(o,a)
}
function rotateDeltaPixels(t, e) {
  if (!e)
    return t;
  var i = t.x * Math.cos(e) - Math.sin(e) * t.y
      , n = t.y * Math.cos(e) + Math.sin(e) * t.x;
  return new SeadragonPoint(i,n)
}
function roundRect(t, e, i, n, o, a, r, s) {
  void 0 === s && (s = !0),
  void 0 === a && (a = 5),
      t.beginPath(),
      t.moveTo(e + a, i),
      t.lineTo(e + n - a, i),
      t.quadraticCurveTo(e + n, i, e + n, i + a),
      t.lineTo(e + n, i + o - a),
      t.quadraticCurveTo(e + n, i + o, e + n - a, i + o),
      t.lineTo(e + a, i + o),
      t.quadraticCurveTo(e, i + o, e, i + o - a),
      t.lineTo(e, i + a),
      t.quadraticCurveTo(e, i, e + a, i),
      t.closePath(),
  s && t.stroke(),
  r && t.fill()
}
function drawText(t, e, i, n, o, a, r, s, h) {
  if (null == n)
    return "";
  n.indexOf(enter) < 0 && (n += enter),
      o = null == o ? 12 : parseInt(o),
      t.font = o + "px Microsoft Sans Serif";
  var l = getTextRect(t, e, i, n, o, h = h || 600);
  t.lineWidth = 2,
      t.fillStyle = s || "rgba(255, 255, 255, 0.9)",
      t.strokeStyle = r || "rgba(0, 0, 0, 0.6)",
      this.roundRect(t, l.x, l.y, l.width, l.height, 4, !0),
      t.fillStyle = null == a ? "rgba(0, 0, 0, 0.9)" : colorRgb(a, "0.9"),
      t.wrapText(n, e + 5, i + 5 + o, h, o)
}
function pointInRect(t, e, i) {
  return !!e && (i = i || 0,
  e.x - i <= t.x && t.x <= e.x + e.width + i && e.y - i <= t.y && t.y <= e.y + e.height + i)
}
function getRect(t, e) {
  var i = Math.abs(e.x - t.x)
      , n = Math.abs(e.y - t.y)
      , o = Math.min(e.x, t.x)
      , a = Math.min(e.y, t.y);
  return new Rect(o,a,i,n)
}
function getTextSplitChar(t) {
  return 0 <= t.indexOf(" ") ? " " : ""
}
function getTextRect(t, e, i, n, o, a) {
  if (null == n)
    return "";
  n.indexOf(enter) < 0 && (n += enter),
      o = null == o ? 12 : parseInt(o),
      t.font = o + "px Microsoft Sans Serif";
  var r, s, h, l = 0;
  a = a || 600;
  var d = n.split(enter);
  s = (d.length - .5) * o + 10;
  for (var c = 0; c < d.length; c++) {
    if (a < (r = t.measureText(d[c]).width)) {
      r = 0,
          h = getTextSplitChar(d[c]);
      for (var u = d[c].split(h), g = "", f = 0; f < u.length; f++) {
        var p = g + u[f] + h
            , v = t.measureText(p).width;
        a < v && 0 < f ? (g = u[f] + h,
        t.measureText(g).width > a && r < v && (r = v),
            s += o) : (g = p,
        r < v && (r = v))
      }
    }
    l < r && (l = r)
  }
  return new Rect(e,i,l += 10,s)
}
function drawArrow(t, e, i, n, o, a, r, s, h) {
  "use strict";
  "string" == typeof e && (e = parseInt(e)),
  "string" == typeof i && (i = parseInt(i)),
  "string" == typeof n && (n = parseInt(n)),
  "string" == typeof o && (o = parseInt(o)),
      a = void 0 !== a ? a : 3,
      r = void 0 !== r ? r : 1,
      s = void 0 !== s ? s : Math.PI / 8,
      h = void 0 !== h ? h : 10;
  var l, d, c, u, g = "function" != typeof a ? drawHead : a, f = Math.sqrt((n - e) * (n - e) + (o - i) * (o - i)), p = (f - h / 3) / f;
  d = 1 & r ? (l = Math.round(e + (n - e) * p),
      Math.round(i + (o - i) * p)) : (l = n,
      o),
      u = 2 & r ? (c = e + (n - e) * (1 - p),
      i + (o - i) * (1 - p)) : (c = e,
          i),
      t.beginPath(),
      t.moveTo(c, u),
      t.lineTo(l, d),
      t.stroke();
  var v = Math.atan2(o - i, n - e)
      , m = Math.abs(h / Math.cos(s));
  if (1 & r) {
    var w = v + Math.PI + s
        , y = n + Math.cos(w) * m
        , P = o + Math.sin(w) * m
        , S = v + Math.PI - s;
    g(t, y, P, n, o, n + Math.cos(S) * m, o + Math.sin(S) * m, a)
  }
  if (2 & r) {
    w = v + s,
        S = v - s;
    g(t, y = e + Math.cos(w) * m, P = i + Math.sin(w) * m, e, i, e + Math.cos(S) * m, i + Math.sin(S) * m, a)
  }
}
function drawHead(t, e, i, n, o, a, r, s) {
  "use strict";
  "string" == typeof e && (e = parseInt(e)),
  "string" == typeof i && (i = parseInt(i)),
  "string" == typeof n && (n = parseInt(n)),
  "string" == typeof o && (o = parseInt(o)),
  "string" == typeof a && (a = parseInt(a)),
  "string" == typeof r && (r = parseInt(r));
  Math.PI;
  switch (t.save(),
      t.beginPath(),
      t.moveTo(e, i),
      t.lineTo(n, o),
      t.lineTo(a, r),
      s) {
    case 0:
      var h = Math.sqrt((a - e) * (a - e) + (r - i) * (r - i));
      t.arcTo(n, o, e, i, .55 * h),
          t.fill();
      break;
    case 1:
      t.beginPath(),
          t.moveTo(e, i),
          t.lineTo(n, o),
          t.lineTo(a, r),
          t.lineTo(e, i),
          t.fill();
      break;
    case 2:
      t.stroke();
      break;
    case 3:
      var l = (e + n + a) / 3
          , d = (i + o + r) / 3;
      t.quadraticCurveTo(l, d, e, i),
          t.fill();
      break;
    case 4:
      var c, u, g, f;
      if (a == e)
        g = c = (n + e) / 2,
            u = o + (h = r - i) / 5,
            f = o - h / 5;
      else {
        var p = ((e + a) / 2 + n) / 2
            , v = ((i + r) / 2 + o) / 2
            , m = (r - i) / (a - e)
            , w = (h = Math.sqrt((a - e) * (a - e) + (r - i) * (r - i))) / (2 * Math.sqrt(m * m + 1)) / 5
            , y = m * w;
        c = p - w,
            u = v - y,
            g = p + w,
            f = v + y
      }
      t.bezierCurveTo(c, u, g, f, e, i),
          t.fill()
  }
  t.restore()
}
function scaleImage(t, e, i) {
  return e < t ? new Point(i,i * e / t) : new Point(i * t / e,i)
}
function intersectRect(t, e) {
  return !(e.left > t.right || e.right < t.left || e.top > t.bottom || e.bottom < t.top)
}
function cavToImagePoint(t, e, i, n, o, a) {
  var r = new Point(t.x,t.y);
  return a && (r = rotatePoint(r, n, o)),
  i && (r.x -= i.x,
      r.y -= i.y),
  e && (r.x /= e,
      r.y /= e),
      r
}
function imgToCanvasPoint(t, e, i, n, o, a) {
  var r = new Point(t.x,t.y);
  return e && (r.x *= e,
      r.y *= e),
  i && (r.x += i.x,
      r.y += i.y),
  a && (r = rotatePoint(r, n, o)),
      r
}
function checkPoints(t) {
  if (!t || 0 == t.length)
    return !1;
  for (var e = 0; e < t.length; e++)
    if (null == t[e].x || null == t[e].y)
      return !1;
  return !0
}
function isControlVisible(t) {
  return t.is(":visible")
}
String.prototype.replaceAll = function(t, e) {
  return this.replace(new RegExp(t,"gm"), e)
}
    ,
null == window.JSON && (window.JSON = {}),
    JSON.stringify = JSON.stringify || function(t) {
      var e = typeof t;
      if ("object" != e || null === t)
        return "string" == e && (t = '"' + t + '"'),
            String(t);
      var i, n, o = [], a = t && t.constructor == Array;
      for (i in t)
        "string" == (e = typeof (n = t[i])) ? n = '"' + n + '"' : "object" == e && null !== n && (n = JSON.stringify(n)),
            o.push((a ? "" : '"' + i + '":') + String(n));
      return (a ? "[" : "{") + String(o) + (a ? "]" : "}")
    }
    ,
    Date.prototype.yyyymmdd = function() {
      var t = this.getFullYear().toString()
          , e = (this.getMonth() + 1).toString()
          , i = this.getDate().toString();
      return t + (1 < e.length ? e : "0" + e) + (1 < i ? i : "0" + i)
    }
    ,
    (Point = function(t, e) {
          this.x = "number" == typeof t ? t : 1 * t,
              this.y = "number" == typeof e ? e : 1 * e
        }
    ).prototype.isPrototypeOf = function() {
      return "Point"
    }
    ,
    Rect = function(t, e, i, n) {
      this.x = "number" == typeof t ? t : 1 * t,
          this.y = "number" == typeof e ? e : 1 * e,
          this.width = "number" == typeof i ? i : 1 * i,
          this.height = "number" == typeof n ? n : 1 * n,
          this.left = this.x,
          this.top = this.y,
          this.right = this.x + this.width,
          this.bottom = this.y + this.height
    }
    ,
    ActiveMove = {
      None: "None",
      StartMove: "StartMove",
      EndMove: "EndMove",
      LeftTopMove: "LeftTopMove",
      RightTopMove: "RightTopMove",
      LeftBottomMove: "LeftBottomMove",
      RightBottomMove: "RightBottomMove",
      TopMiddleMove: "TopMiddleMove",
      BottomMiddleMove: "BottomMiddleMove",
      LeftMiddleMove: "LeftMiddleMove",
      RightMiddleMove: "RightMiddleMove",
      PointMove: "PointMove",
      ShapeMove: "ShapeMove"
    },
    ShapeDefaultConfig = ShapeDefaultConfig || {
      defaultColor: "#0000ff",
      lineWidth: 2,
      thumbRadius: 5,
      thumbMoveRadius: 8,
      thumbHitRadius: $.support.touch ? 20 : 5,
      thumbHitMoveRadius: $.support.touch ? 40 : 8,
      name: "",
      description: "",
      isFill: !1,
      isLineDash: !1
    },
    function() {
      var t = (Shape = function(t, e, i, n, o) {
            this.startPoint = n,
                this.endPoint = o,
                this.originalWidth,
                this.originalHeight,
                this.rsPoint,
                this.rePoint,
                this.movePoint,
                this.drawMovePoint,
                this.calibration = 0,
                this.width = ShapeDefaultConfig.lineWidth,
                this.color = ShapeDefaultConfig.defaultColor,
                this.imageId,
                this.guid = null,
                this.name = ShapeDefaultConfig.name,
                this.description = ShapeDefaultConfig.description,
                this.showDescription = !0,
                this.scale = 1,
                this.type,
                this.region,
                this.fontUnderLine = !1,
                this.fontSize = 12,
                this.fontFamily = "Microsoft Sans Serif",
                this.fontItalic = !1,
                this.fontBold = !1,
                this.visible = !0,
                this.measurement = !1,
                this.measureinfo,
                this.measureinfoMaxWidth = 500,
                this.radius = 0,
                this.arcLength = 0,
                this.angle = 0,
                this.points = new Array,
                this.isEndDrawing = !1,
                this.shapeCanvas = e,
                this.drawCanvas = i,
                this.txtElmt,
                this.inpElmt,
                this.container = t,
                this.isSelected = !1,
                this.cavScale,
                this.cavOffset,
                this.moveOffset,
                this.activeMove = ActiveMove.None,
                this.isMeasurementChanged = !0,
                this.isDrawStart = !1,
                this.status = 0,
                this.editable = !0,
                this.cavRect,
                this.rotateRadian,
                this.rotateOriginPoint,
                this.isLocked = !1,
                this.externalData,
                this.saveData
          }
      ).prototype;
      t.drawThumb = function(t) {
        if (null != t) {
          var e = this.getContext();
          e.beginPath(),
              e.lineWidth = 2,
              e.arc(t.x, t.y, ShapeDefaultConfig.thumbRadius, 0, 2 * Math.PI, !1),
              e.fillStyle = "rgba(255, 255, 255, 0.6)",
              e.fill(),
              e.strokeStyle = "#666465",
              e.stroke()
        }
      }
          ,
          t.drawMoveThumb = function(t) {
            if (null != t) {
              var e = this.getContext();
              e.beginPath(),
                  e.lineWidth = 2,
                  e.arc(t.x, t.y, ShapeDefaultConfig.thumbMoveRadius, 0, 2 * Math.PI, !1),
                  e.fillStyle = "rgba(255, 255, 255, 0.6)",
                  e.fill(),
                  e.strokeStyle = "#666465",
                  e.stroke()
            }
          }
          ,
          t.highlight = function(t) {
            var e = this.getContext();
            t && this.isSelected ? (e.shadowBlur = 10,
                e.shadowColor = this.color) : e.shadowBlur = 0
          }
          ,
          t.getContext = function() {
            return this.isSelected ? this.drawCanvas.getContext("2d") : this.shapeCanvas.getContext("2d")
          }
          ,
          t.drawStart = function(t) {
            this.startPoint = t,
                this.endPoint = new Point(t.x,t.y),
                this.drawThumb(this.toCanvasPoint(t, !1)),
                this.isDrawStart = !0
          }
          ,
          t.drawMove = function(t) {
            this.endPoint = t,
                this.isDrawStart = !1
          }
          ,
          t.drawDown = function(t) {}
          ,
          t.drawUp = function(t) {
            null != t && (this.endPoint = t),
            this.startPoint.x != this.endPoint.x && this.startPoint.y != this.endPoint.y && (this.rsPoint && this.rsPoint && this.rsPoint.x == this.rePoint.x && this.rsPoint.y == this.rePoint.y && (this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
                this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint)),
                this.isEndDrawing = !0)
          }
          ,
          t.drawEnd = function(t) {}
          ,
          t.draw = function() {}
          ,
          t.refresh = function(t, e, i, n) {
            this.cavScale = t,
                this.cavOffset = e,
                this.rotateRadian = i,
                this.rotateOriginPoint = n
          }
          ,
          t.createElmt = function() {
            null == this.txtElmt && (this.txtElmt = document.createElement("div"),
                this.container.appendChild(this.txtElmt),
                registerMeasurementTxtCSS(this.txtElmt))
          }
          ,
          t.showMeasurement = function(t, e) {
            if (this.type == AnnotationType.Remark || this.type == AnnotationType.Position) {
              if (!this.showDescription)
                return;
              if (this.isSelected)
                return
            } else if (!this.measurement || !SlideViewerConfig.enableAnnotation || !this.editable)
              return;
            var i;
            null != this.measureinfo && !this.isMeasurementChanged || (this.measureinfo = this.calcMeasurementInfo()),
            this.showDescription && this.type != AnnotationType.Remark && this.type != AnnotationType.Position && (i = Measurement.Description + replaceHtmlEnter(this.description)),
                this.drawMeasurement(this.movePoint.x + ShapeDefaultConfig.thumbMoveRadius, this.movePoint.y + ShapeDefaultConfig.thumbMoveRadius, this.measureinfo, i, t, e),
            this.isMeasurementChanged && (this.isMeasurementChanged = !1)
          }
          ,
          t.drawMeasurement = function(t, e, i, n, o, a, r, s) {
            var h = i;
            n && (h = appendLine(h, n)),
                this.drawText(t, e, h, o, a, r, s)
          }
          ,
          t.drawText = function(t, e, i, n, o, a, r) {
            this.type != AnnotationType.Remark && this.type != AnnotationType.Position || (n = this.fontSize,
                o = this.color),
                drawText(this.getContext(), t, e, i, n, o, a, r, this.measureinfoMaxWidth)
          }
          ,
          t.calcMeasurementInfo = function() {}
          ,
          t.active = function() {}
          ,
          t.shapeMovePosition = function() {}
          ,
          t.isHitMe = function(t) {}
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible || !this.rsPoint)
              return !1;
            var i, n, o, a;
            i = Math.min(this.rsPoint.x, this.rePoint.x),
                o = Math.max(this.rsPoint.x, this.rePoint.x),
                n = Math.min(this.rsPoint.y, this.rePoint.y),
                a = Math.max(this.rsPoint.y, this.rePoint.y);
            var r = null != e ? e : this.width / 2;
            return i - r <= t.x && t.x <= o + r && n - r <= t.y && t.y <= a + r ? this.isSelected = !0 : this.isSelected = !1,
                this.cavRect = new Rect(i,n,o - i,a - n),
                this.isSelected
          }
          ,
          t.resetPoint = function(t, e, i, n, o) {
            return imgToCanvasPoint(t, e, i, n, o, this.isEndDrawing)
          }
          ,
          t.resetDefaultColor = function() {
            defaultColor = this.color
          }
          ,
          t.clickInThumb = function(t, e) {
            return clickInCircleResult(ShapeDefaultConfig.thumbHitRadius, e, t, this.width)
          }
          ,
          t.clickInMoveThumb = function(t, e) {
            return clickInCircleResult(ShapeDefaultConfig.thumbHitMoveRadius, e, t, this.width)
          }
          ,
          t.addClickResult = function(t, e, i, n, o) {
            var a = this.clickInThumb(e, i);
            a.isIn && (a.activeMove = n,
                a.pIndex = o,
                t.push(a))
          }
          ,
          t.setNearestMove = function(t) {
            if (t.length <= 0)
              this.activeMove = ActiveMove.None;
            else if (1 == t.length)
              this.activeMove = t[0].activeMove,
                  this.pIndex = t[0].pIndex;
            else {
              for (var e = 0, i = 0, n = 0; n < t.length; n++)
                0 == n ? i = t[n].length : t[n].length < i && (i = t[n].length,
                    e = n);
              this.activeMove = t[e].activeMove,
                  this.pIndex = t[e].pIndex
            }
          }
          ,
          t.resetActiveMovePoint = function(t, e, i, n) {
            if (null == i) {
              if (null == this.moveOffset)
                return;
              t.x += this.moveOffset.x,
                  t.y += this.moveOffset.y
            } else
              t.x += i.x,
                  t.y += i.y;
            null != n && !n || (t = rotatePoint(t, -this.rotateRadian, this.rotateOriginPoint)),
                e.x = (t.x - this.cavOffset.x) / this.cavScale,
                e.y = (t.y - this.cavOffset.y) / this.cavScale
          }
          ,
          t.resetStartPoint = function(t) {
            this.rsPoint = t,
                this.rsPoint = rotatePoint(this.rsPoint, -this.rotateRadian, this.rotateOriginPoint),
                this.startPoint = this.toImagePoint(t)
          }
          ,
          t.resetEndPoint = function(t) {
            this.rePoint = t,
                this.rePoint = rotatePoint(this.rePoint, -this.rotateRadian, this.rotateOriginPoint),
                this.endPoint = this.toImagePoint(t)
          }
          ,
          t.toImagePoint = function(t) {
            return cavToImagePoint(t, this.cavScale, this.cavOffset)
          }
          ,
          t.toCanvasPoint = function(t, e) {
            return imgToCanvasPoint(t, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint, null == e || e)
          }
          ,
          t.fadeOutDraw = function() {
            var t = this.getContext();
            t.save();
            var e = this.alpha ? this.alpha : 1;
            e < 0 && (e = 0),
                this.isSelected = !1,
                t.globalAlpha = e,
                this.draw(),
                t.restore()
          }
          ,
          t.fadeOut = function() {
            var e = this.getContext();
            e.save();
            var i = e.globalAlpha
                , n = .02
                , o = this;
            !function t() {
              o.isSelected = !1,
                  e.globalAlpha = i,
                  o.draw(),
              0 <= (i -= n) && requestAnimationFrame(t)
            }(),
                e.restore()
          }
          ,
          t.validate = function(t, e, i) {
            return !0
          }
    }(),
    function() {
      (Line = function(t, e, i, n, o) {
            Shape.apply(this, [t, e, i, n, o])
          }
      ).prototype = new Shape;
      var t = Line.prototype;
      t.draw = function() {
        var t = this.getContext();
        if (t.beginPath(),
            this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.shapeMovePosition(),
            this.movePoint = new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2),
            this.highlight(!0),
        "Ruler" == this.lineType) {
          var e = this.rePoint.y
              , i = this.rePoint.x
              , n = this.rsPoint.y
              , o = this.rsPoint.x
              , a = Math.atan2(e - n, i - o);
          t.moveTo(o - 6 * Math.cos(a - Math.PI / 2), n - 6 * Math.sin(a - Math.PI / 2)),
              t.lineTo(o - 6 * Math.cos(a + Math.PI / 2), n - 6 * Math.sin(a + Math.PI / 2)),
              t.moveTo(o, n),
              t.lineTo(i, e),
              t.moveTo(i - 6 * Math.cos(a - Math.PI / 2), e - 6 * Math.sin(a - Math.PI / 2)),
              t.lineTo(i - 6 * Math.cos(a + Math.PI / 2), e - 6 * Math.sin(a + Math.PI / 2))
        } else
          t.moveTo(this.rsPoint.x, this.rsPoint.y),
              t.lineTo(this.rePoint.x, this.rePoint.y);
        t.lineWidth = this.width,
            t.strokeStyle = this.color,
            t.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.shapeMovePosition = function() {
            if (this.activeMove != ActiveMove.None) {
              switch (this.activeMove) {
                case ActiveMove.StartMove:
                  this.resetActiveMovePoint(this.rsPoint, this.startPoint);
                  break;
                case ActiveMove.EndMove:
                  this.resetActiveMovePoint(this.rePoint, this.endPoint);
                  break;
                case ActiveMove.ShapeMove:
                  this.resetActiveMovePoint(this.rsPoint, this.startPoint),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint)
              }
              this.activeMove != ActiveMove.ShapeMove && (this.isMeasurementChanged = !0)
            }
          }
          ,
          t.calcMeasurementInfo = function() {
            return appendLine(Measurement.Length, floatRound(CalcRadius(this.startPoint, this.endPoint) * this.calibration) + Measurement.Unit)
          }
          ,
          t.active = function() {
            !this.isEndDrawing && this.isDrawStart || this.isSelected && (this.drawThumb(this.rsPoint),
                this.drawThumb(this.rePoint),
                this.drawMoveThumb(this.movePoint))
          }
          ,
          t.isHitMe = function(t) {
            if (this.isSelected) {
              var e = new Array;
              this.addClickResult(e, t, this.rePoint, ActiveMove.EndMove),
                  this.addClickResult(e, t, this.rsPoint, ActiveMove.StartMove),
                  this.addClickResult(e, t, this.movePoint, ActiveMove.ShapeMove),
                  this.setNearestMove(e)
            }
            return this.activeMove != ActiveMove.None
          }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible)
              return !1;
            if (this.cavRect = getRect(this.rsPoint, this.rePoint),
            this.activeMove != ActiveMove.None)
              return !0;
            var i = clickOnLine(this.rsPoint, this.rePoint, t, null != e ? e : this.width);
            return this.isSelected = i
          }
    }(),
    (Arrow = function(t, e, i, n, o) {
          Line.apply(this, [t, e, i, n, o]),
              this.which = 2
        }
    ).prototype = new Line,
    Arrow.prototype.draw = function() {
      var t = this.getContext();
      t.beginPath(),
          this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
          this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
          this.shapeMovePosition(),
          this.movePoint = new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2),
          this.highlight(!0),
          t.lineWidth = this.width,
          t.strokeStyle = t.fillStyle = this.color,
          drawArrow(t, this.rsPoint.x, this.rsPoint.y, this.rePoint.x, this.rePoint.y, 2, this.which, Math.PI / 6, 3 * parseInt(this.width)),
          this.highlight(!1),
          this.active(),
          this.showMeasurement()
    }
    ,
    function() {
      (Rectangle = function(t, e, i, n, o) {
            Shape.apply(this, [t, e, i, n, o]),
                this.leftTopPoint,
                this.leftBottomPoint,
                this.rightTopPoint,
                this.rightBottomPoint,
                this.topMiddlePoint,
                this.bottomMiddlePoint,
                this.leftMiddlePoint,
                this.rightMiddlePoint,
                this.selfRotateRadian = 0
          }
      ).prototype = new Shape;
      var t = Rectangle.prototype;
      t.draw = function() {
        console.log('2222')
        var t = this.getContext();
        t.beginPath(),
            this.rsPoint = this.toCanvasPoint(this.startPoint, !1),
            this.rePoint = this.toCanvasPoint(this.endPoint, !1),
        this.isEndDrawing || (this.rsPoint = rotatePoint(this.rsPoint, -this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = rotatePoint(this.rePoint, -this.rotateRadian, this.rotateOriginPoint)),
            this.shapeMovePosition();
        var e = Math.abs(this.rsPoint.x - this.rePoint.x)
            , i = Math.abs(this.rsPoint.y - this.rePoint.y)
            , n = Math.min(this.rsPoint.x, this.rePoint.x)
            , o = Math.min(this.rsPoint.y, this.rePoint.y);
        this.leftTopPoint = rotatePoint(new Point(this.rsPoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftBottomPoint = rotatePoint(new Point(this.rsPoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightTopPoint = rotatePoint(new Point(this.rePoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightBottomPoint = rotatePoint(new Point(this.rePoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.topMiddlePoint = rotatePoint(new Point(n + e / 2,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.bottomMiddlePoint = rotatePoint(new Point(n + e / 2,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftMiddlePoint = rotatePoint(new Point(this.rsPoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rightMiddlePoint = rotatePoint(new Point(this.rePoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.movePoint = rotatePoint(new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rsPoint = this.leftTopPoint,
            this.rePoint = this.rightBottomPoint,
            this.highlight(!0),
            t.strokeStyle = this.color,
            t.lineWidth = this.width,
            t.moveTo(this.leftTopPoint.x, this.leftTopPoint.y),
            t.lineTo(this.rightTopPoint.x, this.rightTopPoint.y),
            t.lineTo(this.rightBottomPoint.x, this.rightBottomPoint.y),
            t.lineTo(this.leftBottomPoint.x, this.leftBottomPoint.y),
            t.lineTo(this.leftTopPoint.x, this.leftTopPoint.y),
            t.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible)
              return !1;
            if (this.type == AnnotationType.Remark || this.type == AnnotationType.Position)
              return !1;
            var i, n, o, a;
            i = Math.min(Math.min(this.leftTopPoint.x, this.leftBottomPoint.x), Math.min(this.rightTopPoint.x, this.rightBottomPoint.x)),
                o = Math.max(Math.max(this.leftTopPoint.x, this.leftBottomPoint.x), Math.max(this.rightTopPoint.x, this.rightBottomPoint.x)),
                n = Math.min(Math.min(this.leftTopPoint.y, this.leftBottomPoint.y), Math.min(this.rightTopPoint.y, this.rightBottomPoint.y)),
                a = Math.max(Math.max(this.leftTopPoint.y, this.leftBottomPoint.y), Math.max(this.rightTopPoint.y, this.rightBottomPoint.y));
            var r = null != e ? e : this.width / 2;
            return i - r <= t.x && t.x <= o + r && n - r <= t.y && t.y <= a + r ? this.isSelected = !0 : this.isSelected = !1,
                this.cavRect = new Rect(i,n,o - i,a - n),
                this.isSelected
          }
          ,
          t.resize = function(t, e) {
            this.originalWidth = t,
                this.originalHeight = e;
            var i = 0
                , n = 0;
            this.endPoint.x > this.startPoint.x && this.endPoint.y > this.startPoint.y ? (i = this.startPoint.x,
                n = this.startPoint.y) : this.endPoint.x > this.startPoint.x && this.endPoint.y < this.startPoint.y ? (i = this.startPoint.x,
                n = this.endPoint.y) : this.endPoint.x < this.startPoint.x && this.endPoint.y > this.startPoint.y ? (i = this.endPoint.x,
                n = this.startPoint.y) : this.endPoint.x < this.startPoint.x && this.endPoint.y < this.startPoint.y && (i = this.endPoint.x,
                n = this.endPoint.y),
                this.startPoint = new Point(i,n),
                this.endPoint = new Point(i + t / this.calibration,n + e / this.calibration),
                this.isMeasurementChanged = !0
          }
          ,
          t.calcMeasurementInfo = function() {
            var t = Math.abs(this.startPoint.x - this.endPoint.x)
                , e = Math.abs(this.startPoint.y - this.endPoint.y);
            this.originalWidth = floatRound(t * this.calibration),
                this.originalHeight = floatRound(e * this.calibration);
            var i = "";
            return i = appendLine(i = appendLine(i = appendLine(i = appendLine(i, Measurement.Width + floatRound(t * this.calibration) + Measurement.Unit), Measurement.Height + floatRound(e * this.calibration) + Measurement.Unit), Measurement.Area + floatRound(t * this.calibration * e * this.calibration) + Measurement.AreaUnit), Measurement.Perimeter + floatRound((2 * e + 2 * t) * this.calibration) + Measurement.Unit)
          }
          ,
          t.active = function() {
            !this.isEndDrawing && this.isDrawStart || this.isSelected && (this.drawThumb(this.leftTopPoint),
                this.drawThumb(this.leftBottomPoint),
                this.drawThumb(this.rightTopPoint),
                this.drawThumb(this.rightBottomPoint),
                this.drawThumb(this.topMiddlePoint),
                this.drawThumb(this.bottomMiddlePoint),
                this.drawThumb(this.leftMiddlePoint),
                this.drawThumb(this.rightMiddlePoint),
                this.drawMoveThumb(this.movePoint))
          }
          ,
          t.shapeMovePosition = function() {
            if (null != this.activeMove && this.activeMove != ActiveMove.None && null != this.moveOffset) {
              var t;
              switch (this.moveOffset = function(t, e) {
                if (!t)
                  return e;
                var i = e.x * Math.cos(t) - Math.sin(t) * e.y
                    , n = e.y * Math.cos(t) + Math.sin(t) * e.x;
                return new SeadragonPoint(i,n)
              }(this.rotateRadian, this.moveOffset),
                  this.activeMove) {
                case ActiveMove.LeftTopMove:
                  this.resetActiveMovePoint(this.rsPoint, this.startPoint, null, !1);
                  break;
                case ActiveMove.RightTopMove:
                  t = new Point(0,this.moveOffset.y),
                      this.resetActiveMovePoint(this.rsPoint, this.startPoint, t, !1),
                      t = new Point(this.moveOffset.x,0),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint, t, !1);
                  break;
                case ActiveMove.LeftBottomMove:
                  t = new Point(this.moveOffset.x,0),
                      this.resetActiveMovePoint(this.rsPoint, this.startPoint, t, !1),
                      t = new Point(0,this.moveOffset.y),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint, t, !1);
                  break;
                case ActiveMove.RightBottomMove:
                  this.resetActiveMovePoint(this.rePoint, this.endPoint, null, !1);
                  break;
                case ActiveMove.TopMiddleMove:
                  t = new Point(0,this.moveOffset.y),
                      this.resetActiveMovePoint(this.rsPoint, this.startPoint, t, !1);
                  break;
                case ActiveMove.BottomMiddleMove:
                  t = new Point(0,this.moveOffset.y),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint, t, !1);
                  break;
                case ActiveMove.LeftMiddleMove:
                  t = new Point(this.moveOffset.x,0),
                      this.resetActiveMovePoint(this.rsPoint, this.startPoint, t, !1);
                  break;
                case ActiveMove.RightMiddleMove:
                  t = new Point(this.moveOffset.x,0),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint, t, !1);
                  break;
                case ActiveMove.ShapeMove:
                  this.resetActiveMovePoint(this.rsPoint, this.startPoint, null, !1),
                      this.resetActiveMovePoint(this.rePoint, this.endPoint, null, !1)
              }
              this.activeMove != ActiveMove.ShapeMove && (this.isMeasurementChanged = !0)
            }
          }
          ,
          t.getActiveMove = function(t) {
            var e = new Array;
            this.addClickResult(e, t, this.leftTopPoint, ActiveMove.LeftTopMove),
                this.addClickResult(e, t, this.leftBottomPoint, ActiveMove.LeftBottomMove),
                this.addClickResult(e, t, this.rightTopPoint, ActiveMove.RightTopMove),
                this.addClickResult(e, t, this.rightBottomPoint, ActiveMove.RightBottomMove),
                this.addClickResult(e, t, this.topMiddlePoint, ActiveMove.TopMiddleMove),
                this.addClickResult(e, t, this.bottomMiddlePoint, ActiveMove.BottomMiddleMove),
                this.addClickResult(e, t, this.leftMiddlePoint, ActiveMove.LeftMiddleMove),
                this.addClickResult(e, t, this.rightMiddlePoint, ActiveMove.RightMiddleMove),
                this.addClickResult(e, t, this.movePoint, ActiveMove.ShapeMove),
                this.setNearestMove(e)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
    }(),
    function() {
      (Ellipse = function(t, e, i, n, o) {
            Rectangle.apply(this, [t, e, i, n, o])
          }
      ).prototype = new Rectangle;
      var t = Ellipse.prototype;
      t.draw = function() {
        var t = this.getContext();
        t.beginPath(),
            this.rsPoint = this.toCanvasPoint(this.startPoint, !1),
            this.rePoint = this.toCanvasPoint(this.endPoint, !1),
        this.isEndDrawing || (this.rsPoint = rotatePoint(this.rsPoint, -this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = rotatePoint(this.rePoint, -this.rotateRadian, this.rotateOriginPoint)),
            this.shapeMovePosition();
        var e = Math.abs(this.rsPoint.x - this.rePoint.x)
            , i = Math.abs(this.rsPoint.y - this.rePoint.y)
            , n = Math.min(this.rsPoint.x, this.rePoint.x)
            , o = Math.min(this.rsPoint.y, this.rePoint.y);
        this.leftTopPoint = rotatePoint(new Point(this.rsPoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftBottomPoint = rotatePoint(new Point(this.rsPoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightTopPoint = rotatePoint(new Point(this.rePoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightBottomPoint = rotatePoint(new Point(this.rePoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.topMiddlePoint = rotatePoint(new Point(n + e / 2,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.bottomMiddlePoint = rotatePoint(new Point(n + e / 2,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftMiddlePoint = rotatePoint(new Point(this.rsPoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rightMiddlePoint = rotatePoint(new Point(this.rePoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.movePoint = rotatePoint(new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rsPoint = this.leftTopPoint,
            this.rePoint = this.rightBottomPoint,
            this.highlight(!0),
            t.lineWidth = this.width,
            t.strokeStyle = this.color,
            this.rotateRadian ? function(t, e, i, n, o, a) {
              a = a || 0;
              var r = 0
                  , s = n + e * Math.cos(a)
                  , h = o - e * Math.sin(a)
                  , l = s
                  , d = h;
              for (t.beginPath(),
                       r = 0; r <= 6.3; r += .1)
                s = l,
                    h = d,
                    l = n + e * Math.cos(r) * Math.cos(a) - i * Math.sin(r) * Math.sin(a),
                    d = o - e * Math.cos(r) * Math.sin(a) - i * Math.sin(r) * Math.cos(a),
                    t.moveTo(s, h),
                    t.lineTo(l, d);
              t.stroke(),
                  t.closePath()
            }(t, e / 2, i / 2, this.movePoint.x, this.movePoint.y, this.rotateRadian) : function(t, e, i, n, o) {
              var a = n / 2 * .5522848
                  , r = o / 2 * .5522848
                  , s = e + n
                  , h = i + o
                  , l = e + n / 2
                  , d = i + o / 2;
              t.beginPath(),
                  t.moveTo(e, d),
                  t.bezierCurveTo(e, d - r, l - a, i, l, i),
                  t.bezierCurveTo(l + a, i, s, d - r, s, d),
                  t.bezierCurveTo(s, d + r, l + a, h, l, h),
                  t.bezierCurveTo(l - a, h, e, d + r, e, d),
                  t.stroke()
            }(t, n, o, e, i),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t, e = Math.abs(this.startPoint.x - this.endPoint.x), i = Math.abs(this.startPoint.y - this.endPoint.y), n = e / 2 * this.calibration, o = i / 2 * this.calibration, a = Math.abs(n - o) / (n + o);
            a *= a,
                t = isNaN(a) ? 0 : Math.PI * (n + o) * (135168 - 85760 * a - 5568 * a * a + 3867 * a * a * a) / (135168 - 119552 * a + 22208 * a * a - 345 * a * a * a);
            var r = "";
            return r = appendLine(r = appendLine(r = appendLine(r = appendLine(r, Measurement.Majorhalfaxis + floatRound(Math.max(n, o)) + Measurement.Unit), Measurement.Minorhalfaxis + floatRound(Math.min(n, o)) + Measurement.Unit), Measurement.Area + floatRound(Math.abs(Math.PI * (e * this.calibration) * (i * this.calibration) / 4)) + Measurement.AreaUnit), Measurement.Perimeter + floatRound(t) + Measurement.Unit)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
    }(),
    function() {
      (Region = function(t, e, i, n, o) {
            Rectangle.apply(this, [t, e, i, n, o]),
                this.name = "",
                this.status = -1,
                this.isDemo = !0,
                this.isFill = ShapeDefaultConfig.isFill,
                this.isLineDash = ShapeDefaultConfig.isLineDash
          }
      ).prototype = new Rectangle;
      var t = Region.prototype;
      t.draw = function() {
        var t = this.getContext();
        t.beginPath(),
            this.rsPoint = this.toCanvasPoint(this.startPoint, !1),
            this.rePoint = this.toCanvasPoint(this.endPoint, !1),
        this.isEndDrawing || (this.rsPoint = rotatePoint(this.rsPoint, -this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = rotatePoint(this.rePoint, -this.rotateRadian, this.rotateOriginPoint)),
            this.shapeMovePosition();
        var e = Math.abs(this.rsPoint.x - this.rePoint.x)
            , i = Math.abs(this.rsPoint.y - this.rePoint.y)
            , n = Math.min(this.rsPoint.x, this.rePoint.x)
            , o = Math.min(this.rsPoint.y, this.rePoint.y);
        this.leftTopPoint = rotatePoint(new Point(this.rsPoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftBottomPoint = rotatePoint(new Point(this.rsPoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightTopPoint = rotatePoint(new Point(this.rePoint.x,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.rightBottomPoint = rotatePoint(new Point(this.rePoint.x,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.topMiddlePoint = rotatePoint(new Point(n + e / 2,this.rsPoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.bottomMiddlePoint = rotatePoint(new Point(n + e / 2,this.rePoint.y), this.rotateRadian, this.rotateOriginPoint),
            this.leftMiddlePoint = rotatePoint(new Point(this.rsPoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rightMiddlePoint = rotatePoint(new Point(this.rePoint.x,o + i / 2), this.rotateRadian, this.rotateOriginPoint),
            this.movePoint = rotatePoint(new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2), this.rotateRadian, this.rotateOriginPoint),
            this.rsPoint = this.leftTopPoint,
            this.rePoint = this.rightBottomPoint,
            t.strokeStyle = this.color,
            t.lineWidth = this.width,
            t.moveTo(this.leftTopPoint.x, this.leftTopPoint.y),
            t.lineTo(this.rightTopPoint.x, this.rightTopPoint.y),
            t.lineTo(this.rightBottomPoint.x, this.rightBottomPoint.y),
            t.lineTo(this.leftBottomPoint.x, this.leftBottomPoint.y),
            t.lineTo(this.leftTopPoint.x, this.leftTopPoint.y),
        this.isFill && (t.fillStyle = colorRgb(this.color, .2),
            t.fill()),
        this.isLineDash && t.setLineDash([3, 3]),
            this.highlight(!0),
            t.stroke(),
            this.highlight(!1),
        this.isLineDash && t.setLineDash([]),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = Math.abs(this.startPoint.x - this.endPoint.x)
                , e = Math.abs(this.startPoint.y - this.endPoint.y);
            this.originalWidth = floatRound(t * this.calibration),
                this.originalHeight = floatRound(e * this.calibration);
            var i = "";
            return i = appendLine(i = appendLine(i = appendLine(i = appendLine(i, Measurement.Width + floatRound(t * this.calibration) + Measurement.Unit), Measurement.Height + floatRound(e * this.calibration) + Measurement.Unit), Measurement.Area + floatRound(t * this.calibration * e * this.calibration) + Measurement.AreaUnit), Measurement.Perimeter + floatRound((2 * e + 2 * t) * this.calibration) + Measurement.Unit)
          }
    }(),
    function() {
      (Remark = function(t, e, i, n, o, a) {
            Shape.apply(this, [t, e, i, n, o]),
                this.changeCallback = a,
            null != t && this.createElmt()
          }
      ).prototype = new Shape;
      var t = Remark.prototype;
      t.draw = function() {
        this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.movePoint = new Point(this.rsPoint.x - 5,this.rsPoint.y - 5),
            this.setCSS(this.rsPoint.x, this.rsPoint.y),
            this.calcMeasurementInfoMaxWidth(),
            this.shapeMovePosition(),
            this.showMeasurement(this.fontSize, this.color)
      }
          ,
          t.active = function() {
            this.isSelected && this.drawMoveThumb(this.rsPoint)
          }
          ,
          t.isHitMe = function(t) {
            if (this.isSelected) {
              var e = new Array;
              if (this.addClickResult(e, t, this.rsPoint, ActiveMove.ShapeMove),
                  this.setNearestMove(e),
              this.activeMove == ActiveMove.ShapeMove)
                return !0
            }
            return !1
          }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.visible)
              return !1;
            var i = getTextRect(this.getContext(), this.movePoint.x, this.movePoint.y, this.calcMeasurementInfo(), this.fontSize, this.measureinfoMaxWidth);
            return this.isSelected = pointInRect(t, i, null != e ? e : 1),
                this.cavRect = i,
            this.isSelected && $(this.inpElmt).css({
              width: i.width,
              height: i.height
            }),
                this.isSelected
          }
          ,
          t.calcMeasurementInfoMaxWidth = function() {
            var t = Math.abs($(this.container).width() - this.rsPoint.x);
            500 < t ? this.measureinfoMaxWidth = 470 : (this.measureinfoMaxWidth = t - 30,
            this.measureinfoMaxWidth < 200 && (this.measureinfoMaxWidth = 200))
          }
          ,
          t.shapeMovePosition = function() {
            null != this.activeMove && this.activeMove != ActiveMove.None && this.activeMove == ActiveMove.ShapeMove && (this.resetActiveMovePoint(this.rsPoint, this.startPoint),
                this.resetActiveMovePoint(this.rePoint, this.endPoint))
          }
          ,
          t.createElmt = function() {
            if (null == this.inpElmt) {
              this.inpElmt = document.createElement("textarea"),
                  this.container.appendChild(this.inpElmt);
              var t = $(this.inpElmt);
              t.hide(),
                  t.mousedown(function(t) {
                    t.stopPropagation()
                  })
            }
          }
          ,
          t.updateElmtValue = function(t) {
            $(this.inpElmt).val(t)
          }
          ,
          t.setCSS = function(t, e) {
            registerTxtCSS(this.inpElmt, t, e, this.fontSize, this.fontFamily, this.color, this.fontBold, this.fontItalic, this.fontUnderLine, this.description, !0, !1),
                function(t, e) {
                  if (t)
                    e.cavRect || (e.cavRect = getTextRect(e.getContext(), e.movePoint.x, e.movePoint.y, e.calcMeasurementInfo(), e.fontSize, e.measureinfoMaxWidth),
                        $(e.inpElmt).css({
                          width: e.cavRect.width,
                          height: e.cavRect.height
                        })),
                        $(e.inpElmt).show(),
                        e.inpElmt.select(),
                        e.isSelected = !0,
                        e.active();
                  else {
                    var i = $(e.inpElmt).val();
                    e.description != i && (this.changeCallback && this.changeCallback(),
                        e.isMeasurementChanged = !0),
                        $(e.inpElmt).hide(),
                        e.description = i
                  }
                }(this.isSelected, this)
          }
          ,
          t.drawStart = function(t) {
            this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
                this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint)
          }
          ,
          t.drawUp = function(t) {
            this.isEndDrawing = !0
          }
          ,
          t.calcMeasurementInfo = function() {
            return appendLine(replaceHtmlEnter(this.description), "")
          }
    }(),
    function() {
      (Position = function(t, e, i, n, o) {
            Remark.apply(this, [t, e, i, n, o]),
                this.iconRadius = 6.5,
                this.flagTimes = 2.8
          }
      ).prototype = new Remark;
      var t = Position.prototype;
      t.draw = function(t, e, i) {
        this.rsPoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.movePoint = new Point(this.rsPoint.x - 5,this.rsPoint.y - 5),
            this.setCSS(this.rsPoint.x, this.rsPoint.y),
            this.calcMeasurementInfoMaxWidth(),
            this.shapeMovePosition(),
            this.showMeasurement(this.fontSize, this.color),
        this.isSelected || this.drawPositionIcon(this.rsPoint)
      }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.visible)
              return !1;
            var i = getTextRect(this.getContext(), this.movePoint.x, this.movePoint.y, this.calcMeasurementInfo(), this.fontSize, this.measureinfoMaxWidth);
            return this.isSelected = pointInRect(t, i, null != e ? e : 1) || this.isHitMyFlag(t),
                this.cavRect = i,
            this.isSelected && $(this.inpElmt).css({
              width: i.width,
              height: i.height
            }),
                this.isSelected
          }
          ,
          t.isHitMyFlag = function(t) {
            return pointInRect(t, new Rect(this.rsPoint.x - this.iconRadius,this.rsPoint.y - this.iconRadius * this.flagTimes,2 * this.iconRadius,this.iconRadius * (this.flagTimes + 1)), 1)
          }
          ,
          t.drawPositionIcon = function(t) {
            if (null != t) {
              var e = this.getContext()
                  , i = this.iconRadius;
              e.beginPath(),
                  e.lineWidth = 2,
                  e.arc(t.x, t.y, i, 0, 2 * Math.PI, !1),
                  e.fillStyle = "rgba(255, 255, 255, 0.6)",
                  e.fill(),
                  e.strokeStyle = "#666465",
                  e.stroke(),
                  e.beginPath(),
                  e.lineWidth = 3,
                  e.strokeStyle = "#cfb569",
                  e.moveTo(t.x, t.y),
                  e.lineTo(t.x, t.y - i * this.flagTimes),
                  e.stroke(),
                  e.lineTo(t.x + 1.6 * i, t.y - i - 2),
                  e.lineTo(t.x, t.y - i - 2),
                  e.fillStyle = "#dd4f37",
                  e.fill()
            }
          }
    }(),
    function() {
      (CurveRounded = function(t, e, i, n, o, a, r, s) {
            Rectangle.apply(this, [t, e, i, n, o]),
                this.isClose = !0,
                this.pointCount = 0,
                this.cavPoints = new Array,
                this.tempPoints,
                this.initRect
          }
      ).prototype = new Rectangle;
      var t = CurveRounded.prototype;
      function d(t, e, i, n) {
        var o, a, r;
        t.cavScale = i,
            t.cavOffset = n,
            t.cavPoints = new Array;
        for (var s = 0; s < e.length; s++)
          o = new Point(e[s].x,e[s].y),
              o = t.toCanvasPoint(o, !1),
              0 == s ? (a = new Point(o.x,o.y),
                  r = new Point(o.x,o.y)) : (a.x > o.x && (a.x = o.x),
              a.y > o.y && (a.y = o.y),
              r.x < o.x && (r.x = o.x),
              r.y < o.y && (r.y = o.y)),
              t.cavPoints.push(o);
        t.rsPoint = a,
            t.rePoint = r,
            t.startPoint = t.toImagePoint(a),
            t.endPoint = t.toImagePoint(r),
            t.initRect = new Rect(a.x,a.y,r.x - a.x,r.y - a.y)
      }
      t.draw = function() {
        this.initRect || d(this, this.points, this.cavScale, this.cavOffset);
        var t, e = this.getContext();
        if (e.beginPath(),
            this.shapeMovePosition(),
            this.isEndDrawing) {
          this.rsPoint = this.toCanvasPoint(this.startPoint, !1),
              this.rePoint = this.toCanvasPoint(this.endPoint, !1);
          var i, n = this.rePoint.x - this.rsPoint.x, o = this.rePoint.y - this.rsPoint.y, a = this.rsPoint.x, r = this.rsPoint.y, s = (this.rePoint.x - this.rsPoint.x) / this.initRect.width, h = (this.rePoint.y - this.rsPoint.y) / this.initRect.height;
          this.tempPoints = new Array;
          for (l = 0; l < this.cavPoints.length; l++)
            (t = new Point(this.cavPoints[l].x,this.cavPoints[l].y)).x -= this.initRect.x,
                t.y -= this.initRect.y,
                t.x *= s,
                t.y *= h,
                t.x += a,
                t.y += r,
                this.tempPoints.push(t);
          this.points = new Array;
          for (l = 0; l < this.tempPoints.length; l++)
            t = this.tempPoints[l],
                this.points.push(this.toImagePoint(t)),
                t = rotatePoint(t, this.rotateRadian, this.rotateOriginPoint),
                0 == l ? (e.moveTo(t.x, t.y),
                    i = t) : l == this.tempPoints.length - 1 ? (e.lineTo(t.x, t.y),
                this.isClose && e.lineTo(i.x, i.y)) : e.lineTo(t.x, t.y);
          this.leftTopPoint = rotatePoint(new Point(a,r), this.rotateRadian, this.rotateOriginPoint),
              this.leftBottomPoint = rotatePoint(new Point(a,r + o), this.rotateRadian, this.rotateOriginPoint),
              this.rightTopPoint = rotatePoint(new Point(a + n,r), this.rotateRadian, this.rotateOriginPoint),
              this.rightBottomPoint = rotatePoint(new Point(a + n,r + o), this.rotateRadian, this.rotateOriginPoint),
              this.topMiddlePoint = rotatePoint(new Point(a + n / 2,r), this.rotateRadian, this.rotateOriginPoint),
              this.bottomMiddlePoint = rotatePoint(new Point(a + n / 2,r + o), this.rotateRadian, this.rotateOriginPoint),
              this.leftMiddlePoint = rotatePoint(new Point(a,r + o / 2), this.rotateRadian, this.rotateOriginPoint),
              this.rightMiddlePoint = rotatePoint(new Point(a + n,r + o / 2), this.rotateRadian, this.rotateOriginPoint),
              this.movePoint = rotatePoint(new Point((this.rsPoint.x + this.rePoint.x) / 2,(this.rsPoint.y + this.rePoint.y) / 2), this.rotateRadian, this.rotateOriginPoint)
        } else
          for (var l = 0; l < this.points.length; l++)
            t = this.resetPoint(this.points[l], this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
                0 == l ? e.moveTo(t.x, t.y) : e.lineTo(t.x, t.y);
        this.highlight(!0),
            e.lineWidth = this.width,
            e.strokeStyle = this.color,
            e.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = CalcLengthClosed(this.points) * this.calibration
                , e = CalcArea(this.points) * this.calibration * this.calibration
                , i = "";
            return i = appendLine(i = appendLine(i, Measurement.Area + floatRound(e) + Measurement.AreaUnit), Measurement.Perimeter + floatRound(t) + Measurement.Unit)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
          ,
          t.drawStart = function(t) {
            this.points.push(t),
                this.startPoint = this.endPoint = t
          }
          ,
          t.drawMove = function(t) {
            this.points.push(t),
                this.endPoint = t
          }
          ,
          t.drawEnd = function(t) {
            d(this, this.points, this.cavScale, this.cavOffset)
          }
          ,
          t.validate = function(t, e, i) {
            return checkPoints(i)
          }
    }(),
    (Curve = function(t, e, i, n, o, a, r, s) {
          CurveRounded.apply(this, [t, e, i, n, o, a, r, s]),
              this.isClose = !1
        }
    ).prototype = new CurveRounded,
    Curve.prototype.calcMeasurementInfo = function() {
      var t = CalcLength(this.points) * this.calibration;
      return appendLine(Measurement.Perimeter, floatRound(t) + Measurement.Unit)
    }
    ,
    function() {
      (Angle = function(t, e, i, n, o) {
            Shape.apply(this, [t, e, i, n, o]),
                this.cavPoints = new Array,
                this.pIndex = 0
          }
      ).prototype = new Shape;
      var t = Angle.prototype;
      t.draw = function() {
        var t, e = this.getContext();
        e.beginPath();
        var i, n;
        this.shapeMovePosition(),
            this.cavPoints = new Array;
        for (var o = 0; o < this.points.length; o++)
          t = this.resetPoint(this.points[o], this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
              this.cavPoints.push(t);
        if (this.isEndDrawing) {
          var a = Radian(this.cavPoints[0], this.cavPoints[1])
              , r = Radian(this.cavPoints[2], this.cavPoints[1]);
          e.arc(this.cavPoints[1].x, this.cavPoints[1].y, 10, a, r, !1),
              this.movePoint = new Point((this.cavPoints[0].x + this.cavPoints[2].x) / 2,(this.cavPoints[0].y + this.cavPoints[2].y) / 2)
        }
        for (o = 0; o < this.cavPoints.length; o++)
          t = this.cavPoints[o],
              0 == o ? (e.moveTo(t.x, t.y),
                  i = new Point(t.x,t.y),
                  n = new Point(t.x,t.y)) : (e.lineTo(t.x, t.y),
              i.x > t.x && (i.x = t.x),
              i.y > t.y && (i.y = t.y),
              n.x < t.x && (n.x = t.x),
              n.y < t.y && (n.y = t.y));
        this.isEndDrawing || null == this.drawMovePoint || (t = this.resetPoint(this.drawMovePoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            e.lineTo(t.x, t.y)),
            this.rsPoint = i,
            this.rePoint = n,
            this.highlight(!0),
            e.lineWidth = this.width,
            e.strokeStyle = this.color,
            e.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            return appendLine(Measurement.Angle, floatRound(AngleDegree(this.cavPoints[0], this.cavPoints[1], this.cavPoints[2])) + Measurement.Deg)
          }
          ,
          t.active = function() {
            if (this.isSelected) {
              for (var t = 0; t < this.cavPoints.length; t++)
                point = this.cavPoints[t],
                    this.drawThumb(point);
              this.drawMoveThumb(this.movePoint),
              this.isEndDrawing || null == this.drawMovePoint || this.drawThumb(this.resetPoint(this.drawMovePoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint))
            }
          }
          ,
          t.shapeMovePosition = function() {
            if (null != this.activeMove && this.activeMove != ActiveMove.None) {
              switch (this.activeMove) {
                case ActiveMove.PointMove:
                  this.resetActiveMovePoint(this.cavPoints[this.pIndex], this.points[this.pIndex]);
                  break;
                case ActiveMove.ShapeMove:
                  for (var t = 0; t < this.cavPoints.length; t++)
                    this.resetActiveMovePoint(this.cavPoints[t], this.points[t])
              }
              this.activeMove != ActiveMove.ShapeMove && (this.isMeasurementChanged = !0)
            }
          }
          ,
          t.getActiveMove = function(t) {
            for (var e = new Array, i = 0; i < this.cavPoints.length; i++)
              this.addClickResult(e, t, this.cavPoints[i], ActiveMove.PointMove, i);
            this.addClickResult(e, t, this.movePoint, ActiveMove.ShapeMove),
                this.setNearestMove(e)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
          ,
          t.drawStart = function(t) {}
          ,
          t.drawMove = function(t) {
            this.drawMovePoint = t
          }
          ,
          t.drawDown = function(t) {
            0 < this.points.length && this.points[this.points.length - 1].x == t.x && this.points[this.points.length - 1].y == t.y || this.points.push(t)
          }
          ,
          t.drawUp = function(t) {
            0 == this.points.length && this.points.push(t),
            3 <= this.points.length && (this.isEndDrawing = !0)
          }
          ,
          t.drawEnd = function(t) {}
          ,
          t.validate = function(t, e, i) {
            return !(!i || i.length < 3) && checkPoints(i)
          }
    }(),
    function() {
      (Circle = function(t, e, i, n, o) {
            Shape.apply(this, [t, e, i, n, o])
          }
      ).prototype = new Shape;
      var t = Circle.prototype;
      t.draw = function() {
        var t = this.getContext();
        t.beginPath(),
            this.shapeMovePosition(),
            this.rsPoint = this.movePoint = this.resetPoint(this.startPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.rePoint = this.resetPoint(this.endPoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            this.radius = CalcRadius(this.rsPoint, this.rePoint),
            this.highlight(!0),
            t.lineWidth = this.width,
            t.strokeStyle = this.color,
            t.arc(this.rsPoint.x, this.rsPoint.y, this.radius, 0, 2 * Math.PI, !1),
            t.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = CalcRadius(this.startPoint, this.endPoint) * this.calibration
                , e = "";
            return e = appendLine(e = appendLine(e = appendLine(e, Measurement.Radius + floatRound(t) + Measurement.Unit), Measurement.Area + floatRound(Math.PI * t * t) + Measurement.AreaUnit), Measurement.Perimeter + floatRound(2 * Math.PI * t) + Measurement.Unit)
          }
          ,
          t.active = function() {
            this.isSelected && (this.drawThumb(this.rePoint),
                this.drawMoveThumb(this.movePoint))
          }
          ,
          t.shapeMovePosition = function() {
            if (null != this.activeMove && this.activeMove != ActiveMove.None) {
              switch (this.activeMove) {
                case ActiveMove.PointMove:
                  this.resetActiveMovePoint(this.rePoint, this.endPoint);
                  break;
                case ActiveMove.ShapeMove:
                  this.resetActiveMovePoint(this.rePoint, this.endPoint),
                      this.resetActiveMovePoint(this.rsPoint, this.startPoint)
              }
              this.activeMove != ActiveMove.ShapeMove && (this.isMeasurementChanged = !0)
            }
          }
          ,
          t.getActiveMove = function(t) {
            var e = new Array;
            this.addClickResult(e, t, this.rePoint, ActiveMove.PointMove),
                this.addClickResult(e, t, this.movePoint, ActiveMove.ShapeMove),
                this.setNearestMove(e)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible)
              return !1;
            var i = clickInCircle(this.radius, this.rsPoint, t, null != e ? e : this.width);
            return this.cavRect = new Rect(this.rsPoint.x - this.radius,this.rsPoint.y - this.radius,2 * this.radius,2 * this.radius),
                this.isSelected = i
          }
          ,
          t.drawStart = function(t) {
            this.points.push(t)
          }
    }(),
    function() {
      (CircleThreePoints = function(t, e, i, n, o) {
            Angle.apply(this, [t, e, i, n, o])
          }
      ).prototype = new Angle;
      var t = CircleThreePoints.prototype;
      t.draw = function() {
        var t, e = this.getContext();
        e.beginPath(),
            this.shapeMovePosition(),
            this.cavPoints = new Array;
        for (var i = 0; i < this.points.length; i++)
          t = this.resetPoint(this.points[i], this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
              this.cavPoints.push(t);
        if (this.isEndDrawing) {
          var n = CalcCenterPoint(this.cavPoints[0], this.cavPoints[1], this.cavPoints[2])
              , o = CalcRadius(n, this.cavPoints[0]);
          this.movePoint = n,
              e.arc(n.x, n.y, o, 0, 2 * Math.PI, !1)
        } else
          for (i = 0; i < this.cavPoints.length; i++)
            0 == i ? e.moveTo(this.cavPoints[i].x, this.cavPoints[i].y) : e.lineTo(this.cavPoints[i].x, this.cavPoints[i].y);
        this.isEndDrawing || null == this.drawMovePoint || (t = this.resetPoint(this.drawMovePoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            e.lineTo(t.x, t.y)),
            this.highlight(!0),
            e.lineWidth = this.width,
            e.strokeStyle = this.color,
            e.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = CalcRadius(CalcCenterPoint(this.points[0], this.points[1], this.points[2]), this.points[0]) * this.calibration
                , e = "";
            return e = appendLine(e = appendLine(e = appendLine(e, Measurement.Radius + floatRound(t) + Measurement.Unit), Measurement.Area + floatRound(Math.PI * t * t) + Measurement.AreaUnit), Measurement.Perimeter + floatRound(2 * Math.PI * t) + Measurement.Unit)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible)
              return !1;
            var i = this.movePoint
                , n = CalcRadius(i, this.cavPoints[0])
                , o = clickInCircle(n, i, t, null != e ? e : this.width);
            return this.cavRect = new Rect(i.x - n,i.y - n,2 * n,2 * n),
                this.isSelected = o
          }
    }(),
    function() {
      (Arc = function(t, e, i, n, o) {
            Angle.apply(this, [t, e, i, n, o]),
                this.radian1,
                this.radian2,
                this.centerCircle,
                this.sweepDirection,
                this.verticalPoint,
                this.isLargeArc = !1
          }
      ).prototype = new Angle;
      var t = Arc.prototype;
      t.draw = function() {
        var t, e = this.getContext();
        e.beginPath(),
            this.shapeMovePosition(),
            this.cavPoints = new Array;
        for (var i = 0; i < this.points.length; i++)
          t = this.resetPoint(this.points[i], this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
              this.cavPoints.push(t);
        if (this.isEndDrawing) {
          var n = CalcCenterPoint(this.cavPoints[0], this.cavPoints[1], this.cavPoints[2]);
          this.radius = CalcRadius(n, this.cavPoints[0]);
          var o = AngleRadian(this.cavPoints[0], this.cavPoints[1], this.cavPoints[2]);
          this.radian1 = Radian(this.cavPoints[0], n),
              this.radian2 = Radian(this.cavPoints[2], n);
          var a = IsCounterClockwise(o);
          this.sweepDirection = a,
              this.isLargeArc = IsLargeArc(o),
              this.movePoint = new Point((this.cavPoints[0].x + this.cavPoints[2].x) / 2,(this.cavPoints[0].y + this.cavPoints[2].y) / 2),
              this.centerCircle = n,
              e.arc(n.x, n.y, this.radius, this.radian1, this.radian2, a)
        } else
          for (i = 0; i < this.cavPoints.length; i++)
            0 == i ? e.moveTo(this.cavPoints[i].x, this.cavPoints[i].y) : e.lineTo(this.cavPoints[i].x, this.cavPoints[i].y);
        this.isEndDrawing || null == this.drawMovePoint || (t = this.resetPoint(this.drawMovePoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            e.lineTo(t.x, t.y)),
            this.highlight(!0),
            e.lineWidth = this.width,
            e.strokeStyle = this.color,
            e.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = CalcCenterPoint(this.points[0], this.points[1], this.points[2])
                , e = CalcRadius(t, this.points[0]) * this.calibration
                , i = AngleDegree(this.points[0], t, this.points[2]);
            this.isLargeArc ? i < 180 && (i = 360 - i) : 180 < i && (i = 360 - i);
            var n = "";
            return n = appendLine(n = appendLine(n = appendLine(n = appendLine(n, Measurement.Radius + floatRound(e) + Measurement.Unit), Measurement.Perimeter + floatRound(2 * Math.PI * e) + Measurement.Unit), Measurement.Angle + floatRound(i) + Measurement.Deg), Measurement.ArcLength + floatRound(2 * Math.PI * e * i / 360) + Measurement.Unit)
          }
          ,
          t.isHitMe = function(t) {
            return this.isSelected && this.getActiveMove(t),
            this.activeMove != ActiveMove.None
          }
          ,
          t.isHitMyArea = function(t, e) {
            if (!this.editable || !this.visible)
              return !1;
            var i, n, o, a, r = this.centerCircle, s = this.radius, h = clickInArc(s, r, t, this.radian1, this.radian2, this.isLargeArc, null != e ? e : this.width), l = LineLength(r, t), d = pointToLineLength(this.cavPoints[0], this.cavPoints[2], r);
            return h && !this.isLargeArc && l < d ? h = !1 : !h && this.isLargeArc && l < d && (h = !0),
                i = Math.min(this.cavPoints[0].x, this.cavPoints[1].x),
                i = Math.min(i, this.cavPoints[2].x),
                n = Math.max(this.cavPoints[0].x, this.cavPoints[1].x),
                n = Math.max(n, this.cavPoints[2].x),
                o = Math.min(this.cavPoints[0].y, this.cavPoints[1].y),
                o = Math.min(o, this.cavPoints[2].y),
                a = Math.max(this.cavPoints[0].y, this.cavPoints[1].y),
                a = Math.max(a, this.cavPoints[2].y),
                i <= r.x && r.x <= n ? (this.sweepDirection ? this.cavPoints[0].x > this.cavPoints[2].x ? this.verticalPoint = new Point(r.x,r.y - s) : this.verticalPoint = new Point(r.x,r.y + s) : this.cavPoints[0].x > this.cavPoints[2].x ? this.verticalPoint = new Point(r.x,r.y + s) : this.verticalPoint = new Point(r.x,r.y - s),
                    i = Math.min(i, this.verticalPoint.x),
                    n = Math.max(n, this.verticalPoint.x),
                    o = Math.min(o, this.verticalPoint.y),
                    a = Math.max(a, this.verticalPoint.y)) : this.verticalPoint = null,
                this.cavRect = new Rect(i,o,Math.abs(n - i),Math.abs(a - o)),
                this.isSelected = h
          }
    }(),
    function() {
      (Polygon = function(t, e, i, n, o) {
            Angle.apply(this, [t, e, i, n, o]),
                this.dblclickEnd = !0
          }
      ).prototype = new Angle;
      var t = Polygon.prototype;
      t.draw = function() {
        var t, e, i, n = this.getContext();
        n.beginPath(),
            this.shapeMovePosition(),
            this.rsPoint,
            this.cavPoints = new Array;
        for (var o = 0; o < this.points.length; o++)
          t = this.resetPoint(this.points[o], this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
              this.cavPoints.push(t),
              0 == o ? (n.moveTo(t.x, t.y),
                  this.rsPoint = t,
                  e = new Point(t.x,t.y),
                  i = new Point(t.x,t.y)) : (n.lineTo(t.x, t.y),
              e.x > t.x && (e.x = t.x),
              e.y > t.y && (e.y = t.y),
              i.x < t.x && (i.x = t.x),
              i.y < t.y && (i.y = t.y));
        this.isEndDrawing ? (n.lineTo(this.rsPoint.x, this.rsPoint.y),
            this.movePoint = new Point((i.x + e.x) / 2,(i.y + e.y) / 2),
            this.rsPoint = e,
            this.rePoint = i) : null != this.drawMovePoint && (t = this.resetPoint(this.drawMovePoint, this.cavScale, this.cavOffset, this.rotateRadian, this.rotateOriginPoint),
            n.lineTo(t.x, t.y)),
            this.highlight(!0),
            n.lineWidth = this.width,
            n.strokeStyle = this.color,
            n.stroke(),
            this.highlight(!1),
            this.active(),
            this.showMeasurement()
      }
          ,
          t.calcMeasurementInfo = function() {
            var t = "";
            return t = appendLine(t = appendLine(t, Measurement.Area + floatRound(CalcArea(this.points) * this.calibration * this.calibration) + Measurement.AreaUnit), Measurement.Perimeter + floatRound(CalcLengthClosed(this.points) * this.calibration) + Measurement.Unit)
          }
          ,
          t.drawMove = function(t) {
            $.support.touch && 0 != this.points.length ? this.drawMovePoint = null : this.drawMovePoint = t
          }
          ,
          t.drawUp = function(t) {
            0 == this.points.length && this.points.push(t)
          }
          ,
          t.drawEnd = function(t) {
            var e;
            this.isEndDrawing = !0;
            for (var i = this.points.length - 1; 0 < i && (floatRound(this.points[i].x) == floatRound(this.points[i - 1].x) && floatRound(this.points[i].y) == floatRound(this.points[i - 1].y)); i--)
              e = i;
            null != e && this.points.splice(e, this.points.length - e)
          }
          ,
          t.validate = function(t, e, i) {
            return checkPoints(i)
          }
    }();
var ShapeROI, Size = function(t, e) {
  this.width = t,
      this.height = e
}, Orientation = {
  Vertical: 0,
  Horizontal: 1
}, Measure = function(t, e) {
  (self = this).canvas = t,
      this.calibration = e,
      this.cellWidth = 800,
      this.minCellWidth = 50,
      this.maxCellWidth = 200,
      this.cavScale,
      this.cavOffset,
      this.autoAdjustCellWidth = !0,
      this.location = new Point(0,0),
      this.defaultPadding = 20,
      this.containerSize,
      this.width = 1,
      this.color = "#363736",
      this.getContext = function() {
        return this.canvas.getContext("2d")
      }
      ,
      this.refresh = function(t, e) {
        this.cavScale = t,
            this.cavOffset = e
      }
      ,
      this.resetContainerSize = function(t, e) {
        this.containerSize = new Size(t,e)
      }
      ,
      this.draw = function(t, e) {}
}, Grid = function(t, e, i, n, o, a) {
  Measure.apply(this, [t, e]),
      this.imgSize = new Size(i,n),
      this.containerSize = new Size(o,a),
      this.displayRect = new Rect,
      this.draw = function(t, e) {
        this.refresh(t, e);
        var i = this.cellWidth * this.cavScale / this.calibration;
        if (this.autoAdjustCellWidth) {
          if (i < this.minCellWidth)
            return this.cellWidth *= 2,
                void this.draw(t, e);
          if (i > this.maxCellWidth && this.cellWidth / 2 % 10 == 0)
            return this.cellWidth /= 2,
                void this.draw(t, e)
        }
        SlideViewerConfig.showRulers() || (this.defaultPadding = 0);
        var n = this.getContext();
        n.beginPath();
        for (var o = this.location.x + this.defaultPadding, a = this.location.y + this.defaultPadding, r = (e = new Point(o + this.cavOffset.x,a + this.cavOffset.y)).x % i - o, s = e.y % i - a, h = r; h < this.containerSize.width; h += i)
          n.moveTo(h, a),
              n.lineTo(h, this.containerSize.height);
        for (var l = s; l < this.containerSize.height; l += i)
          n.moveTo(o, l),
              n.lineTo(this.containerSize.width, l);
        n.lineWidth = this.width,
            n.strokeStyle = "Grey",
            n.stroke()
      }
}, Ruler = function(t, e, i, n) {
  Measure.apply(this, [t, e]),
      this.divisionMark = 5,
      this.divisionMajorMark = this.defaultPadding,
      this.divisionNum = 5,
      this.containerSize = new Size(i,n),
      this.zeroPoint,
      this.draw = function(t, e) {
        this.refresh(t, e);
        var i = this.cellWidth * this.cavScale / this.calibration;
        if (this.autoAdjustCellWidth) {
          if (i < this.minCellWidth)
            return this.cellWidth *= 2,
                void this.draw(t, e);
          if (i > this.maxCellWidth && this.cellWidth / 2 % 10 == 0)
            return this.cellWidth /= 2,
                void this.draw(t, e)
        }
        this.zeroPoint = new Point(this.cavOffset.x,this.cavOffset.y);
        var n = i / this.divisionNum
            , o = 0
            , a = this.getContext();
        a.beginPath(),
            a.fillStyle = "#ffffff",
            a.fillRect(this.location.x, this.location.y, this.containerSize.width, this.divisionMajorMark),
            a.fillRect(this.location.x, this.location.y, this.divisionMajorMark, this.containerSize.height),
            a.font = "10pt Microsoft Sans Serif,宋体",
            a.fillStyle = this.color;
        var r = this.location.x + this.divisionMajorMark
            , s = this.location.y + this.divisionMajorMark
            , h = (e = new Point(r + this.cavOffset.x,s + this.cavOffset.y)).x % i - r
            , l = e.y % i - s;
        a.moveTo(r, s),
            a.lineTo(this.location.x + this.containerSize.width, s);
        for (var d = h; d < this.containerSize.width; d += n)
          d < r || (o % this.divisionNum == 0 ? (a.moveTo(d, s),
              a.lineTo(d, s - this.divisionMajorMark),
              a.fillText(floatRound((d - this.zeroPoint.x) * this.cellWidth / i), d + 2, s / 1.5)) : (a.moveTo(d, s),
              a.lineTo(d, s - this.divisionMark))),
              o++;
        a.moveTo(r, s),
            a.lineTo(r, this.location.y + this.containerSize.height),
            o = 0;
        for (var c = l; c < this.containerSize.height; c += n)
          c < s || (o % this.divisionNum == 0 ? (a.moveTo(r, c),
              a.lineTo(r - this.divisionMajorMark, c),
              a.rotate(3 * Math.PI / 2),
              str = floatRound((c - this.zeroPoint.y) * this.cellWidth / i).toString(),
              a.fillText(str, -(c + 8 * str.length), r / 1.5),
              a.rotate(Math.PI / 2)) : (a.moveTo(r, c),
              a.lineTo(r - this.divisionMark, c))),
              o++;
        a.lineWidth = this.width,
            a.strokeStyle = this.color,
            a.stroke()
      }
}, Scalebar = function(t, e, i, n) {
  Measure.apply(this, [t, e]),
      this.rect,
      this.fontSize = 12,
      this.divisionMark = 5,
      this.divisionMajorMark = this.defaultPadding / 2,
      this.paddingDistance = this.defaultPadding,
      this.containerSize = new Size(i,n),
      this.color = "#ff0000",
      this.isHitMyArea = function(t) {
        return pointInRect(t, this.rect)
      }
      ,
      this.move = function(t) {
        this.location.x += t.x,
            this.location.y += t.y
      }
      ,
      this.draw = function(t, e) {
        this.refresh(t, e);
        var i = this.cellWidth * this.cavScale / this.calibration;
        if (this.autoAdjustCellWidth) {
          if (i < this.minCellWidth)
            return this.cellWidth *= 2,
                void this.draw(t, e);
          if (i > this.maxCellWidth && this.cellWidth / 2 % 10 == 0)
            return this.cellWidth /= 2,
                void this.draw(t, e)
        }
        var n = this.getContext();
        n.beginPath(),
            n.font = this.fontSize + "pt Microsoft Sans Serif,宋体",
            n.fillStyle = this.color;
        var o = this.location.x + 1.5 * this.paddingDistance
            , a = this.location.y + this.containerSize.height - this.paddingDistance;
        n.moveTo(o, a),
            n.lineTo(o + i, a);
        var r = 0
            , s = this.cellWidth + " um"
            , h = n.measureText(s).width;
        h < i && (r = (i - h) / 2),
            n.fillText(s, o + r, a - this.divisionMajorMark),
            n.moveTo(o, a),
            n.lineTo(o, a - this.divisionMajorMark),
            n.moveTo(o + i, a),
            n.lineTo(o + i, a - this.divisionMajorMark),
            this.rect = new Rect(o,a - this.divisionMajorMark - this.fontSize,i,this.divisionMajorMark + this.fontSize),
            n.lineWidth = 2 * this.width,
            n.strokeStyle = this.color,
            n.stroke()
      }
};
!function() {
  var t = (ShapeROI = function(t, e, i, n, o, a, r) {
        this.canvas = t,
            this.x = e,
            this.y = i,
            this.width = n,
            this.height = o,
            this.scanObjective = a,
            this.hasImage = r,
            this.cavScale = 1,
            this.cavOffset,
            this.cavRect,
            this.rotateRadian,
            this.rotateOriginPoint,
            this.isSelected = !1,
            this.imgObject
      }
  ).prototype;
  function i(t) {
    return t ? "rgba(0, 100, 0, 0.4)" : "rgba(160, 160, 0, 0.4)"
  }
  function n(t) {
    return t + "x"
  }
  t.getContext = function() {
    return this.canvas.getContext("2d")
  }
      ,
      t.isHitMyArea = function(t) {
        return !(!t || !this.cavRect) && ((t = rotatePoint(t, -this.rotateRadian, this.rotateOriginPoint)).x < this.cavRect.x || t.y < this.cavRect.y ? this.isSelected = !1 : Math.abs(t.x - this.cavRect.x) <= this.cavRect.width && Math.abs(t.y - this.cavRect.y) <= this.cavRect.height ? this.isSelected = !0 : this.isSelected = !1,
            this.isSelected)
      }
      ,
      t.active = function(t, e) {
        if (this.isSelected && this.hasImage) {
          var i = this.getContext();
          i.beginPath(),
              i.lineWidth = 1,
              i.strokeStyle = "blue",
              i.strokeRect(t, e, this.cavRect.width, this.cavRect.height)
        }
      }
      ,
      t.refresh = function(t, e, i, n) {
        this.cavScale = t,
            this.cavOffset = e,
            this.rotateRadian = i,
            this.rotateOriginPoint = n
      }
      ,
      t.draw = function() {
        this.cavRect = new Rect(this.x,this.y,this.width,this.height),
        this.cavScale && (this.cavRect.x *= this.cavScale,
            this.cavRect.y *= this.cavScale,
            this.cavRect.width *= this.cavScale,
            this.cavRect.height *= this.cavScale),
        this.cavOffset && (this.cavRect.x += this.cavOffset.x,
            this.cavRect.y += this.cavOffset.y);
        var t = new Point(2,12)
            , e = this.getContext();
        e.beginPath(),
            e.font = "10px Microsoft Sans Serif",
            e.strokeStyle = "white",
            this.rotateRadian ? (e.translate(this.rotateOriginPoint.x, this.rotateOriginPoint.y),
                e.rotate(-this.rotateRadian),
                e.fillStyle = i(this.hasImage),
                e.lineWidth = 1,
                e.fillRect(this.cavRect.x - this.rotateOriginPoint.x, this.cavRect.y - this.rotateOriginPoint.y, this.cavRect.width, this.cavRect.height),
                e.fill(),
                e.strokeText(n(this.scanObjective), this.cavRect.x - this.rotateOriginPoint.x + t.x, this.cavRect.y - this.rotateOriginPoint.y + t.y),
                this.active(this.cavRect.x - this.rotateOriginPoint.x, this.cavRect.y - this.rotateOriginPoint.y),
                e.rotate(2 * Math.PI + this.rotateRadian),
                e.translate(-this.rotateOriginPoint.x, -this.rotateOriginPoint.y)) : (e.fillStyle = i(this.hasImage),
                e.lineWidth = 1,
                e.fillRect(this.cavRect.x, this.cavRect.y, this.cavRect.width, this.cavRect.height),
                e.fill(),
                e.strokeText(n(this.scanObjective), this.cavRect.x + t.x, this.cavRect.y + t.y),
                this.active(this.cavRect.x, this.cavRect.y))
      }
}();
var ShapeCanvas = function(s) {
  var e, d, c, u, h, i, l, g, f, p, a, o, v, r, m, w, y, P, S, x, M, C, n, b, T, A = this, R = [], I = [], E = [], O = !1, D = !1, k = !1, L = !1, U = 1, F = new Seadragon.EventManager, B = {
    ShapeChanged: "shapechanged",
    ShapeDrawEnd: "shapedrawend",
    SelectShape: "selectshape",
    ActualShapes: "actualshapes",
    DblClickRegion: "dblclickregion",
    SaveImageAnnotationsCompleted: "saveimageannotationscompleted",
    BeforeAnnotationChange: "beforeAnnotationChange",
    OperationChanged: "operationchanged"
  }, z = 800, H = !1;
  this.isShapeChanged = !1,
      this.isSelectedEnable = !0,
      this.isShowInfo = !0;
  var N, j, V = this.isAlwaysDisaplyMeasurement = !1;
  function W() {
    L = !0
  }
  function G() {
    q(),
        A.showImageShapes()
  }
  function X() {
    L = !1
  }
  function Z() {
    var t = s.viewport.getContainerSize();
    c.width = t.x,
        c.height = t.y,
        u.width = t.x,
        u.height = t.y,
        h.width = t.x,
        h.height = t.y,
        l.width = t.x,
        l.height = t.y,
        i.width = t.x,
        i.height = t.y,
    null != d && (S.resetContainerSize(t.x, t.y),
        x.resetContainerSize(t.x, t.y),
        M.resetContainerSize(t.x, t.y),
        A.showImageShapes()),
        w.style.width = t.x + "px",
        w.style.height = t.y + "px",
        m = Seadragon.Utils.getElementPosition(c),
        q()
  }
  function q() {
    if (d) {
      var t = s.viewport.getBounds(!0)
          , e = s.viewport.getZoom(!0)
          , i = s.viewport.getContainerSize()
          , n = i.x * e;
      if (U = n / d.width,
          v = new SeadragonPoint(-t.x * n,-t.y * n),
          s.rotate()) {
        var o = s.viewport.getCenter(!0)
            , a = new SeadragonRect(0,0,1,d.height / d.width).rotate(s.rotate(), o).getTopLeft();
        r = s.viewport.pixelFromPoint(a, !0)
      } else
        r = v;
      T = new SeadragonPoint(i.x / 2,i.y / 2)
    }
  }
  function Y(t) {
    t.getContext("2d").clearRect(0, 0, t.width, t.height)
  }
  function _() {
    if (null != p) {
      if (p.type == AnnotationType.Region)
        return void A.deleteAnnotation();
      p.isSelected = !1,
      A.isAlwaysDisaplyMeasurement || (p.measurement = !1)
    }
    p = null,
        Y(u)
  }
  function K(t) {
    if (null == R)
      return !1;
    for (var e = !1, i = 0; i < R.length; i++)
      (R[i].isSelected || R[i].measurement) && (R[i].isSelected = !1,
      A.isAlwaysDisaplyMeasurement || (R[i].measurement = !1),
          e = !0);
    return null != t && (t.isSelected = !0),
        e
  }
  function J(t) {
    if (0 < I.length) {
      C = getXYfromEvent(t),
          y = C[0].x,
          P = C[0].y,
          y -= m.x,
          P -= m.y;
      for (var e, i = !1, n = new Seadragon.Point(y,P), o = 0; o < I.length; o++)
        if (I[o].isHitMyArea(n)) {
          if (!I[o].hasImage)
            continue;
          null != e && (e.isSelected = !1),
              e = I[o]
        }
      null == a && null != e ? (a = e,
          i = !0) : a != e && (a.isSelected = !1,
          a = e,
          i = !0),
      i && A.showImageShapes()
    }
  }
  function Q(t) {
    $.support.touch && (t.preventDefault(),
        clearTimeout(n),
        H = !0,
        n = setTimeout(function() {
          H && tt(t)
        }, z))
  }
  function tt(t) {
    if (t.stopPropagation(),
    O && p && p.dblclickEnd)
      return dt(),
          !1;
    if (p && (p.type == AnnotationType.Position || p.type == AnnotationType.Region)) {
      C = getXYfromEvent(t),
          y = C[0].x,
          P = C[0].y,
          y -= m.x,
          P -= m.y;
      var e = new Seadragon.Point(y,P);
      p.type == AnnotationType.Position ? p.isHitMyFlag(e) && (p.showDescription = !p.showDescription,
          A.showImageShapes()) : p.type == AnnotationType.Region && (F.trigger(B.DblClickRegion, p.startPoint, p.endPoint),
          _())
    }
    J(t),
    null != a && a.isSelected && s.openImage(a.imgObject)
  }
  function et(t) {
    return ot(t)
  }
  function it(t) {
    return H = !1,
        st(t)
  }
  function nt(t) {
    return H = !1,
        rt(t)
  }
  function ot(t) {
    if (C = getXYfromEvent(t),
        y = C[0].x,
        P = C[0].y,
        y -= m.x,
        P -= m.y,
        SlideViewerConfig.showScalebar()) {
      var e = new Seadragon.Point(y,P);
      if (M.isHitMyArea(e))
        return f = e,
            !(k = !0)
    }
    if (null == o && function(t) {
      if (null == R)
        return !1;
      var e = !1
          , i = []
          , n = !1;
      if (null == p || A.isAlwaysDisaplyMeasurement || (p.measurement = !1),
      null != p && !p.isLocked && p.isHitMe(t))
        e = !0;
      else if (A.isSelectedEnable || A.isShowInfo)
        for (var o = 0; o < R.length; o++) {
          var a = R[o];
          if (Pt(a))
            a.isHitMyArea(t) && (e = !0,
                a.isSelected = !1,
                i.push(a),
            p == a && (n = !0))
        }
      else
        null != p && (p.isSelected = !1,
            _(),
            A.showImageShapes());
      if (1 == i.length && p != i[0])
        p && p.type == AnnotationType.Region && _(),
            (p = i[0]).isSelected = !0;
      else if (!n && 0 < i.length) {
        var r;
        for (o = 0; o < i.length; o++)
          0 == o ? r = i[0] : r.cavRect.x < i[o].cavRect.x && r.cavRect.y < i[o].cavRect.y && r.cavRect.width > i[o].cavRect.width && r.cavRect.height > i[o].cavRect.height && (r = i[o]);
        (p = r).isSelected = !0
      } else {
        null == p && (p = i[0]);
        for (o = 0; o < i.length; o++)
          if (p == i[o]) {
            o < i.length - 1 ? (p.isSelected = !1,
                (p = i[o + 1]).isSelected = !0) : (p.isSelected = !1,
                (p = i[0]).isSelected = !0);
            break
          }
      }
      return null != p && (p.isSelected ? (p.measurement = !0,
          p.isLocked ? p.isSelected = !1 : p.activeMove != ActiveMove.None ? (D = !0,
              f = t) : !A.isSelectedEnable && A.isShowInfo && (p.isSelected = !1),
          wt()) : (_(),
          A.showImageShapes()),
      p && p.isDemo && (p.lastUpdateTimeStamp = Date.now())),
          e
    }(new Seadragon.Point(y,P)) && (A.showImageShapes(),
    (A.isSelectedEnable || D) && null != p && p.activeMove != ActiveMove.None))
      return !1;
    if (Q(t),
    null != o) {
      if (y -= v.x,
          P -= v.y,
      null != p && !p.isEndDrawing) {
        e = new Seadragon.Point(y / U,P / U);
        return p.drawDown(e),
            void Q(t)
      }
      K() && A.showImageShapes(),
          t.stopPropagation();
      var i = new Seadragon.Point(y / U,P / U)
          , n = endPoint = i;
      return !vt(p = at(o, n, endPoint), AnnotationAction.Add) && (R.push(p),
          p.drawStart(i),
          O = !0,
          !(p.isSelected = !0))
    }
  }
  function at(t, e, i) {
    var n;
    switch (t) {
      case AnnotationType.Line:
        n = new Line(w,c,u,e,i);
        break;
      case AnnotationType.Arrow:
        n = new Arrow(w,c,u,e,i);
        break;
      case AnnotationType.Rectangle:
        n = new Rectangle(w,c,u,e,i);
        break;
      case AnnotationType.Region:
        n = new Region(w,c,u,e,i);
        break;
      case AnnotationType.Ellipse:
        n = new Ellipse(w,c,u,e,i);
        break;
      case AnnotationType.Remark:
        n = new Remark(w,c,u,e,i,A.dirtyCanvas);
        break;
      case AnnotationType.Position:
        n = new Position(w,c,u,e,i);
        break;
      case AnnotationType.CurveRounded:
        n = new CurveRounded(w,c,u,e,i);
        break;
      case AnnotationType.Curve:
        n = new Curve(w,c,u,e,i);
        break;
      case AnnotationType.Angle:
        n = new Angle(w,c,u,e,i);
        break;
      case AnnotationType.Circle:
        n = new Circle(w,c,u,e,i);
        break;
      case AnnotationType.CircleThreePoints:
        n = new CircleThreePoints(w,c,u,e,i);
        break;
      case AnnotationType.Arc:
        n = new Arc(w,c,u,e,i);
        break;
      case AnnotationType.Polygon:
        n = new Polygon(w,c,u,e,i);
        break;
      default:
        if (0 < CustomShapeTypes.Data.length)
          for (var o = 0; o < CustomShapeTypes.Data.length; o++) {
            var a = CustomShapeTypes.Data[o];
            if (a.type == t) {
              n = new a.obj(w,c,u,e,i);
              break
            }
          }
    }
    return V && (n.isDemo = !0,
        n.status = -1,
        n.lastUpdateTimeStamp = Date.now()),
        (n = n).imageId = d.id,
        n.type = t,
        n.scale = U,
        n.guid = guidGenerator(),
        n.refresh(U, v, s.rotate(), T),
        n.calibration = d.calibration,
        n.name = function(t) {
          var e, i = 0, n = !1;
          for (; !n; ) {
            e = t + " " + ++i;
            for (var o = !1, a = 0; a < R.length; a++) {
              if (R[a].name == e) {
                o = !0;
                break
              }
            }
            n = !o
          }
          return e
        }(n.name),
        n
  }
  function rt(t) {
    if (D)
      return p && (vt(p, AnnotationAction.Modify) || (C = getXYfromEvent(t),
          y = C[0].x,
          P = C[0].y,
          y -= m.x,
          P -= m.y,
      y == f.x && P == f.y || (p.moveOffset = new Seadragon.Point(y - f.x,P - f.y),
          f.x = y,
          f.y = P,
          A.showImageShapes(),
          p.moveOffset.x = 0,
          p.moveOffset.y = 0),
          t.stopPropagation(),
          mt(!0))),
          !1;
    if (k) {
      if (C = getXYfromEvent(t),
          y = C[0].x,
          P = C[0].y,
          y -= m.x,
          P -= m.y,
      y != f.x || P != f.y) {
        var e = new Seadragon.Point(y - f.x,P - f.y);
        f.x = y,
            f.y = P,
            M.move(e),
            A.showImageShapes()
      }
      return !1
    }
    if (O && null != p) {
      if (t.stopPropagation(),
          vt(p, AnnotationAction.Modify))
        return !1;
      var i, n;
      if (i = (C = getXYfromEvent(t))[0].x,
          n = C[0].y,
          i -= m.x + v.x,
          n -= m.y + v.y,
      i != y || n != P) {
        y = i,
            P = n;
        var o = new Seadragon.Point(y / U,P / U);
        return p.drawMove(o),
        p && p.isDemo && (p.lastUpdateTimeStamp = Date.now()),
            A.showImageShapes(),
            mt(!0),
            !1
      }
    } else
      $.support.touch || J(t)
  }
  function st(t) {
    if (D)
      return t.stopPropagation(),
          ct(),
          A.showImageShapes(),
          mt(),
          !1;
    if (k)
      return k = !1;
    if (O && null != p) {
      t.stopPropagation(),
      $.support.touch || (C = getXYfromEvent(t),
          y = C[0].x,
          P = C[0].y,
          y -= m.x + v.x,
          P -= m.y + v.y);
      var e = new Seadragon.Point(y / U,P / U);
      return p.drawUp(e),
          p.isEndDrawing ? (dt(e),
              mt()) : $.support.touch && A.showImageShapes(),
          !1
    }
  }
  function ht(t) {
    return ot(t)
  }
  function lt(t) {
    return st(t)
  }
  function dt(t) {
    if (p.cavScale = U,
        p.cavOffset = v,
        p.isEndDrawing = !0,
        p.measurement = !0,
        ct(),
    p.rotateRadian && (p.rsPoint && p.rePoint && (p.rsPoint = rotatePoint(p.rsPoint, -b, T),
        p.rePoint = rotatePoint(p.rePoint, -b, T),
        p.startPoint = p.toImagePoint(p.rsPoint),
        p.endPoint = p.toImagePoint(p.rePoint)),
    0 < p.points.length)) {
      var e = []
          , i = [];
      p.rotateRadian = -p.rotateRadian;
      for (var n = 0; n < p.points.length; n++)
        e.push(p.toCanvasPoint(p.points[n]));
      for (n = 0; n < e.length; n++)
        i.push(p.toImagePoint(e[n]));
      p.rotateRadian = -p.rotateRadian,
          p.points = i
    }
    p.drawEnd(t),
        A.showImageShapes(),
        wt(),
        F.trigger(B.ShapeDrawEnd)
  }
  function ct() {
    p && (p.activeMove = ActiveMove.None),
        o = null,
        D = O = !1
  }
  function ut(t) {
    return rt(t)
  }
  function gt(t) {
    for (var e = [], i = 0; i < t.length; i++)
      e.push(new Point(t[i].x,t[i].y));
    return e
  }
  function ft(t, e) {
    if (null == t)
      return t;
    var i;
    if (e = e || R,
        i = "object" == typeof t ? t.guid : t,
    e.length <= 0)
      return null;
    for (var n = 0; n < e.length; n++)
      if (e[n].guid == i)
        return e[n];
    return null
  }
  function pt(t) {
    if (j) {
      j.operationsIndex != j.operations.length - 1 && (j.operations = j.operations.slice(0, j.operationsIndex < 0 ? 0 : j.operationsIndex + 1));
      var e = {
        cavShapes: cloneObject(R, !0)
      };
      e.activeShape = ft(p, e.cavShapes),
          j.operations.push(e),
          j.operationsIndex = j.operations.length - 1,
      t || (j.disabledUndo = !1,
          j.disabledRedo = !0,
          F.trigger(B.OperationChanged, j.disabledUndo, j.disabledRedo))
    }
  }
  function vt(t, e) {
    var i = {
      IsCancel: !1
    };
    return F.trigger(B.BeforeAnnotationChange, t, e, i),
        !!i.IsCancel
  }
  function mt(t, e) {
    p && p.isDemo || (!A.isNeedRecordOperation || t || e || pt(),
        A.isShapeChanged = !0,
        F.trigger(B.ShapeChanged, t))
  }
  function wt() {
    F.trigger(B.SelectShape, p)
  }
  function yt(t) {
    e = t
  }
  function Pt(t) {
    for (var e, i = 0; i < E.length; i++) {
      if (null != (e = (0,
          E[i])(t)))
        break
    }
    return 0 != e
  }
  function St() {
    for (var a = [], t = 0; t < R.length; t++) {
      if ((e = R[t]).isEndDrawing && e.isDemo && !e.isEditing)
        Date.now() - e.lastUpdateTimeStamp > A.demoShapeFadeOutInterval && a.push(e)
    }
    for (t = 0; t < a.length; t++) {
      var e = a[t]
          , i = R.indexOf(e);
      e == p && (p = null,
          Y(u)),
          R.splice(i, 1)
    }
    !function t() {
      for (var e = [], i = 0; i < a.length; i++)
        (o = a[i]).alpha < 0 && e.push(o);
      for (i = 0; i < e.length; i++) {
        var n = a.indexOf(e[i]);
        a.splice(n, 1)
      }
      A.showImageShapes();
      for (i = 0; i < a.length; i++) {
        var o;
        null == (o = a[i]).alpha && (o.alpha = 1),
            o.alpha -= .02,
            o.fadeOutDraw()
      }
      0 < a.length && requestAnimationFrame(t)
    }()
  }
  this.demoShapeFadeOutInterval = 5e3,
      this.isNeedRecordOperation = !1,
      this.setOpenImage = function(t, e, i) {
        if (d = t,
            g = e,
            I = [],
        i && 0 < i.length)
          for (var n = 0; n < i.length; n++) {
            var o = i[n]
                , a = new ShapeROI(l,o.x,o.y,o.width,o.height,o.scanObjective,o.hasImage);
            a.imgObject = o,
                I.push(a)
          }
        else
          I = [],
              Y(l);
        var r = s.viewport.getContainerSize();
        S = new Grid(h,d.calibration,d.width,d.height,r.x,r.y),
            x = new Ruler(h,d.calibration,r.x,r.y),
            M = new Scalebar(h,d.calibration,r.x,r.y),
            q()
      }
      ,
      this.createShapeCanvas = function() {
        if (!SlideViewerSupport.canvas)
          return !1;
        (c = document.createElement("canvas")).id = "shapeCanvas",
            c.style.position = "absolute",
            (u = document.createElement("canvas")).id = "drawCanvas",
            u.style.position = "absolute",
            (h = document.createElement("canvas")).id = "measureCanvas",
            h.style.position = "absolute",
            (l = document.createElement("canvas")).id = "roiCanvas",
            l.style.position = "absolute",
            (i = document.createElement("canvas")).id = "commonCanvas",
            i.style.position = "absolute",
            (w = document.createElement("div")).id = "shapeContainer",
            w.style.position = "absolute",
            w.appendChild(c),
            w.appendChild(l),
            w.appendChild(u),
            w.appendChild(h),
            w.appendChild(i),
            s.addOverlay(w),
            Z(),
            Measurement = {
              Name: SlideViewerStrings.getString("Annotations.Dialog.Name"),
              Length: SlideViewerStrings.getString("Annotations.Measurement.TxtLength"),
              Width: SlideViewerStrings.getString("Annotations.Measurement.TxtWidth"),
              Height: SlideViewerStrings.getString("Annotations.Measurement.TxtHeight"),
              Angle: SlideViewerStrings.getString("Annotations.Measurement.TxtAngle"),
              ArcLength: SlideViewerStrings.getString("Annotations.Measurement.TxtArcLength"),
              Area: SlideViewerStrings.getString("Annotations.Measurement.TxtArea"),
              Majorhalfaxis: SlideViewerStrings.getString("Annotations.Measurement.TxtMajorhalfaxis"),
              Minorhalfaxis: SlideViewerStrings.getString("Annotations.Measurement.TxtMinorhalfaxis"),
              Perimeter: SlideViewerStrings.getString("Annotations.Measurement.TxtPerimeter"),
              Radius: SlideViewerStrings.getString("Annotations.Measurement.TxtRadius"),
              Description: SlideViewerStrings.getString("Annotations.Measurement.TxtDescription"),
              Unit: SlideViewerStrings.getString("Annotations.Measurement.TxtUnit"),
              AreaUnit: SlideViewerStrings.getString("Annotations.Measurement.TxtAreaUnit"),
              Deg: SlideViewerStrings.getString("Annotations.Measurement.TxtDeg")
            },
            ShapeDefaultConfig.name = SlideViewerStrings.getString("Annotations.Default.Name"),
            ShapeDefaultConfig.description = SlideViewerStrings.getString("Annotations.Default.Description"),
            _();
        var t = $(w)
            , e = $(s.elmt);
        return t.bind("mousedown", ht),
            t.dblclick(tt),
            e.bind("mouseup", lt),
            e.bind("mousemove", ut),
        $.support.touch && (t.bind("touchstart", et),
            e.bind("touchend", it),
            e.bind("touchmove", nt)),
            s.addEventListener("animationstart", W),
            s.addEventListener("animation", G),
            s.addEventListener("animationfinish", X),
            s.addEventListener("resize", Z),
            $(document).on("keydown", function(t) {
              var e = t.target.tagName.toLowerCase();
              if ("input" != e && "textarea" != e) {
                if (8 != t.which && 46 != t.which || A.deleteAnnotation(),
                ShortcutConfig.Direction.ctrlKey == t.ctrlKey && ShortcutConfig.Direction.shiftKey == t.shiftKey && ShortcutConfig.Direction.altKey == t.altKey) {
                  if (null == p || !p.isSelected)
                    switch (t.which) {
                      case ShortcutConfig.Direction.left:
                        return void s.changeViewport("left");
                      case ShortcutConfig.Direction.up:
                        return void s.changeViewport("up");
                      case ShortcutConfig.Direction.right:
                        return void s.changeViewport("right");
                      case ShortcutConfig.Direction.down:
                        return void s.changeViewport("down")
                    }
                  switch (t.which) {
                    case ShortcutConfig.Direction.left:
                      return void A.moveActiveShape(new Seadragon.Point(-1,0));
                    case ShortcutConfig.Direction.up:
                      return void A.moveActiveShape(new Seadragon.Point(0,-1));
                    case ShortcutConfig.Direction.right:
                      return void A.moveActiveShape(new Seadragon.Point(1,0));
                    case ShortcutConfig.Direction.down:
                      return void A.moveActiveShape(new Seadragon.Point(0,1))
                  }
                }
                if (ShortcutConfig.Scale.ctrlKey == t.ctrlKey && ShortcutConfig.Scale.shiftKey == t.shiftKey && ShortcutConfig.Scale.altKey == t.altKey)
                  switch (t.which) {
                    case ShortcutConfig.Scale.zoomIn:
                      return void s.zoomIn();
                    case ShortcutConfig.Scale.zoomOut:
                      return void s.zoomOut()
                  }
                if (ShortcutConfig.Rotate.ctrlKey == t.ctrlKey && ShortcutConfig.Rotate.shiftKey == t.shiftKey && ShortcutConfig.Rotate.altKey == t.altKey)
                  switch (t.which) {
                    case ShortcutConfig.Rotate.counterclockwise:
                      s.rotateOffset(ShortcutConfig.Rotate.degree);
                      break;
                    case ShortcutConfig.Rotate.clockwise:
                      s.rotateOffset(-ShortcutConfig.Rotate.degree)
                  }
              }
            }),
            !0
      }
      ,
      this.getCommonCanvas = function() {
        return i
      }
      ,
      this.getCavPosition = function() {
        return m
      }
      ,
      this.getCavOffset = function() {
        return v
      }
      ,
      this.getCavScale = function() {
        return U
      }
      ,
      this.getRotateOriginPoint = function() {
        return T
      }
      ,
      this.hasAnnotationOnView = function(t) {
        if (R && !(R.length <= 0)) {
          var e;
          t = t || new Rect(0,0,c.width,c.height);
          for (var i = [], n = 0; n < R.length; n++)
            if ((e = R[n]).isEndDrawing && !(e.status < 0)) {
              var o = e.isSelected;
              e.isHitMyArea(new Point(0,0)),
                  e.isSelected = o,
              intersectRect(e.cavRect, t) && i.push(e)
            }
          if (0 == i.length)
            return !1;
          for (n = 0; n < i.length; n++)
            switch ((e = i[n]).type) {
              case AnnotationType.Line:
              case AnnotationType.Arrow:
                if (pointInRect(e.rsPoint, t) || pointInRect(e.rePoint, t))
                  return !0;
                break;
              case AnnotationType.Rectangle:
              case AnnotationType.Ellipse:
              case AnnotationType.Circle:
              case AnnotationType.CircleThreePoints:
              case AnnotationType.Remark:
              case AnnotationType.Position:
                return !0;
              case AnnotationType.CurveRounded:
              case AnnotationType.Curve:
                for (n = 0; n < e.tempPoints.length; n++)
                  if (pointInRect(rotatePoint(e.tempPoints[n], b, T), t))
                    return !0;
                break;
              case AnnotationType.Angle:
              case AnnotationType.Arc:
              case AnnotationType.Polygon:
                for (n = 0; n < e.cavPoints.length; n++)
                  if (pointInRect(e.cavPoints[n], t, e.width / 2))
                    return !0;
                if (e.type == AnnotationType.Arc && e.verticalPoint && pointInRect(e.verticalPoint, t, e.width / 2))
                  return !0;
                break;
              default:
                if (A.checkShapeOnContainer(e, t))
                  return !0
            }
          return !1
        }
      }
      ,
      this.clear = function() {
        Y(c),
            Y(u),
            Y(h),
            Y(l);
        for (var t = 0; t < R.length; t++)
          $(R[t].txtElmt).remove(),
              $(R[t].inpElmt).remove()
      }
      ,
      this.reload = function(t) {
        A.clear(),
            A.initImageAnnotationsShape(t),
            A.showImageShapes()
      }
      ,
      this.initImageAnnotationsShape = function(t, e) {
        if (null != t) {
          var i, n, o, a;
          null == e && (e = !1),
          e || A.clearShapeArray();
          for (var r = 0; r < t.length; r++) {
            var s = t[r];
            if (s.region && null != s.region.x && null != s.region.y && null != s.region.width && null != s.region.height) {
              switch (startPoint = new SeadragonPoint(s.region.x,s.region.y),
                  endPoint = new SeadragonPoint(startPoint.x + s.region.width,startPoint.y + s.region.height),
                  n = s.type) {
                case AnnotationType.Line:
                  i = new Line(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Arrow:
                  i = new Arrow(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Rectangle:
                  i = new Rectangle(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Ellipse:
                  i = new Ellipse(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Remark:
                  i = new Remark(w,c,u,startPoint,endPoint,A.dirtyCanvas);
                  break;
                case AnnotationType.Position:
                  i = new Position(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.CurveRounded:
                  if (!CurveRounded.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new CurveRounded(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Curve:
                  if (!Curve.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new Curve(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Angle:
                  if (!Angle.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new Angle(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Circle:
                  i = new Circle(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.CircleThreePoints:
                  if (!CircleThreePoints.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new CircleThreePoints(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Arc:
                  if (!Arc.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new Arc(w,c,u,startPoint,endPoint);
                  break;
                case AnnotationType.Polygon:
                  if (!Polygon.prototype.validate(startPoint, endPoint, s.points))
                    continue;
                  i = new Polygon(w,c,u,startPoint,endPoint);
                  break;
                default:
                  if (0 < CustomShapeTypes.Data.length)
                    for (var h = 0; h < CustomShapeTypes.Data.length; h++) {
                      var l = CustomShapeTypes.Data[h];
                      if (l.type == n) {
                        i = new l.obj(w,c,u,startPoint,endPoint,s.points,U,v);
                        break
                      }
                    }
                  i = i || new Shape(w,c,u,startPoint,endPoint)
              }
              null != i && R.push((o = s,
                  (a = i).imageId = o.imageId,
                  a.guid = o.guid,
                  a.name = o.name,
                  a.description = o.description,
                  a.scale = o.scale,
                  a.width = o.width,
                  a.type = o.type,
                  a.region = o.region,
                  a.fontUnderLine = o.fontUnderLine,
                  a.fontSize = o.fontSize,
                  a.fontFamily = o.fontFamily,
                  a.fontItalic = o.fontItalic,
                  a.fontBold = o.fontBold,
                  a.visible = o.visible,
                  a.color = NumberToHex(o.color),
                  a.measurement = o.measurement = A.isAlwaysDisaplyMeasurement,
                  a.radius = o.radius,
                  a.arcLength = o.arcLength,
                  a.angle = o.angle,
                  a.which = null == o.which ? a.which : o.which,
                  a.isLocked = o.isLocked,
                  a.status = o.status,
                  a.externalData = o.externalData,
                  a.saveData = o.saveData,
                  a.points = gt(o.points),
                  a.calibration = d.calibration,
                  a.isEndDrawing = !0,
                  a)),
              i.type != AnnotationType.Remark && i.type != AnnotationType.Position || i.updateElmtValue(i.description)
            }
          }
          e || (yt(t),
          A.isNeedRecordOperation && (j = {
            operationsIndex: -1,
            operations: [],
            disabledUndo: !0,
            disabledRedo: !0
          },
              pt(!0),
              F.trigger(B.OperationChanged, j.disabledUndo, j.disabledRedo)))
        }
      }
      ,
      this.addOperation = pt,
      this.undo = function() {
        if (!(j.operationsIndex <= 0)) {
          var t = j.operationsIndex < 0 || j.operations[j.operationsIndex];
          j.operationsIndex--,
              t = j.operationsIndex < 0 ? null : j.operations[j.operationsIndex],
              R = cloneObject(t.cavShapes),
              p = ft(t.activeShape),
              A.showImageShapes(!0),
              j.operationsIndex <= 0 ? (j.disabledUndo = !0,
                  j.disabledRedo = !1) : j.operationsIndex != j.operations.length - 1 && (j.disabledUndo = !1,
                  j.disabledRedo = !1),
              mt(!1, !0),
              F.trigger(B.OperationChanged, j.disabledUndo, j.disabledRedo)
        }
      }
      ,
      this.redo = function() {
        if (!(j.operationsIndex >= j.operations.length - 1)) {
          j.operationsIndex++;
          var t = j.operationsIndex > j.operations.length - 1 ? null : j.operations[j.operationsIndex];
          R = cloneObject(t.cavShapes),
              p = ft(t.activeShape),
              A.showImageShapes(!0),
              j.operationsIndex >= j.operations.length - 1 ? (j.disabledUndo = !1,
                  j.disabledRedo = !0) : j.operationsIndex != j.operations.length - 1 && (j.disabledUndo = !1,
                  j.disabledRedo = !1),
              mt(!1, !0),
              F.trigger(B.OperationChanged, j.disabledUndo, j.disabledRedo)
        }
      }
      ,
      this.getAnnotations = function(t) {
        if (t) {
          for (var e = [], i = 0; i < R.length; i++) {
            var n = R[i];
            Pt(n) && e.push(n)
          }
          return e
        }
        return R
      }
      ,
      this.dirtyCanvas = function() {
        mt()
      }
      ,
      this.bind = function(t, e) {
        F.addListener(t, e)
      }
      ,
      this.unbind = function(t, e) {
        F.removeListener(t, e)
      }
      ,
      this.resumeAnnotations = function() {
        for (var t = 0; t < R.length; t++)
          R[t].type != AnnotationType.Remark && R[t].type != AnnotationType.Position || ($(R[t].txtElmt).remove(),
              $(R[t].inpElmt).remove());
        A.initImageAnnotationsShape(e),
            A.showImageShapes(),
            A.isShapeChanged = !1
      }
      ,
      this.setSelectedEnable = function(t) {
        if (!O) {
          o = null;
          var e = !1;
          if (!(A.isSelectedEnable = t)) {
            for (var i = 0; i < R.length; i++)
              (R[i].isSelected || R[i].measurement) && (R[i].isSelected = !1,
              A.isAlwaysDisaplyMeasurement || (R[i].measurement = !1),
                  e = !0);
            e && A.showImageShapes()
          }
        }
      }
      ,
      this.setShowInfoEnable = function(t) {
        if (!(A.isShowInfo = t))
          for (var e = 0; e < R.length; e++)
            R[e].measurement && (A.isAlwaysDisaplyMeasurement || (R[e].measurement = !1),
                $(R[e].txtElmt).hide())
      }
      ,
      this.saveAnnotations = function() {
        if (null != d && A.isShapeChanged) {
          d.annotations = [];
          for (var t = 0; t < R.length; t++)
            R[t].status < 0 || d.annotations.push((e = new AnnotationInfo,
                i = R[t],
                e.imageId = i.imageId,
                e.guid = null == i.guid ? guidGenerator() : i.guid,
                e.name = i.name,
                e.description = i.description,
                e.scale = i.scale,
                e.width = i.width,
                e.type = i.type,
                e.fontUnderLine = i.fontUnderLine,
                e.fontSize = i.fontSize,
                e.fontFamily = i.fontFamily,
                e.fontItalic = i.fontItalic,
                e.fontBold = i.fontBold,
                e.visible = i.visible,
                e.color = HexToNumber(i.color),
                e.measurement = i.measurement,
                e.radius = i.radius,
                e.arcLength = i.arcLength,
                e.angle = i.angle,
                e.which = i.which,
                e.isLocked = i.isLocked,
                e.status = i.status,
                e.saveData = i.saveData,
                e.points = gt(i.points),
                e.region = new SeadragonRect(i.startPoint.x,i.startPoint.y,i.endPoint.x - i.startPoint.x,i.endPoint.y - i.startPoint.y),
                e));
          var e, i;
          s.provider.updateAnnotations(g, d.id, d.annotations, function(t) {
            t.success && (A.isShapeChanged = !1);
            F.trigger(B.SaveImageAnnotationsCompleted, t)
          }),
              yt(d.annotations)
        }
      }
      ,
      this.finishDrawing = function() {
        dt()
      }
      ,
      this.addShape = function(t, e, i, n, o, a) {
        var r = at(t, e, i);
        if (null != n && 0 < n.length && (r.points = n),
            o) {
          if (vt(p, AnnotationAction.Add))
            return;
          R.push(p),
              mt()
        } else
          r.status = -1;
        r.editable = r.measurement = A.isAlwaysDisaplyMeasurement || a,
        a && (p = r),
            A.showImageShapes()
      }
      ,
      this.getActiveShape = function() {
        return p
      }
      ,
      this.moveActiveShape = function(t, e) {
        null != p && (vt(p, AnnotationAction.Modify) || (p.moveOffset = t,
            p.activeMove = e || ActiveMove.ShapeMove,
            A.showImageShapes(),
            p.activeMove = ActiveMove.None,
            p.moveOffset.x = 0,
            p.moveOffset.y = 0,
            mt()))
      }
      ,
      this.setActiveShape = function(t) {
        _(),
        t && (t.isSelected = !0,
            p = t,
            wt())
      }
      ,
      this.setActiveShapeByGUID = function(t, e, i) {
        null == e && (e = !0),
        null == i && (i = !0);
        for (var n = 0; n < R.length; n++)
          if (R[n].guid == t) {
            K(),
                R[n].isSelected = e,
                R[n].measurement = A.isAlwaysDisaplyMeasurement || i,
                p = R[n],
                A.showImageShapes(),
                wt();
            break
          }
      }
      ,
      this.getShapeByGUID = function(t) {
        for (var e = 0; e < R.length; e++)
          if (R[e].guid == t)
            return R[e]
      }
      ,
      this.getImageData = function(t, e) {
        null == e && (e = new SeadragonRect(0,0,c.width,c.height));
        var i = document.createElement("canvas");
        i.width = e.width,
            i.height = e.height;
        var n = i.getContext("2d");
        return n.beginPath(),
            n.clearRect(0, 0, i.width, i.height),
            n.fillStyle = "#fff",
            n.fillRect(0, 0, i.width, i.height),
            n.drawImage(t, e.x, e.y, e.width, e.height, 0, 0, i.width, i.height),
            n.drawImage(c, e.x, e.y, e.width, e.height, 0, 0, i.width, i.height),
            n.drawImage(l, e.x, e.y, e.width, e.height, 0, 0, i.width, i.height),
            n.drawImage(u, e.x, e.y, e.width, e.height, 0, 0, i.width, i.height),
            n.drawImage(h, e.x, e.y, e.width, e.height, 0, 0, i.width, i.height),
            i.toDataURL("image/jpeg")
      }
      ,
      this.turnToShape = function() {
        if (p) {
          var t = s.viewport.getContainerSize()
              , e = d.width * p.scale / t.x;
          s.viewport.zoomTo(e),
          b && (p.movePoint = rotatePoint(p.movePoint, -b, T));
          var i = p.toImagePoint(p.movePoint)
              , n = i.x / d.width
              , o = i.y / d.width;
          s.viewport.panTo(new Point(n,o))
        }
      }
      ,
      this.showMeasurement = function(t, e) {
        for (var i = 0, n = 0; n < R.length; n++)
          R[n].type != AnnotationType.Remark && R[n].type != AnnotationType.Position && (R[n].measurement = t,
              R[n].showMeasurement(),
              i++);
        0 < i && (A.showImageShapes(),
        e && mt())
      }
      ,
      this.disSelectShape = function() {
        p && (_(),
            A.showImageShapes())
      }
      ,
      this.showAnnotations = function(t) {
        for (var e, i = 0; i < R.length; i++)
          (e = R[i]).visible = t,
          R[i].type != AnnotationType.Remark && R[i].type != AnnotationType.Position || $(e.inpElmt).hide();
        _(),
            A.showImageShapes(!0)
      }
      ,
      this.addAnnotations = function(t, e) {
        null == t || t.length <= 0 || (null == e && (e = !1),
            A.initImageAnnotationsShape(t, !0),
            A.showImageShapes(),
        e && mt())
      }
      ,
      this.deleteAnnotations = function(t, e) {
        if (!(null == t || t.length <= 0)) {
          var i, n, o;
          null == e && (e = !1);
          for (var a = [], r = 0; r < R.length; r++) {
            n = (i = R[r]).guid,
                o = !1;
            for (var s = 0; s < t.length; s++)
              if (n == t[s]) {
                o = !0;
                break
              }
            o ? ($(i.txtElmt).remove(),
                $(i.inpElmt).remove()) : a.push(i)
          }
          R = a,
              A.showImageShapes(),
          e && mt()
        }
      }
      ,
      this.deleteAnnotation = function() {
        for (var t, e, i = 0; i < R.length; i++)
          if (p == R[i] || R[i].isSelected) {
            e = R[t = i];
            break
          }
        if (null != t) {
          if (vt(R[t], AnnotationAction.Del))
            return;
          R.splice(t, 1),
              A.showImageShapes(),
              $(e.txtElmt).remove(),
              $(e.inpElmt).remove(),
              mt(),
              _()
        }
      }
      ,
      this.registerVisibleFilter = function(t) {
        E.push(t)
      }
      ,
      this.showImageShapes = function(t) {
        if (SlideViewerSupport.canvas && null != c && null != R) {
          if (null == t && (t = !1),
              this.clearShapeCanvas(t),
              b = s.rotate(),
          L || null == p || t || !O && !D) {
            if (SlideViewerConfig.enableAnnotation)
              for (var e = 0; e < R.length; e++) {
                var i = R[e];
                i.visible && (Pt(i) ? (i.refresh(U, v, b, T),
                    i.draw()) : ($(i.txtElmt).hide(),
                    $(i.inpElmt).hide()))
              }
            SlideViewerConfig.showGrid() && S.draw(U, r),
            SlideViewerConfig.showRulers() && x.draw(U, r),
            SlideViewerConfig.showScalebar() && M.draw(U, r);
            for (e = 0; e < I.length; e++)
              I[e].refresh(U, v, b, T),
                  I[e].draw()
          } else
            p.refresh(U, v, b, T),
                p.draw();
          F.trigger(B.ActualShapes),
              A.renderCommonCanvas()
        }
      }
      ,
      this.refreshImageShapes = function() {
        A.showImageShapes(!0)
      }
      ,
      this.clearImageShapes = function() {
        A.clearShapeCanvas(!0)
      }
      ,
      this.setDrawAnnotationType = function(t) {
        o = t
      }
      ,
      this.clearShapeCanvas = function(t) {
        if (null == t && (t = !1),
            t) {
          if (Y(c),
              Y(u),
              Y(h),
              Y(l),
              !SlideViewerConfig.enableAnnotation)
            for (var e = 0; e < R.length; e++)
              $(R[e].txtElmt).hide(),
                  $(R[e].inpElmt).hide()
        } else
          L || null == p || !O && !D ? (Y(c),
          null != p && Y(u),
          (SlideViewerConfig.showGrid() || SlideViewerConfig.showRulers() || SlideViewerConfig.showScalebar()) && Y(h),
          d.isBaseImage && 0 < I.length && Y(l)) : Y(u)
      }
      ,
      this.clearShapeArray = function() {
        A.clear(),
            R = []
      }
      ,
      this.demo = function(t) {
        if (void 0 === t)
          return V;
        (V = t) ? N = setInterval(St, 1e3) : clearInterval(N)
      }
      ,
      this.renderCommonCanvas = function() {
        var t = i.getContext("2d");
        t.clearRect(0, 0, i.width, i.height),
            F.trigger("renderComCav", t, i.width, i.height)
      }

      console.log(F)
};
ShapeCanvas.prototype.checkShapeOnContainer = function(t, e) {
  return !1
}
;
var ClickResult = function() {
  this.isIn = !1,
      this.length = 0,
      this.activeMove,
      this.pIndex
};
Measurement = {},
    AnnotationType = {
      NONE: "NONE",
      Line: "Line",
      Arrow: "Arrow",
      Rectangle: "Rectangle",
      Ellipse: "Ellipse",
      Remark: "Remark",
      Position: "Position",
      CurveRounded: "RoundedCurve",
      Curve: "FreeRoundedCurve",
      Angle: "Angle",
      Circle: "Circle",
      CircleThreePoints: "CircleThreePoints",
      Arc: "Arc",
      Polygon: "Polygon",
      Region: "Region",
      AddType: function(t, e) {
        t && e && (this[t] = e)
      }
    },
    AnnotationAction = {
      Add: "Add",
      Modify: "Modify",
      Del: "Del"
    };
var ImageProcessing, ImageFilter, SharpnessFilter, ColorEnhancementFilter, IColorFilter, GammaCorrectionFilter, ColorAdjustmentFilter, ColorMappingFilter, ColorFilters, CustomShapeTypes = {
  Data: [],
  AddAnnotationType: function(t, e) {
    if (t && e) {
      var i = {
        type: t,
        obj: e
      };
      this.Data.push(i)
    }
  }
}, NavigationView = function(c, t, e, i) {
  var u, g, f, p, v, m, w, y = this, P = !1, n = null, l = null, d = null, S = null, x = null, o = 25, a = 25, s = 0, h = 0, M = "px", C = e, b = i, T = 1, r = t, A = new SeadragonRect(0,0,C,b), R = new SeadragonPoint(0,0);
  this.imgLoaded = !1;
  var I = new Seadragon.EventManager
      , E = {
    ViewerChanged: "viewerchanged",
    VisibilityChanged: "visibilitychanged"
  };
  function O() {
    return {
      shadeBounds: new SeadragonRect(parseFloat(x.style.left) + o,parseFloat(x.style.top) + a,parseFloat(x.style.width),parseFloat(x.style.height)),
      navigationBounds: new SeadragonRect(o,a,parseFloat(S.style.width),parseFloat(S.style.height))
    }
  }
  function D(t) {
    P = !1,
        $(S).unbind("mousemove", L)
  }
  function k(t) {
    return t.stopPropagation(),
        P = !0,
        m = getXYfromEvent(t),
        f = m[0].x,
        p = m[0].y,
        $(S).mousemove(L),
        !1
  }
  function L(t) {
    t.stopPropagation();
    var e = 0
        , i = 0
        , n = 0
        , o = 0;
    if (P) {
      if (n = (m = getXYfromEvent(t))[0].x,
          o = m[0].y,
          e = n - f,
          i = o - p,
          f = n,
          p = o,
      0 == i && 0 == e)
        return !1;
      if (x.style.top = parseFloat(x.style.top) + i + M,
          x.style.left = parseFloat(x.style.left) + e + M,
          u.style.top = parseFloat(u.style.top) + i + M,
          g.style.left = parseFloat(g.style.left) + e + M,
          y.onUserMove) {
        var a = parseFloat(x.style.left) + parseFloat(x.style.width) / 2 - R.x
            , r = parseFloat(x.style.top) + parseFloat(x.style.height) / 2 - R.y
            , s = c.rotate()
            , h = new SeadragonPoint(a,r);
        null != s && (h = h.rotate(-s, new SeadragonPoint(C / 2,b / 2)));
        var l = h.x / (parseFloat(x.style.width) * v)
            , d = h.y / (parseFloat(x.style.width) * v);
        y.onUserMove(l, d),
            w = O(),
            I.trigger(E.ViewerChanged, w)
      }
      return !1
    }
  }
  function U(t) {
    return P = !1
  }
  function F(t) {
    if (m = getXYfromEvent(t),
        f = m[0].x,
        p = m[0].y,
        u.style.top = parseFloat(p - h - T - R.y) + M,
        g.style.left = parseFloat(f - s - T - R.x) + M,
        x.style.top = parseFloat(p - h - parseFloat(x.style.height) / 2 - T - R.y) + M,
        x.style.left = parseFloat(f - s - parseFloat(x.style.width) / 2 - T - R.x) + M,
        y.onUserMove) {
      var e = parseFloat(x.style.left) + parseFloat(x.style.width) / 2
          , i = parseFloat(x.style.top) + parseFloat(x.style.height) / 2
          , n = c.rotate()
          , o = new SeadragonPoint(e,i);
      null != n && (o = o.rotate(-n, new SeadragonPoint(C / 2,b / 2)));
      var a = o.x / (parseFloat(x.style.width) * v)
          , r = o.y / (parseFloat(x.style.width) * v);
      y.onUserMove(a, r),
          w = O(),
          I.trigger(E.ViewerChanged, w)
    }
    return t.stopPropagation(),
        !1
  }
  this.onUserMove,
      function() {
        $("#Thumbnail").remove(),
            (S = document.createElement("div")).id = "Thumbnail",
            S.style.width = C + M,
            S.style.height = b + M,
            S.style.top = a + M,
            S.style.left = o + M,
            SlideViewerSupport.canvas ? ((l = document.createElement("canvas")).width = C,
                    l.height = b,
                    l.id = "cavView",
                    S.appendChild(l),
                    (d = new Image).crossOrigin = "anonymous",
                    d.src = r,
                    d.onload = function() {
                      y.imgLoaded = !0,
                          y.refresh()
                    }
            ) : ((n = document.createElement("img")).id = "imgView",
                n.src = r,
                n.width = C,
                n.height = b,
                n.alt = "",
                S.appendChild(n)),
            (u = document.createElement("div")).id = "hLine",
            u.style.top = b / 2 + M,
            u.style.width = C + M,
            S.appendChild(u),
            (g = document.createElement("div")).id = "vLine",
            g.style.left = C / 2 + M,
            g.style.height = b + M,
            S.appendChild(g),
            (x = document.createElement("div")).id = "viewRect",
            x.style.top = (b - 50) / 2 + M,
            x.style.left = (C - 50) / 2 + M;
        var t = $(x);
        t.mousedown(k),
            t.mouseup(D),
            $(S).mouseleave(U),
            $(S).mousedown(F),
        $.support.touch && (t.bind("touchstart", k),
            t.bind("touchmove", L),
            t.bind("touchend", D),
            $(S).bind("touchstart", F)),
            S.appendChild(x)
      }(),
      $(S).css({
        position: "relative",
        "z-index": "0",
        overflow: "hidden",
        border: "1px solid #319DCE"
      }),
      $(l).css({
        "z-index": "0",
        position: "absolute"
      }),
      $(n).css({
        "z-index": "0"
      }),
      $(u).css({
        height: "1px",
        "line-height": "1px",
        position: "absolute",
        left: "0px",
        "background-color": "#FF0000",
        "z-index": "0"
      }),
      $(g).css({
        width: "1px",
        "line-height": "1px",
        position: "absolute",
        top: "0px",
        "background-color": "#FF0000",
        "z-index": "0"
      }),
      $(x).css({
        border: "1px solid #FF0000",
        "background-color": "#FFFFFF",
        position: "absolute",
        width: "50px",
        height: "50px",
        cursor: "pointer",
        "z-index": "10",
        top: "0px",
        left: "0px",
        filter: "alpha(opacity=50)",
        opacity: "0.5"
      }),
      y.elmt = S,
      this.bind = function(t, e) {
        I.addListener(t, e)
      }
      ,
      this.unbind = function(t, e) {
        I.removeListener(t, e)
      }
      ,
      this.isOnDragging = function() {
        return P
      }
      ,
      this.setVisibility = function(t) {
        t ? $(S).show() : $(S).hide(),
            I.trigger(E.VisibilityChanged, t)
      }
      ,
      this.refresh = function() {
        if (SlideViewerSupport.canvas && y.imgLoaded) {
          var t = l.getContext("2d");
          t.clearRect(0, 0, l.width, l.height);
          var e = c.rotate();
          if (null != e) {
            var i = new SeadragonRect(0,0,C,b)
                , n = (A = i.rotate(e, i.getCenter())).width + .5
                , o = A.height + .5
                , a = new SeadragonPoint(n / 2,o / 2);
            S.style.width = n + M,
                S.style.height = o + M,
                l.width = n,
                l.height = o,
                R = new SeadragonPoint((n - C) / 2,(o - b) / 2);
            var r = new SeadragonPoint(R.x,R.y).rotate(e, a);
            t.translate(r.x, r.y),
                t.rotate(-e),
                t.strokeStyle = "#319DCE",
                t.lineWidth = 1,
                t.strokeRect(0, 0, C, b),
                t.stroke(),
                t.drawImage(d, 0, 0, C, b),
                t.rotate(2 * Math.PI + e),
                t.translate(-r.x, -r.y);
            var s = c.viewport.getBounds(!0)
                , h = c.viewport.getAspectRatio();
            y.UpdateViewRect(c.viewport.getZoom(), s.x, s.y, h)
          } else
            t.drawImage(d, 0, 0, C, b)
        }
      }
      ,
      this.resetUrl = function(t) {
        r = t,
            l ? (y.imgLoaded = !1,
                    (d = new Image).crossOrigin = "anonymous",
                    d.src = r,
                    d.onload = function() {
                      y.imgLoaded = !0,
                          y.refresh()
                    }
            ) : n && (n.src = r)
      }
      ,
      this.getCanvas = function() {
        return l
      }
      ,
      this.UpdateViewRect = function(t, e, i, n) {
        if (v = t,
            n,
            !P) {
          width = C / v,
              height = width / n,
              topX = C * e,
              topY = C * i;
          var o = new SeadragonPoint(topX,topY)
              , a = new SeadragonPoint(width,height)
              , r = c.rotate();
          if (null != r) {
            var s = new SeadragonPoint(o.x + width / 2,o.y + height / 2);
            s = s.rotate(r, new SeadragonPoint(C / 2,b / 2)),
                o = new SeadragonPoint(s.x - width / 2,s.y - height / 2)
          }
          x.style.width = a.x + M,
              x.style.height = a.y + M,
              x.style.top = R.y + o.y + M,
              x.style.left = R.x + o.x + M,
              u.style.top = R.y + a.y / 2 + o.y + M,
              g.style.left = R.x + a.x / 2 + o.x + M,
              u.style.width = A.width + M,
              g.style.height = A.height + M,
              w = O(),
              I.trigger(E.ViewerChanged, w)
        }
      }
      ,
      this.UpdateThumbnailOrigin = function(t, e) {
        s = t,
            h = e
      }
};
!function() {
  if (!ImageProcessing) {
    var n, o, a, r, s = new Seadragon.EventManager, h = "saveimageadjustmentcompleted", t = (ImageProcessing = function(t) {
          n = t
        }
    ).prototype;
    t.bind = function(t, e) {
      s.addListener(t, e)
    }
        ,
        t.unbind = function(t, e) {
          s.removeListener(t, e)
        }
        ,
        t.start = function() {
          o = o || new ColorFilters,
              a = a || new ColorEnhancementFilter,
              r = r || new SharpnessFilter,
              n.addEventListener("animation", e),
              e()
        }
        ,
        t.stop = function() {
          n.removeEventListener("animation", e),
              n.update()
        }
        ,
        t.saveImageAdjustment = function(t) {
          if (n.provider) {
            var e = n.getCurrentSlide()
                , i = n.getCurrentImage();
            i.imageAdjustment = t,
                n.provider.updateImageAdjustment(e.id, i.id, t, function(t) {
                  s.trigger(h, t)
                })
          }
        }
        ,
        t.adjust = function(t) {
          t ? i(t) : e()
        }
  }
  function i(t) {
    if (t && t.isChanged()) {
      l(n.drawer.getCanvas(), t);
      var e = n.getNavigationView()
          , i = e.getCanvas();
      i && (e.refresh(),
          l(i, t))
    }
  }
  function l(t, e) {
    var i = t.getContext("2d")
        , n = i.getImageData(0, 0, t.width, t.height);
    o.reset(),
    e.isDefaultGamma() || o.setCorrectionValue(e.gamma, 0),
    e.isDefaultColorChannel() || o.setContrast(e.red, e.green, e.blue),
    e.isDefaultContrast() || o.setGray(e.contrastMin, e.contrastMax),
        o.refreshLut(),
        o.filter(n),
    e.isDefaultSaturation() || (a.setCorrectionValue(e.saturation),
        a.filter(n)),
    e.isDefaultSharpness() || (r.setSharpness(e.sharpness),
        r.filter(n)),
        i.putImageData(n, 0, 0)
  }
  function e() {
    if (SlideViewerSupport.imageAdjustment && SlideViewerConfig.enableImageAdjustment) {
      var t = n.getCurrentImage()
          , e = n.drawer.useCanvas();
      t && t.imageAdjustment && e && t.imageAdjustment.isChanged() && i(t.imageAdjustment)
    }
  }
}(),
ImageFilter || ((ImageFilter = function() {}
    ).prototype.filter = function(t) {}
),
    function() {
      if (!SharpnessFilter) {
        (SharpnessFilter = function() {
              this.level = 0,
                  ImageFilter.apply(this)
            }
        ).prototype = new ImageFilter;
        var t = SharpnessFilter.prototype;
        t.setSharpness = function(t) {
          t < 0 ? this.level = 0 : 10 < t && (this.level = 10),
              this.level = t
        }
            ,
            t.filter = function(t) {
              var e, i, n, o, a, r, s, h, l, d, c, u, g, f = this.level, p = t.width, v = t.height, m = 4 * p, w = t.data;
              if (p < 4 || 8196 < p)
                return 1;
              if (v < 4 || 8196 < v)
                return 1;
              for (d = 0 < f ? (l = 4 * -(h = -f) + 8,
                  3) : (8 < (h = -f) && (h = 8),
                  l = 32 - 4 * h,
                  5),
                       y(g = new Array(5 * m), 0, w, 0, 5 * m),
                       e = 2; e < v - 2; e++) {
                for (n = (e - 2) * m + 7,
                         o = e * m + 7,
                         a = (e + 2) * m + 7,
                         c = e % 5 * m,
                         u = (e - 2) % 5 * m,
                         i = 2; i < p - 2; i++)
                  n++,
                      a++,
                      r = 4 * i + c,
                      s = w[++o] * l + (w[n] + w[a] + w[o - 8] + w[o + 8]) * h >> d,
                      g[r] = s < 0 ? 0 : 255 < s ? 255 : s,
                      n++,
                      a++,
                      r++,
                      s = w[++o] * l + (w[n] + w[a] + w[o - 8] + w[o + 8]) * h >> d,
                      g[r] = s < 0 ? 0 : 255 < s ? 255 : s,
                      n++,
                      a++,
                      r++,
                      s = w[++o] * l + (w[n] + w[a] + w[o - 8] + w[o + 8]) * h >> d,
                      g[r] = s < 0 ? 0 : 255 < s ? 255 : s,
                      n++,
                      o++,
                      a++,
                      g[++r] = w[o];
                y(w, (e - 2) * p * 4 + 8, g, 8 + u, 4 * (p - 4))
              }
              g = null
            }
      }
      function y(t, e, i, n, o) {
        var a = 0;
        for (a = 0; a < o; a++)
          t[e + a] = i[n + a]
      }
    }(),
    function() {
      if (!ColorEnhancementFilter) {
        var t = (ColorEnhancementFilter = function() {
              this.v = 0,
                  ImageFilter.apply(this)
            }
        ).prototype;
        t.setCorrectionValue = function(t) {
          t < -10 && (t = -10),
          10 < t && (t = 10),
              this.v = t
        }
            ,
            t.filter = function(t) {
              var e = t.width
                  , i = t.height
                  , n = t.data
                  , o = 1 * this.v;
              o < -10 && (o = -10),
              10 < o && (o = 10);
              var a, r, s, h, l, d, c, u, g, f = new Array(9), p = new Array(2560), v = 0;
              s = r = a = 1,
              o < 0 && (o = (o + 10) / 10),
                  o < 1 ? (f[1] = Math.floor(.587 * (1 - o) * 1024),
                      f[2] = Math.floor(.114 * (1 - o) * 1024),
                      f[3] = Math.floor(.299 * (1 - o) * 1024),
                      f[5] = Math.floor(.114 * (1 - o) * 1024),
                      f[6] = Math.floor(.299 * (1 - o) * 1024),
                      f[7] = Math.floor(.587 * (1 - o) * 1024),
                      f[0] = Math.floor(1024 * (.299 + .701 * o)),
                      f[4] = Math.floor(1024 * (.587 + .413 * o)),
                      f[8] = Math.floor(1024 * (.114 + .866 * o))) : (f[1] = Math.floor(-o / 10 * 1024 * r),
                      f[2] = Math.floor(-o / 50 * 1024 * s),
                      f[3] = Math.floor(-o / 50 * 1024 * a),
                      f[5] = Math.floor(-o / 20 * 1024 * s),
                      f[6] = Math.floor(-o / 50 * 1024 * a),
                      f[7] = Math.floor(-o / 50 * 1024 * r),
                      f[0] = Math.floor((1024 - f[1] - f[2]) * a),
                      f[4] = Math.floor((1024 - f[3] - f[5]) * r),
                      f[8] = Math.floor((1024 - f[6] - f[7]) * s));
              for (var m = 0; m < 9; m++)
                for (var w = 0; w < 256; w++)
                  p[256 * m + w] = f[m] * w;
              for (var y = 0; y < i; y++) {
                v = y * e * 4;
                for (var P = 0; P < e; P++)
                  c = n[v],
                      u = n[v + 1],
                      g = n[v + 2],
                  (h = p[0 + c] + p[256 + u] + p[512 + g]) < 0 && (h = 0),
                  (l = p[768 + c] + p[1024 + u] + p[1280 + g]) < 0 && (l = 0),
                  (d = p[1536 + c] + p[1792 + u] + p[2048 + g]) < 0 && (d = 0),
                  255 < (h >>= 10) && (h = 255),
                  255 < (l >>= 10) && (l = 255),
                  255 < (d >>= 10) && (d = 255),
                      n[v] = h,
                      n[v + 1] = l,
                      n[v + 2] = d,
                      v += 4
              }
            }
      }
    }(),
IColorFilter || ((IColorFilter = function() {}
    ).prototype.filter = function(t, e, i) {}
        ,
        IColorFilter.prototype.reset = function() {}
),
    function() {
      if (!GammaCorrectionFilter) {
        var t = (GammaCorrectionFilter = function() {
              this.gamma = 1,
                  this.shift = 0,
                  IColorFilter.apply(this)
            }
        ).prototype;
        t.reset = function() {
          this.gamma = 1,
              this.shift = 0
        }
            ,
            t.setCorrectionValue = function(t, e) {
              this.gamma = t,
                  this.shift = e
            }
            ,
            t.filter = function(t, e, i) {
              var n = new Array(256)
                  , o = new Array(256);
              if (1 == this.gamma)
                for (var a = 0; a < 256; a++)
                  n[a] = a;
              else
                for (a = 0; a < 256; a++) {
                  var r = a / 256
                      , s = 256 * Math.pow(r, this.gamma) + 1e-4;
                  255 < s ? s = 255 : s < 0 && (s = 0),
                      n[a] = Math.floor(s)
                }
              var h = 255 - this.shift;
              if (this.gamma < 1) {
                a = 0;
                for (a = 0; a <= this.shift; a++)
                  o[a] = 0;
                for (a = this.shift + 1; a < 256; a++)
                  o[a] = Math.floor((a - this.shift) / (1 * h) * 255)
              } else {
                for (a = 255; h <= a; a--)
                  o[a] = 255;
                for (a = h - 1; 0 <= a; a--)
                  o[a] = Math.floor(255 * a / h)
              }
              for (a = 0; a < 256; a++)
                t[a] = o[n[t[a]]],
                    e[a] = o[n[e[a]]],
                    i[a] = o[n[i[a]]]
            }
      }
    }(),
    function() {
      if (!ColorAdjustmentFilter) {
        var t = (ColorAdjustmentFilter = function() {
              this.contrast = new Array(3),
                  this.brightness = new Array(3),
                  this.rt = new Array(256),
                  this.gt = new Array(256),
                  this.bt = new Array(256),
                  IColorFilter.apply(this)
            }
        ).prototype;
        t.setContrast = function(t, e, i) {
          this.contrast[0] = t,
              this.contrast[1] = e,
              this.contrast[2] = i
        }
            ,
            t.setBrightness = function(t, e, i) {
              this.brightness[0] = t,
                  this.brightness[1] = e,
                  this.brightness[2] = i
            }
            ,
            t.reset = function() {
              this.contrast[0] = 1,
                  this.contrast[1] = 1,
                  this.contrast[2] = 1,
                  this.brightness[0] = 0,
                  this.brightness[1] = 0,
                  this.brightness[2] = 0
            }
            ,
            t.filter = function(t, e, i) {
              for (var n = Math.floor(256 * this.contrast[0]), o = Math.floor(256 * this.contrast[1]), a = Math.floor(256 * this.contrast[2]), r = 0; r < 256; r++) {
                var s = r;
                s = (r * a >> 8) + this.brightness[2],
                    this.bt[r] = s < 0 ? 0 : 255 < s ? 255 : s,
                    s = (r * o >> 8) + this.brightness[1],
                    this.gt[r] = s < 0 ? 0 : 255 < s ? 255 : s,
                    s = (r * n >> 8) + this.brightness[0],
                    this.rt[r] = s < 0 ? 0 : 255 < s ? 255 : s
              }
              for (r = 0; r < 256; r++)
                t[r] = this.rt[t[r]],
                    e[r] = this.gt[e[r]],
                    i[r] = this.bt[i[r]]
            }
      }
    }(),
    function() {
      if (!ColorMappingFilter) {
        var t = (ColorMappingFilter = function() {
              this.minGray = 0,
                  this.maxGray = 255,
                  IColorFilter.apply(this)
            }
        ).prototype;
        t.reset = function() {
          this.minGray = 0,
              this.maxGray = 255
        }
            ,
            t.setGray = function(t, e) {
              t < 0 ? t = 0 : 255 < t && (t = 255),
                  e < 0 ? e = 0 : 255 < e && (e = 255),
              e < t && (e = t),
                  this.minGray = t,
                  this.maxGray = e
            }
            ,
            t.filter = function(t, e, i) {
              var n = this.minGray
                  , o = this.maxGray
                  , a = new Array(256)
                  , r = 0;
              n < o && (r = 255 / (o - n));
              for (var s = 0; s < n; s++)
                a[s] = 0;
              for (s = o; s < 256; s++)
                a[s] = 255;
              for (s = n; s < o; s++)
                a[s] = Math.floor((s - n) * r);
              for (s = 0; s < 256; s++)
                t[s] = a[t[s]],
                    e[s] = a[e[s]],
                    i[s] = a[i[s]]
            }
      }
    }(),
    function() {
      if (!ColorFilters) {
        var t = (ColorFilters = function() {
              this.needFilter = !1,
                  this.lutRed = new Array(256),
                  this.lutGreen = new Array(256),
                  this.lutBlue = new Array(256),
                  this.filters = new Array,
                  this.gammaFilter = new GammaCorrectionFilter,
                  this.mappingFilter = new ColorMappingFilter,
                  this.adjustFilter = new ColorAdjustmentFilter,
                  this.filters.push(this.gammaFilter),
                  this.filters.push(this.mappingFilter),
                  this.filters.push(this.adjustFilter),
                  ImageFilter.apply(this)
            }
        ).prototype;
        t.reset = function() {
          for (var t = 0; t < this.filters.length; t++)
            this.filters[t].reset()
        }
            ,
            t.setCorrectionValue = function(t, e) {
              this.gammaFilter.setCorrectionValue(t, e)
            }
            ,
            t.setContrast = function(t, e, i) {
              this.adjustFilter.setContrast(t, e, i)
            }
            ,
            t.setBrightness = function(t, e, i) {
              this.adjustFilter.setBrightness(t, e, i)
            }
            ,
            t.setGray = function(t, e) {
              this.mappingFilter.setGray(t, e)
            }
            ,
            t.refreshLut = function() {
              for (var t = 0; t < 256; t++)
                this.lutRed[t] = t,
                    this.lutGreen[t] = t,
                    this.lutBlue[t] = t;
              var e = this.filters.length;
              for (t = 0; t < e; t++)
                this.filters[t].filter(this.lutRed, this.lutGreen, this.lutBlue);
              this.needFilter = !1;
              for (t = 0; t < 256; t++)
                if (this.lutRed[t] != t || this.lutGreen[t] != t || this.lutBlue[t] != t) {
                  this.needFilter = !0;
                  break
                }
            }
            ,
            t.filter = function(t) {
              if (this.needFilter)
                for (var e = t.data, i = e.length, n = 0, o = 0; o < i; o += 4)
                  e[n = o] = this.lutRed[e[n]],
                      e[++n] = this.lutGreen[e[n]],
                      e[++n] = this.lutBlue[e[n]]
            }
      }
    }();
var SlideViewer = function(i) {
  SeadragonViewer.apply(this, [i]);
  var e, l, d, r, n, s, h, c, u, a, o, g, f, p = this, v = new Point(0,0), m = 0;
  this.provider,
      p.addEventListener("open", t),
      p.addEventListener("animation", C),
      p.addEventListener("animationstart", function() {
        SeadragonConfig.immediateRender != y && (P(SeadragonConfig.immediateRender = y),
            p.drawer.doNotClearCanvas = !1)
      }),
      S(!0),
      this.setViewerEnabled = function(t) {
        S(t)
      }
      ,
      this.bind = function(t, e) {
        p.addEventListener(t, e)
      }
      ,
      this.unbind = function(t, e) {
        p.removeEventListener(t, e)
      }
      ,
      this.getShapeCanvas = function() {
        return c
      }
      ,
      this.getNavigationView = function() {
        return r
      }
      ,
      this.getSlideLabel = function() {
        return n
      }
      ,
      this.getCurrentImage = function() {
        return d
      }
      ,
      this.getCurrentSlide = function() {
        return l
      }
      ,
      this.canWrite = function() {
        return 0 < (2 & m)
      }
      ,
      this.getScale = function() {
        return u
      }
      ,
      this.getImageProcessing = function() {
        return o
      }
      ,
      this.getImageAdjustment = function() {
        return d.imageAdjustment
      }
      ,
      this.getViewportMeasure = function() {
        if (d) {
          var t = p.viewport.getBounds(!0)
              , e = d.width * d.calibration;
          return new SeadragonRect(e * t.x,e * t.y,e * t.width,e * t.height)
        }
      }
      ,
      this.openMds = function(t) {
        (function(t) {
              if ("number" == typeof t) {
                var e = location.href.lastIndexOf("/");
                i = location.href.substring(0, e + 1)
              } else {
                var i, n = (i = decodeURI(t)).indexOf("?");
                i = i.substring(0, n)
              }
              return i
            }
        )(e = t),
            x(t)
      }
      ,
      this.openMdsWithPassword = function(t) {
        x(e, t)
      }
      ,
      this.zoomToObj = function(t) {
        var e = t / d.scanObjective * d.width / p.viewport.getContainerSize().x;
        p.viewport.zoomTo(e)
      }
      ,
      this.zoomByRatio = function(t) {
        p.viewport && (p.viewport.zoomBy(t),
            p.viewport.applyConstraints())
      }
      ,
      this.dataChanged = function() {
        if (c)
          return c.isShapeChanged
      }
      ,
      this.isBaseImage = function() {
        return d.isBaseImage
      }
      ,
      this.is3DImage = function() {
        return !!(d && 1 < d.tierCount)
      }
      ,
      this.change3DTierIndex = function(t) {
        p.source.tierIndex != t && (P(!0),
            p.source.tierIndex = t,
            p.drawer.doNotClearCanvas = !0,
            p.drawer.update(),
            o.adjust(),
            p.trigger("tierIndexChange"))
      }
      ,
      this.getCurrent3DTierIndex = function() {
        return p.source.tierIndex
      }
      ,
      this.getDefault3DTierIndex = function() {
        return d ? Math.floor(d.tierCount / 2) : 0
      }
      ,
      this.fitWindow = function() {
        p.viewport && p.viewport.goHome()
      }
      ,
      this.update = function() {
        c && c.showImageShapes(!0),
        p.drawer && p.drawer.update(),
        r && r.refresh(),
        o && o.adjust()
      }
      ,
      this.reset = function() {
        P(!0),
        c && (c.clearShapeCanvas(!0),
            c.showImageShapes(!0)),
            p.drawer.reset(),
            r.refresh()
      }
      ,
      this.rotate = function(t, e) {
        if (void 0 === t)
          return p._rotate();
        p.canWrite() && (null == e || e) && (d.imageAdjustment.rotateDegree = t / Math.PI * 180,
            p.provider.updateImageAdjustment(l.id, d.id, d.imageAdjustment)),
            p._rotate(t),
            p.update(),
            p.trigger("rotate", t)
      }
      ,
      this.rotateOffset = function(t) {
        if (null != t) {
          var e = p.rotate();
          null == e && (e = 0);
          var i = Math.round(e / Math.PI * 180);
          (i += t) < 0 ? i += 360 : 360 <= i && (i -= 360),
              e = i / 180 * Math.PI,
              p.rotate(e)
        }
      }
      ,
      this.zoomIn = function() {
        var t = Math.pow(SeadragonConfig.zoomPerScroll, 1);
        p.viewport.zoomBy(t),
            p.viewport.applyConstraints()
      }
      ,
      this.zoomOut = function() {
        var t = Math.pow(SeadragonConfig.zoomPerScroll, -1);
        p.viewport.zoomBy(t),
            p.viewport.applyConstraints()
      }
      ,
      this.showMessage = function(t, e) {
        var i;
        $(a).remove(),
        null == e && (e = 1500),
            (a = $("<div class='message'><h1>" + t + "</h1></div>")).appendTo("body");
        var n = ((i = null == p.viewport ? new Seadragon.Point($(window).width(),$(window).height()) : p.viewport.getContainerSize()).x - a.width()) / 2 + "px"
            , o = (i.y - a.height()) / 2 + "px";
        a.css({
          top: o,
          left: n,
          filter: "alpha(opacity=90)",
          opacity: "0.9",
          position: "absolute"
        }),
            a.delay(e).fadeOut(400, function() {
              $(this).remove()
            })
      }
      ,
      this.openImage = function(t) {
        M(t)
      }
      ,
      this.capture = function(t, e) {
        if (!d)
          throw "Unable to capture images, because there is not an opened slide.";
        var i;
        if (SlideViewerConfig.captureToSlide && (i = (SlideViewerConfig.captureFileName ? SlideViewerConfig.captureFileName : l.name) + ".jpg",
            e = function(t) {
              p.trigger("capture", t)
            }
            ,
            SlideViewerSupport.canvas)) {
          var n = c.getImageData(p.drawer.getCanvas());
          p.provider.addSlideCapture(l.id, i, n.split(",")[1], !1, function(t) {
            e(t)
          })
        } else {
          var o = p.viewport.getBounds()
              , a = d.width * u
              , r = new SeadragonRect(a * o.x,a * o.y,a * o.width,a * o.height)
              , s = new Point(d.width * o.x,d.width * o.y)
              , h = {
            slideId: l.id,
            image: d,
            bounds: r,
            topImagePoint: s,
            scale: u,
            tierIndex: p.source.tierIndex,
            is3DImage: p.is3DImage(),
            name: i,
            hasAnnotation: c.hasAnnotationOnView(),
            description: t
          };
          c && (h.activeShape = c.getActiveShape()),
              p.provider.capture(h, e)
        }
      }
      ,
      this.addOverlay = function(t) {
        t && p.drawer.elmt.appendChild(t)
      }
      ,
      this.setChangeViewportOffset = function(t, e) {
        null != t && (v.x = t),
        null != e && (v.y = e)
      }
      ,
      this.changeViewport = function(t) {
        if (t) {
          var e = p.viewport.getBounds(!0)
              , i = new SeadragonRect(0,0,1,d.height / d.width);
          switch (t) {
            case "left":
              e.x -= e.width + v.x / (d.width * u);
              break;
            case "up":
              e.y -= e.height + v.y / (d.width * u);
              break;
            case "right":
              e.x += e.width + v.x / (d.width * u);
              break;
            case "down":
              e.y += e.height + v.y / (d.width * u)
          }
          var n = p.rotate();
          if (n) {
            var o = p.viewport.getCenter(!0);
            e = e.rotate(-n, o)
          }
          var a = new SeadragonRect(-e.width,-e.height,i.width + 2 * e.width,i.height + 2 * e.height)
              , r = e.getBottomRight()
              , s = a.getBottomRight();
          if (!(e.x < a.x || e.y < a.y || r.x > s.x || r.y > s.y)) {
            var h = new SeadragonPoint(e.x + e.width / 2,e.y + e.height / 2);
            p.viewport.panTo(h)
          }
        }
      }
  ;
  var w, y = SeadragonConfig.immediateRender;
  function P(t) {
    t != SeadragonConfig.immediateRender && (y = SeadragonConfig.immediateRender,
        SeadragonConfig.immediateRender = t),
        SeadragonConfig.blendTime = t ? 0 : .5
  }
  function S(t) {
    if (g != t && (g = t,
        p.setMouseNavEnabled(t),
        $.support.touch)) {
      var e = $("#" + i);
      f || (f = new Hammer(e[0])).get("pinch").set({
        enable: !0
      }),
          t ? (e.bind("touchstart", T),
              e.bind("touchmove", A),
              e.bind("touchend", R),
              f.on("pinch", E),
              f.on("pinchstart", I)) : (e.unbind("touchstart", T),
              e.unbind("touchmove", A),
              e.unbind("touchend", R),
              f.off("pinch", E),
              f.off("pinchstart", I))
    }
  }
  function x(t, e) {
    function i(t) {
      t.error || 0 != t.resultCode ? p.trigger("openslideunsuccessfully", t) : (l = t.slide,
          M())
    }
    p.provider = new SlideProvider,
        e ? p.provider.openSlideWithPassword(t, e, i) : p.provider.openSlide(t, i)
  }
  function M(t) {
    (d = t ? t.image : l.baseImage).imageAdjustment || function(t, e) {
      p.provider.getImageAdjustment(t, e, !0, function(t) {
        if (t.error)
          throw "Get image adjustment error.";
        d.imageAdjustment = t.adjustment,
            d.imageAdjustment ? d.imageAdjustment.rotateDegree && 0 < d.imageAdjustment.rotateDegree && (p.rotate(d.imageAdjustment.rotateDegree / 180 * Math.PI, !1),
                p.trigger("initrotatedegree", d.imageAdjustment.rotateDegree)) : d.imageAdjustment = new ImageAdjustment,
            source = new SeadragonMdsTileSource(l.id,d.id,d.width,d.height,d.tileSize,0,"image/jpeg",p.provider),
            source.tierIndex = p.getDefault3DTierIndex(),
            p.openTileSource(source)
      })
    }(l.id, d.id),
        p.provider.loadImageIndex(l, d)
  }
  function t() {
    p.provider.getSlidePermission(l.id, function(t) {
      0 < (2 & (m = t)) && c && c.isShapeChanged,
          p.trigger("getPermission")
    }),
        function() {
          if (d) {
            var t, e;
            d.width > d.height ? (t = 200,
                e = Math.floor(t * d.height / d.width)) : (e = 200,
                t = Math.floor(e * d.width / d.height));
            var i = new SeadragonPoint(t,e);
            p.trigger("beforecreatenavigationview", i),
            i && (t = i.x,
                e = i.y);
            var n = SlideViewerConfig.navMapPosition ? SlideViewerConfig.navMapPosition : Seadragon.ControlAnchor.TOP_LEFT
                , o = p.provider.getThumbnailUrl(l.id, d.id);
            (r = new NavigationView(p,o,t,e,n)).onUserMove = function(t, e) {
              p.viewport && p.viewport.panTo(new SeadragonPoint(t,e))
            }
                ,
                r.setVisibility(SlideViewerConfig.showNavMap()),
                p.addControl(r.elmt, n),
                C()
          }
        }(),
        (o = new ImageProcessing(p)).start(),
        function() {
          if (SlideViewerSupport.canvas)
            return;
          if (p.drawer.clearOverlays(),
          d.isBaseImage && 0 < l.ROIs.length)
            for (var t = l.baseImage.height / l.baseImage.width, e = 0; e < l.ROIs.length; e++) {
              var i = l.ROIs[e]
                  , n = i.x / l.baseImage.width
                  , o = i.y / l.baseImage.height * t
                  , a = i.width / l.baseImage.width
                  , r = i.height / l.baseImage.height * t
                  , s = document.createElement("div")
                  , h = document.createTextNode(i.scanObjective + "x");
              s.appendChild(h),
                  i.hasImage ? s.style.backgroundColor = "#006400" : s.style.backgroundColor = "#A0A000",
                  s.style.opacity = .4,
                  s.style.filter = "alpha(opacity=40)",
                  $(s).dblclick(i, b),
                  $(s).hover(function() {
                    this.style.border = "medium solid Blue"
                  }, function() {
                    this.style.border = ""
                  }),
                  p.drawer.addOverlay(s, new Seadragon.Rect(n,o,a,r))
            }
        }(),
        function() {
          c = c || new ShapeCanvas(p);
          if (!c.createShapeCanvas())
            return;
          var t;
          d.isBaseImage && (t = l.ROIs);
          c.setOpenImage(d, l.id, t),
              d.hasAnnotations ? (c.initImageAnnotationsShape(d.annotations),
                  c.showImageShapes()) : (c.clearShapeArray(),
                  p.provider.getAnnotation(l.id, d.id, function(t) {
                    if (t.error)
                      return void (error = new MdsError(t.error));
                    d.hasAnnotations = !0,
                        d.annotations = t.annotations,
                        c.initImageAnnotationsShape(t.annotations),
                        c.showImageShapes()
                  }))
        }(),
        function() {
          if (!d)
            return;
          if (!SlideLabel || n)
            return;
          var t = p.provider.getLabelUrl(l.id, d.id);
          (n = new SlideLabel(t)).setVisibility(SlideViewerConfig.showLabel()),
              p.addControl(n.elmt, Seadragon.ControlAnchor.TOP_RIGHT)
        }(),
        p.update()
  }
  function C() {
    if (p.viewport) {
      var t = p.viewport.getZoom(!0)
          , e = p.viewport.getContainerSize()
          , i = p.viewport.getBounds()
          , n = p.viewport.getAspectRatio()
          , o = {
        viewportWidth: t,
        containerSize: e,
        bounds: i,
        aspectRatio: n,
        scale: u = e.x * t / d.width,
        rotation: p.rotate()
      };
      if (p.trigger("viewportchanged", o),
          r) {
        r.UpdateViewRect(p.viewport.getZoom(), i.x, i.y, n);
        var a = Seadragon.Utils.getElementPosition(r.elmt);
        r.isOnDragging() || r.UpdateThumbnailOrigin(a.x, a.y)
      }
    }
  }
  function b(t) {
    if (t.data.hasImage)
      if (t.stopPropagation(),
      0 < (2 & m) && c && c.isShapeChanged) {
        var e = new AnnotationSaveDialog(p);
        e.show(),
            e.closeDialog = function() {
              M(t.data)
            }
      } else
        M(t.data)
  }
  function T(t) {
    var e = t.originalEvent;
    s = e.targetTouches[0].clientX,
        h = e.targetTouches[0].clientY
  }
  function A(t) {
    var e = t.originalEvent;
    if (e.preventDefault(),
    p.viewport && 1 == e.targetTouches.length) {
      var i = s - e.targetTouches[0].clientX
          , n = h - e.targetTouches[0].clientY;
      s = e.targetTouches[0].clientX,
          h = e.targetTouches[0].clientY;
      var o = new SeadragonPoint(i,n)
          , a = p.viewport.deltaPointsFromPixels(rotateDeltaPixels(o, p.rotate()));
      p.viewport.panBy(a)
    }
  }
  function R(t) {}
  function I(t) {
    w = p.viewport.getZoom(!0)
  }
  function E(t) {
    var e = t.originalEvent ? t.originalEvent : t;
    if (e.preventDefault(),
        p.viewport) {
      var i = w * e.scale;
      p.viewport.getMinZoom() < i && i < p.viewport.getMaxZoom() && p.viewport.zoomTo(i)
    }
  }
};
//# sourceMappingURL=viewer.base.min.js.map
